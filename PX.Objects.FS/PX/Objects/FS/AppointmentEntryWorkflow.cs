// Decompiled with JetBrains decompiler
// Type: PX.Objects.FS.AppointmentEntryWorkflow
// Assembly: PX.Objects.FS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6B78C88F-1039-47BB-84A6-5486C1B99824
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.FS.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.FS.xml

using PX.Common;
using PX.Data;
using PX.Data.BQL;
using PX.Data.WorkflowAPI;
using PX.Objects.Common;
using PX.Objects.CR;
using PX.Objects.CS;
using PX.Objects.FS.SiteStatusLookup;
using System;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.FS;

public class AppointmentEntryWorkflow : PXGraphExtension<AppointmentEntry>
{
  public virtual void Configure(PXScreenConfiguration config)
  {
    AppointmentEntryWorkflow.Configure(config.GetScreenConfigurationContext<AppointmentEntry, FSAppointment>());
  }

  protected static void Configure(
    WorkflowContext<AppointmentEntry, FSAppointment> context)
  {
    var conditions = new
    {
      IsOnHold = Bql<BqlOperand<FSAppointment.hold, IBqlBool>.IsEqual<True>>(),
      allowEdit = Bql<BqlOperand<Current<FSAppointment.status>, IBqlString>.IsEqual<ListField.AppointmentStatus.completed>>(),
      IsNotOnHold = Bql<BqlOperand<FSAppointment.hold, IBqlBool>.IsEqual<False>>(),
      IsNotStarted = Bql<BqlOperand<FSAppointment.notStarted, IBqlBool>.IsEqual<True>>(),
      IsCompleted = Bql<BqlOperand<FSAppointment.completed, IBqlBool>.IsEqual<True>>(),
      IsCanceled = Bql<BqlOperand<FSAppointment.canceled, IBqlBool>.IsEqual<True>>(),
      IsCLosed = Bql<BqlOperand<FSAppointment.closed, IBqlBool>.IsEqual<True>>(),
      IsBilled = Bql<BqlOperand<FSAppointment.billed, IBqlBool>.IsEqual<True>>(),
      IsInProcess = Bql<BqlOperand<FSAppointment.inProcess, IBqlBool>.IsEqual<True>>(),
      IsPaused = Bql<BqlOperand<FSAppointment.paused, IBqlBool>.IsEqual<True>>(),
      IsConfirmed = Bql<BqlOperand<FSAppointment.confirmed, IBqlBool>.IsEqual<True>>(),
      IsClosed = Bql<BqlOperand<FSAppointment.closed, IBqlBool>.IsEqual<True>>(),
      IsSigned = Bql<BqlOperand<FSAppointment.customerSignedReport, IBqlGuid>.IsNotNull>(),
      IsWaitingForContractPeriod = Bql<BqlOperand<FSAppointment.awaiting, IBqlBool>.IsEqual<True>>(),
      IsInternalBehavior = Bql<BqlOperand<Current<FSSrvOrdType.behavior>, IBqlString>.IsEqual<ListField.ServiceOrderTypeBehavior.internalAppointment>>(),
      PostToSOSIPM = Bql<BqlOperand<Current<FSSrvOrdType.postToSOSIPM>, IBqlBool>.IsEqual<True>>(),
      PostToProjects = Bql<BqlOperand<Current<FSSrvOrdType.postTo>, IBqlString>.IsEqual<FSPostTo.Projects>>(),
      CustomerIsSpecified = Bql<BqlOperand<FSAppointment.customerID, IBqlInt>.IsGreater<Zero>>(),
      IsTravelInProcess = Bql<BqlOperand<FSAppointment.travelInProcess, IBqlBool>.IsEqual<True>>(),
      UserConfirmedUnclosing = Bql<BqlOperand<FSAppointment.userConfirmedUnclosing, IBqlBool>.IsEqual<True>>(),
      CustomerIsProspect = Bql<BqlOperand<Current<BAccount.type>, IBqlString>.IsEqual<BAccountType.prospectType>>(),
      IsFinalState = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.canceled, Equal<True>>>>>.Or<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.closed, Equal<True>>>>>.Or<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.hold, Equal<True>>>>>.Or<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.billed, Equal<True>>>>>.Or<BqlOperand<FSAppointment.awaiting, IBqlBool>.IsEqual<True>>>>>>(),
      IsAllowedForInvoice = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.closed, Equal<True>>>>>.Or<Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.closed, Equal<False>>>>>.And<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.completed, Equal<True>>>>>.And<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<Current<FSSrvOrdType.allowInvoiceOnlyClosedAppointment>, Equal<False>>>>>.And<BqlOperand<FSAppointment.timeRegistered, IBqlBool>.IsEqual<True>>>>>>>(),
      ServiceOrderIsAllowedForInvoice = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<Current<FSBillingCycle.invoiceOnlyCompletedServiceOrder>, Equal<False>>>>>.Or<Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSBillingCycle.invoiceOnlyCompletedServiceOrder, Equal<True>>>>>.And<Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<Current<FSServiceOrder.completed>, Equal<True>>>>>.Or<BqlOperand<Current<FSServiceOrder.closed>, IBqlBool>.IsEqual<True>>>>>>>(),
      IsQuickProcessEnabled = Bql<BqlOperand<Current<FSSrvOrdType.allowQuickProcess>, IBqlBool>.IsEqual<True>>(),
      IsBilledByAppointment = Bql<BqlChainableConditionMirror<TypeArrayOf<IBqlBinary>.Append<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSServiceOrder.billingBy, IsNotNull>>>, And<BqlOperand<Current<FSServiceOrder.billingBy>, IBqlString>.IsEqual<ListField_Billing_By.Appointment>>>>.Or<Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSServiceOrder.billingBy, IsNull>>>>.And<BqlOperand<Current<FSBillingCycle.billingBy>, IBqlString>.IsEqual<ListField_Billing_By.Appointment>>>>>(),
      IsBilledByContract = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<FSAppointment.billServiceContractID, IsNotNull>>>>.And<BqlOperand<Current<FSServiceContract.billingType>, IBqlString>.IsEqual<ListField.ServiceContractBillingType.standardizedBillings>>>(),
      HasNoLinesToCreatePurchaseOrder = Bql<BqlOperand<FSAppointment.pendingPOLineCntr, IBqlInt>.IsEqual<Zero>>(),
      HasNoLinesToCreatePurchaseOrderToAppt = Bql<BqlOperand<FSAppointment.pendingApptPOLineCntr, IBqlInt>.IsEqual<Zero>>(),
      HasNoStaffLines = Bql<BqlOperand<FSAppointment.employeeLineCntr, IBqlInt>.IsEqual<Zero>>(),
      RoomFeatureEnabled = Bql<BqlOperand<Current<FSSetup.manageRooms>, IBqlBool>.IsEqual<True>>(),
      IsExpenseFeatureEnabled = Bql<FeatureInstalled<FeaturesSet.expenseManagement>>(),
      IsInserted = Bql<BqlOperand<FSAppointment.appointmentID, IBqlInt>.IsLess<Zero>>(),
      TravelCanBeStarted = Bql<BqlOperand<FSAppointment.travelCanBeStarted, IBqlBool>.IsEqual<True>>(),
      IsStarting = Bql<BqlOperand<FSAppointment.startActionRunning, IBqlBool>.IsEqual<True>>(),
      IsReopening = Bql<BqlOperand<FSAppointment.reopenActionRunning, IBqlBool>.IsEqual<True>>(),
      IsPausing = Bql<BqlOperand<FSAppointment.pauseActionRunning, IBqlBool>.IsEqual<True>>(),
      IsResuming = Bql<BqlOperand<FSAppointment.resumeActionRunning, IBqlBool>.IsEqual<True>>(),
      IsCompleting = Bql<BqlOperand<FSAppointment.completeActionRunning, IBqlBool>.IsEqual<True>>(),
      IsCancelling = Bql<BqlOperand<FSAppointment.cancelActionRunning, IBqlBool>.IsEqual<True>>(),
      IsClosing = Bql<BqlOperand<FSAppointment.closeActionRunning, IBqlBool>.IsEqual<True>>(),
      IsUnclosing = Bql<BqlOperand<FSAppointment.unCloseActionRunning, IBqlBool>.IsEqual<True>>()
    }.AutoNameConditions();
    CommonActionCategories.Categories<AppointmentEntry, FSAppointment> categories1 = CommonActionCategories.Get<AppointmentEntry, FSAppointment>(context);
    BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured processingCategory = categories1.Processing;
    BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured correctionCategory = context.Categories.CreateNew("Corrections Category", (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured>) (category => (BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured) category.DisplayName("Corrections")));
    BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured schedulingCategory = context.Categories.CreateNew("Scheduling Category", (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured>) (category => (BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured) category.DisplayName("Scheduling")));
    BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured printingEmailingCategory = categories1.PrintingAndEmailing;
    BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured replenishmentCategory = context.Categories.CreateNew("Replenishment Category", (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured>) (category => (BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured) category.DisplayName("Replenishment")));
    BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured otherCategory = categories1.Other;
    BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured travelingCategory = context.Categories.CreateNew("Traveling Category", (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured>) (category => (BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IConfigured) category.DisplayName("Traveling")));
    context.AddScreenConfigurationFor((Func<BoundedTo<AppointmentEntry, FSAppointment>.ScreenConfiguration.IStartConfigScreen, BoundedTo<AppointmentEntry, FSAppointment>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<AppointmentEntry, FSAppointment>.ScreenConfiguration.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<FSAppointment.status>().FlowTypeIdentifierIs<FSAppointment.workflowTypeID>(false).WithFlows((Action<BoundedTo<AppointmentEntry, FSAppointment>.Workflow.IContainerFillerFlows>) (flows =>
    {
      flows.AddDefault(new Func<BoundedTo<AppointmentEntry, FSAppointment>.Workflow.INeedStatesFlow, BoundedTo<AppointmentEntry, FSAppointment>.Workflow.IConfigured>(SimpleAppointmentFlow));
      flows.Add<ListField.ServiceOrderWorkflowTypes.simple>(new Func<BoundedTo<AppointmentEntry, FSAppointment>.Workflow.INeedStatesFlow, BoundedTo<AppointmentEntry, FSAppointment>.Workflow.IConfigured>(SimpleAppointmentFlow));
    })).WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.initializeState), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsHiddenAlways()));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.releaseFromHold), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<FSAppointment.hold>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
        fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
      }))));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.putOnHold), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<FSAppointment.hold>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
      }))));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        fas.Add<FSAppointment.startActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
      }))));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.pauseAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
        {
          fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          fas.Add<FSAppointment.pauseActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        }));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isNotStarted = conditions.IsNotStarted;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition106 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isNotStarted) ? isNotStarted : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isNotStarted, conditions.IsCompleted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition107 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition106) ? condition106 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition106, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition108 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition107) ? condition107 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition107, conditions.IsCLosed);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition109 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition108) ? condition108 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition108, conditions.IsInserted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition110 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition109) ? condition109 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition109, conditions.IsCanceled);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition110);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.resumeAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
        {
          fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          fas.Add<FSAppointment.resumeActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        }));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isNotStarted = conditions.IsNotStarted;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition111 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isNotStarted) ? isNotStarted : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isNotStarted, conditions.IsCompleted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition112 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition111) ? condition111 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition111, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition113 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition112) ? condition112 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition112, conditions.IsCLosed);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition114 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition113) ? condition113 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition113, conditions.IsInProcess);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition115 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition114) ? condition114 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition114, conditions.IsInserted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition116 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition115) ? condition115 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition115, conditions.IsCanceled);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition116);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
        {
          fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          fas.Add<FSAppointment.completeActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        }));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isNotStarted = conditions.IsNotStarted;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition117 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isNotStarted) ? isNotStarted : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isNotStarted, conditions.IsCompleted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition118 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition117) ? condition117 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition117, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition119 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition118) ? condition118 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition118, conditions.IsCLosed);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition120 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition119) ? condition119 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition119, conditions.IsCanceled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition121 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition120) ? condition120 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition120, conditions.IsInserted);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition121).WithPersistOptions((ActionPersistOptions) 1);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.closeAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
        {
          fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          fas.Add<FSAppointment.closeActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        }));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isNotStarted = conditions.IsNotStarted;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition122 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isNotStarted) ? isNotStarted : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isNotStarted, conditions.IsInProcess);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition123 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition122) ? condition122 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition122, conditions.IsPaused);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition124 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition123) ? condition123 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition123, conditions.IsCLosed);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition125 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition124) ? condition124 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition124, conditions.IsCanceled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition126 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition125) ? condition125 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition125, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition127 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition126) ? condition126 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition126, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.HasNoLinesToCreatePurchaseOrderToAppt));
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition127).WithPersistOptions((ActionPersistOptions) 1);
      }));
      actions.Add<AppointmentEntry.AppointmentQuickProcess>((Expression<Func<AppointmentEntry.AppointmentQuickProcess, PXAction<FSAppointment>>>) (g => g.quickProcess), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction7 = c.WithCategory(processingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition128 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsBilledByAppointment);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition129 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition128) ? condition128 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition128, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsQuickProcessEnabled));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition130 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition129) ? condition129 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition129, conditions.IsOnHold);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition131 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition130) ? condition130 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition130, conditions.IsCanceled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition132 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition131) ? condition131 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition131, conditions.IsInProcess);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition133 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition132) ? condition132 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition132, conditions.IsBilledByContract);
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction8 = optionalConfigAction7.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition133);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition134 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsBilledByAppointment);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition135 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition134) ? condition134 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition134, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsQuickProcessEnabled));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition136 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition135) ? condition135 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition135, conditions.IsOnHold);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition137 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition136) ? condition136 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition136, conditions.IsBilledByContract);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition138 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition137) ? condition137 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition137, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.HasNoLinesToCreatePurchaseOrderToAppt));
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction8.IsHiddenWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition138);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.invoiceAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction9 = c.WithCategory(processingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isBilled = conditions.IsBilled;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition139 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isBilled) ? isBilled : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isBilled, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsAllowedForInvoice));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition140 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition139) ? condition139 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition139, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsBilledByAppointment));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition141 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition140) ? condition140 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition140, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.ServiceOrderIsAllowedForInvoice));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition142 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition141) ? condition141 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition141, conditions.IsBilledByContract);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition143 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition142) ? condition142 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition142, conditions.IsInternalBehavior);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition144 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition143) ? condition143 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition143, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.HasNoLinesToCreatePurchaseOrderToAppt));
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction10 = optionalConfigAction9.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition144);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition145 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsBilledByAppointment);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition146 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition145) ? condition145 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition145, conditions.IsInternalBehavior);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction10.IsHiddenWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition146);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.cancelAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.cancelActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)))));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isCompleted = conditions.IsCompleted;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition147 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isCompleted) ? isCompleted : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isCompleted, conditions.IsInProcess);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition148 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition147) ? condition147 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition147, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition149 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition148) ? condition148 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition148, conditions.IsCLosed);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition150 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition149) ? condition149 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition149, conditions.IsPaused);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition150);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(travelingCategory).IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsInserted)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(travelingCategory).IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsTravelInProcess))));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.cloneAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(schedulingCategory)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.openEmployeeBoard), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(schedulingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isOnHold = conditions.IsOnHold;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition151 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isOnHold) ? isOnHold : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isOnHold, conditions.IsWaitingForContractPeriod);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition152 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition151) ? condition151 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition151, conditions.IsCompleted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition153 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition152) ? condition152 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition152, conditions.IsCanceled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition154 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition153) ? condition153 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition153, conditions.IsInserted);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition154);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.openUserCalendar), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(schedulingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isOnHold = conditions.IsOnHold;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition155 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isOnHold) ? isOnHold : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isOnHold, conditions.IsWaitingForContractPeriod);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition156 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition155) ? condition155 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition155, conditions.IsCompleted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition157 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition156) ? condition156 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition156, conditions.IsCanceled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition158 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition157) ? condition157 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition157, conditions.IsInserted);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition158);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.openRoomBoard), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(schedulingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isOnHold = conditions.IsOnHold;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition159 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isOnHold) ? isOnHold : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isOnHold, conditions.IsWaitingForContractPeriod);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition160 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition159) ? condition159 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition159, conditions.IsCompleted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition161 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition160) ? condition160 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition160, conditions.IsCanceled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition162 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition161) ? condition161 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition161, conditions.IsInserted);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition162).IsHiddenWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.RoomFeatureEnabled));
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.reopenAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(correctionCategory).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
        {
          fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          fas.Add<FSAppointment.reopenActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        }));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isNotStarted = conditions.IsNotStarted;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition163 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isNotStarted) ? isNotStarted : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isNotStarted, conditions.IsPaused);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition164 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition163) ? condition163 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition163, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition165 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition164) ? condition164 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition164, conditions.IsCLosed);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition166 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition165) ? condition165 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition165, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition167 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition166) ? condition166 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition166, conditions.IsCompleted);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition167);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.editAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        fas.Add<FSAppointment.editActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
      })).IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.allowEdit)).WithPersistOptions((ActionPersistOptions) 1).WithCategory(correctionCategory)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.uncloseAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(correctionCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.unCloseActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)))))));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.billReversal), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction11 = c.WithCategory(correctionCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isInserted = conditions.IsInserted;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition168 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isInserted) ? isInserted : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isInserted, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsBilledByAppointment));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition169 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition168) ? condition168 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition168, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.PostToProjects));
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction12 = optionalConfigAction11.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition169);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition170 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsBilledByAppointment);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition171 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition170) ? condition170 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition170, conditions.IsInternalBehavior);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction12.IsHiddenWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition171);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.printAppointmentReport), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.printServiceTimeActivityReport), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.emailConfirmationToCustomer), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(printingEmailingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isOnHold = conditions.IsOnHold;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition172 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isOnHold) ? isOnHold : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isOnHold, conditions.IsWaitingForContractPeriod);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition173 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition172) ? condition172 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition172, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsConfirmed));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition174 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition173) ? condition173 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition173, conditions.HasNoStaffLines);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition175 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition174) ? condition174 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition174, conditions.IsCLosed);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition175);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.emailConfirmationToStaffMember), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(printingEmailingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isOnHold = conditions.IsOnHold;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition176 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isOnHold) ? isOnHold : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isOnHold, conditions.IsWaitingForContractPeriod);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition177 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition176) ? condition176 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition176, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsConfirmed));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition178 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition177) ? condition177 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition177, conditions.HasNoStaffLines);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition179 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition178) ? condition178 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition178, conditions.IsClosed);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition179);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.emailConfirmationToGeoZoneStaff), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(printingEmailingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isOnHold = conditions.IsOnHold;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition180 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isOnHold) ? isOnHold : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isOnHold, conditions.IsWaitingForContractPeriod);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition181 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition180) ? condition180 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition180, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.HasNoStaffLines));
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition181);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.emailSignedAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(printingEmailingCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isOnHold = conditions.IsOnHold;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition182 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isOnHold) ? isOnHold : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isOnHold, conditions.IsWaitingForContractPeriod);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition183 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition182) ? condition182 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition182, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsSigned));
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition183);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.createPurchaseOrder), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(replenishmentCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition createPurchaseOrder = conditions.HasNoLinesToCreatePurchaseOrder;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition184 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(createPurchaseOrder) ? createPurchaseOrder : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(createPurchaseOrder, conditions.IsFinalState);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition185 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition184) ? condition184 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition184, conditions.IsBilled);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition185);
      }));
      actions.Add<AppointmentEntryExternalTax>((Expression<Func<AppointmentEntryExternalTax, PXAction<FSAppointment>>>) (g => g.recalcExternalTax), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c.WithCategory(otherCategory);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isBilled = conditions.IsBilled;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isBilled) ? isBilled : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isBilled, conditions.IsCLosed);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition);
      }));
      actions.Add<AppointmentSiteStatusLookupExt>((Expression<Func<AppointmentSiteStatusLookupExt, PXAction<FSAppointment>>>) (g => g.showItems), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isCanceled = conditions.IsCanceled;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition186 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isCanceled) ? isCanceled : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isCanceled, conditions.IsOnHold);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition187 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition186) ? condition186 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition186, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition188 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition187) ? condition187 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition187, conditions.IsClosed);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition189 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition188) ? condition188 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition188, conditions.IsInternalBehavior);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition190 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition189) ? condition189 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition189, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.CustomerIsSpecified));
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition190);
      }));
      actions.Add<AppointmentSiteStatusLookupExt>((Expression<Func<AppointmentSiteStatusLookupExt, PXAction<FSAppointment>>>) (g => g.addSelectedItems), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.addReceipt), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isCanceled = conditions.IsCanceled;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition191 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isCanceled) ? isCanceled : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isCanceled, conditions.IsInternalBehavior);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition192 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition191) ? condition191 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition191, conditions.IsInserted);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition192).IsHiddenWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsExpenseFeatureEnabled));
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.addBill), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isCanceled = conditions.IsCanceled;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition193 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isCanceled) ? isCanceled : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isCanceled, conditions.IsInternalBehavior);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition194 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition193) ? condition193 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition193, conditions.IsInserted);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition194);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.openStaffSelectorFromServiceTab), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isCanceled = conditions.IsCanceled;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition195 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isCanceled) ? isCanceled : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isCanceled, conditions.IsOnHold);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition196 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition195) ? condition195 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition195, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition197 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition196) ? condition196 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition196, conditions.IsClosed);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition197);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.openStaffSelectorFromStaffTab), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isCanceled = conditions.IsCanceled;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition198 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isCanceled) ? isCanceled : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isCanceled, conditions.IsOnHold);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition199 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition198) ? condition198 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition198, conditions.IsBilled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition200 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition199) ? condition199 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition199, conditions.IsClosed);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition200);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.createPrepayment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition isFinalState = conditions.IsFinalState;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition201 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(isFinalState) ? isFinalState : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(isFinalState, conditions.IsInserted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition202 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition201) ? condition201 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition201, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.PostToSOSIPM));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition203 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition202) ? condition202 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition202, conditions.IsBilledByContract);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition203);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.openSourceDocument), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.createNewCustomer), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.viewDirectionOnMap), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.OpenPostingDocument), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.viewPayment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.validateAddress), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startItemLine), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.pauseItemLine), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.resumeItemLine), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeItemLine), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.cancelItemLine), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startStaff), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.pauseStaff), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.resumeStaff), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeStaff), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.departStaff), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.arriveStaff), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c => (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) c.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsFinalState)));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.quickProcessMobile), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition204 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsBilledByAppointment);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition205 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition204) ? condition204 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition204, BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_LogicalNot(conditions.IsQuickProcessEnabled));
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition206 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition205) ? condition205 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition205, conditions.IsOnHold);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition207 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition206) ? condition206 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition206, conditions.IsCanceled);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition208 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition207) ? condition207 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition207, conditions.IsInProcess);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition209 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition208) ? condition208 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition208, conditions.IsNotStarted);
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition210 = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(condition209) ? condition209 : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(condition209, conditions.IsBilledByContract);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition210);
      }));
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.openScheduleScreen), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.createPurchaseOrderMobile), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured>) (c =>
      {
        BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IAllowOptionalConfigAction optionalConfigAction = c;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition createPurchaseOrder = conditions.HasNoLinesToCreatePurchaseOrder;
        BoundedTo<AppointmentEntry, FSAppointment>.Condition condition = BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_True(createPurchaseOrder) ? createPurchaseOrder : BoundedTo<AppointmentEntry, FSAppointment>.Condition.op_BitwiseOr(createPurchaseOrder, conditions.IsFinalState);
        return (BoundedTo<AppointmentEntry, FSAppointment>.ActionDefinition.IConfigured) optionalConfigAction.IsDisabledWhen((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) condition);
      }));
    })).WithCategories((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(travelingCategory);
      categories.Add(schedulingCategory);
      categories.Add(correctionCategory);
      categories.Add(printingEmailingCategory);
      categories.Add(replenishmentCategory);
      categories.Add(otherCategory);
    })).WithHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IContainerFillerHandlers>) (handlers =>
    {
      handlers.Add(new Func<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>(OnServiceContractCleared));
      handlers.Add(new Func<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>(OnServiceContractPeriodAssigned));
      handlers.Add(new Func<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>(OnRequiredServiceContractPeriodCleared));
      handlers.Add(new Func<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>(OnAppointmentUnposted));
      handlers.Add(new Func<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>(OnAppointmentPosted));
      handlers.Add(new Func<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>(OnAppointmentStatusChanged));
    }))));

    static void DisableWholeScreen(
      BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IContainerFillerFields states)
    {
      states.AddTable<FSAppointment>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSServiceOrder>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSAppointmentDet>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSProfitability>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSApptLineSplit>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSAppointmentResource>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSAppointmentLog>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSAddress>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSContact>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSAppointmentEmployee>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSAppointmentTax>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
      states.AddTable<FSAppointmentTaxTran>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.INeedAnyConfigField, BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured>) (state => (BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IConfigured) state.IsDisabled()));
    }

    static BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase OnServiceContractCleared(
      BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget handler)
    {
      return (BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedSubscriber<FSAppointment>) handler.WithTargetOf<FSAppointment>().OfEntityEvent<FSAppointment.Events>((Expression<Func<FSAppointment.Events, PXEntityEvent<FSAppointment>>>) (e => e.ServiceContractCleared))).Is((Expression<Func<FSAppointment, PXWorkflowEventHandler<FSAppointment, FSAppointment>>>) (g => g.OnServiceContractCleared))).UsesTargetAsPrimaryEntity()).DisplayName("Service Contract Cleared");
    }

    static BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase OnServiceContractPeriodAssigned(
      BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget handler)
    {
      return (BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedSubscriber<FSAppointment>) handler.WithTargetOf<FSAppointment>().OfEntityEvent<FSAppointment.Events>((Expression<Func<FSAppointment.Events, PXEntityEvent<FSAppointment>>>) (e => e.ServiceContractPeriodAssigned))).Is((Expression<Func<FSAppointment, PXWorkflowEventHandler<FSAppointment, FSAppointment>>>) (g => g.OnServiceContractPeriodAssigned))).UsesTargetAsPrimaryEntity()).DisplayName("Service Contract Period Assigned");
    }

    static BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase OnRequiredServiceContractPeriodCleared(
      BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget handler)
    {
      return (BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedSubscriber<FSAppointment>) handler.WithTargetOf<FSAppointment>().OfEntityEvent<FSAppointment.Events>((Expression<Func<FSAppointment.Events, PXEntityEvent<FSAppointment>>>) (e => e.RequiredServiceContractPeriodCleared))).Is((Expression<Func<FSAppointment, PXWorkflowEventHandler<FSAppointment, FSAppointment>>>) (g => g.OnRequiredServiceContractPeriodCleared))).UsesTargetAsPrimaryEntity()).DisplayName("Required Service Contract Period Cleared");
    }

    static BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase OnAppointmentUnposted(
      BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget handler)
    {
      return (BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedSubscriber<FSAppointment>) handler.WithTargetOf<FSAppointment>().OfEntityEvent<FSAppointment.Events>((Expression<Func<FSAppointment.Events, PXEntityEvent<FSAppointment>>>) (e => e.AppointmentUnposted))).Is((Expression<Func<FSAppointment, PXWorkflowEventHandler<FSAppointment, FSAppointment>>>) (g => g.OnAppointmentUnposted))).UsesTargetAsPrimaryEntity()).DisplayName("Appointment Unposted");
    }

    static BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase OnAppointmentPosted(
      BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget handler)
    {
      return (BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedSubscriber<FSAppointment>) handler.WithTargetOf<FSAppointment>().OfEntityEvent<FSAppointment.Events>((Expression<Func<FSAppointment.Events, PXEntityEvent<FSAppointment>>>) (e => e.AppointmentPosted))).Is((Expression<Func<FSAppointment, PXWorkflowEventHandler<FSAppointment, FSAppointment>>>) (g => g.OnAppointmentPosted))).UsesTargetAsPrimaryEntity()).DisplayName("Appointment Posted");
    }

    static BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase OnAppointmentStatusChanged(
      BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventTarget handler)
    {
      return (BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<FSAppointment>) ((BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandlerDefinition.INeedSubscriber<FSAppointment>) handler.WithTargetOf<FSAppointment>().OfEntityEvent<FSAppointment.Events>((Expression<Func<FSAppointment.Events, PXEntityEvent<FSAppointment>>>) (e => e.AppointmentStatusChanged))).Is((Expression<Func<FSAppointment, PXWorkflowEventHandler<FSAppointment, FSAppointment>>>) (g => g.OnAppointmentStatusChanged))).UsesTargetAsPrimaryEntity()).DisplayName("Appointment Status Changed");
    }

    BoundedTo<AppointmentEntry, FSAppointment>.Condition Bql<T>() where T : IBqlUnary, new()
    {
      return context.Conditions.FromBql<T>();
    }

    BoundedTo<AppointmentEntry, FSAppointment>.Workflow.IConfigured SimpleAppointmentFlow(
      BoundedTo<AppointmentEntry, FSAppointment>.Workflow.INeedStatesFlow flow)
    {
      return (BoundedTo<AppointmentEntry, FSAppointment>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IContainerFillerStates>) (flowStates =>
      {
        flowStates.Add("_", (Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (fs => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) fs.IsInitial((Expression<Func<AppointmentEntry, PXAutoAction<FSAppointment>>>) (g => g.initializeState))));
        flowStates.Add<ListField.AppointmentStatus.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.putOnHold), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.cancelAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnRequiredServiceContractPeriodCleared));
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged));
        }))));
        flowStates.Add<ListField.AppointmentStatus.hold>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.releaseFromHold), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.cancelAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged))))));
        flowStates.Add<ListField.AppointmentStatus.awaiting>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.cancelAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null)))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnServiceContractCleared));
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnServiceContractPeriodAssigned));
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged));
        }))));
        flowStates.Add<ListField.AppointmentStatus.inProcess>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.pauseAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.reopenAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged))))));
        flowStates.Add<ListField.AppointmentStatus.paused>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.resumeAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged))))));
        flowStates.Add<ListField.AppointmentStatus.completed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.startTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.completeTravel), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.closeAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.invoiceAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.editAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) null);
          actions.Add<AppointmentEntry.AppointmentQuickProcess>((Expression<Func<AppointmentEntry.AppointmentQuickProcess, PXAction<FSAppointment>>>) (g => g.quickProcess), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
        }))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentPosted));
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged));
        }))));
        flowStates.Add<ListField.AppointmentStatus.closed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.uncloseAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.invoiceAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add<AppointmentEntry.AppointmentQuickProcess>((Expression<Func<AppointmentEntry.AppointmentQuickProcess, PXAction<FSAppointment>>>) (g => g.quickProcess), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
        }))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentPosted));
          handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged));
        }))).WithFieldStates(new Action<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IContainerFillerFields>(DisableWholeScreen))));
        flowStates.Add<ListField.AppointmentStatus.billed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentUnposted))))).WithFieldStates(new Action<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IContainerFillerFields>(DisableWholeScreen))));
        flowStates.Add<ListField.AppointmentStatus.canceled>((Func<BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig, BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<AppointmentEntry, FSAppointment>.BaseFlowStep.IConfigured) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<AppointmentEntry, FSAppointment>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.reopenAppointment), (Func<BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IAllowOptionalConfig, BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured>) (a => (BoundedTo<AppointmentEntry, FSAppointment>.ActionState.IConfigured) a.IsDuplicatedInToolbar()))))).WithEventHandlers((Action<BoundedTo<AppointmentEntry, FSAppointment>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<AppointmentEntry, PXWorkflowEventHandler<FSAppointment>>>) (g => g.OnAppointmentStatusChanged))))).WithFieldStates(new Action<BoundedTo<AppointmentEntry, FSAppointment>.FieldState.IContainerFillerFields>(DisableWholeScreen))));
      })).WithTransitions((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.hold>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.initializeState)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsOnHold).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)))))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.notStarted>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.initializeState)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsNotOnHold).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)))))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.notStarted>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.hold>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.putOnHold))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.inProcess>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsStarting).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.inProcess>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.startActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.canceled>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsCancelling).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.cancelActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.canceled>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.awaiting>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnRequiredServiceContractPeriodCleared)).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.awaiting>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)))))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.hold>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.notStarted>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.releaseFromHold))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.canceled>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsCancelling).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.cancelActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.hold>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.canceled>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.awaiting>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.canceled>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsCancelling).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.cancelActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.awaiting>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.canceled>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.notStarted>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnServiceContractCleared)).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.awaiting>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)))))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.notStarted>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnServiceContractPeriodAssigned)).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.awaiting>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)))))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.inProcess>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.notStarted>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsReopening).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.reopenActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.inProcess>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.paused>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsPausing).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.pauseActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.inProcess>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.paused>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.completed>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsCompleting).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.completeActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.reloadServiceOrderRelated>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
            fas.Add<FSAppointment.inProcess>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.completed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.paused>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.inProcess>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsResuming).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.resumeActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.paused>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.inProcess>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.completed>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsCompleting).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.reloadServiceOrderRelated>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
            fas.Add<FSAppointment.completeActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.paused>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.completed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.completed>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.closed>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsClosing).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.reloadServiceOrderRelated>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
            fas.Add<FSAppointment.closeActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.closed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.billed>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentPosted)).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.closed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
            fas.Add<FSAppointment.billed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.inProcess>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXAction<FSAppointment>>>) (g => g.editAppointment)).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.completed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.inProcess>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
            fas.Add<FSAppointment.editActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
          }))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.closed>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.completed>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsUnclosing).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.UserConfirmedUnclosing).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
          {
            fas.Add<FSAppointment.closed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
            fas.Add<FSAppointment.reloadServiceOrderRelated>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
            fas.Add<FSAppointment.unCloseActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
          }))));
          ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.billed>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentPosted)).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.billed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)))))));
        }));
        transitions.AddGroupFrom<ListField.AppointmentStatus.billed>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.closed>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentUnposted)).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas => fas.Add<FSAppointment.billed>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)))))))));
        transitions.AddGroupFrom<ListField.AppointmentStatus.canceled>((Action<BoundedTo<AppointmentEntry, FSAppointment>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<AppointmentEntry, FSAppointment>.Transition.INeedTarget, BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured>) (t => (BoundedTo<AppointmentEntry, FSAppointment>.Transition.IConfigured) t.To<ListField.AppointmentStatus.notStarted>().IsTriggeredOn((Expression<Func<AppointmentEntry, PXWorkflowEventHandlerBase<FSAppointment>>>) (g => g.OnAppointmentStatusChanged)).When((BoundedTo<AppointmentEntry, FSAppointment>.ISharedCondition) conditions.IsReopening).WithFieldAssignments((Action<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IContainerFillerFields>) (fas =>
        {
          fas.Add<FSAppointment.skipExternalTaxCalculation>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
          fas.Add<FSAppointment.reopenActionRunning>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
          fas.Add<FSAppointment.canceled>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) false)));
          fas.Add<FSAppointment.notStarted>((Func<BoundedTo<AppointmentEntry, FSAppointment>.Assignment.INeedRightOperand, BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured>) (f => (BoundedTo<AppointmentEntry, FSAppointment>.Assignment.IConfigured) f.SetFromValue((object) true)));
        }))))));
      }));
    }
  }
}
