// Decompiled with JetBrains decompiler
// Type: PX.Data.DacDescriptorUtils
// Assembly: PX.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A82D21C-DAFC-4371-ACE9-BAD417AC5A62
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Data.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Data.xml

using PX.Common;
using PX.Data.DacDescriptorGeneration;
using System;

#nullable enable
namespace PX.Data;

/// <summary>A helper to simplify the work with DAC descriptors.</summary>
public static class DacDescriptorUtils
{
  /// <summary>
  /// Add a DAC descriptor <paramref name="dacDescriptor" /> to the <paramref name="exception" />'s <see cref="P:System.Exception.Data" /> collection
  /// to pass DAC descriptor with <paramref name="exception" /> to Trace.<br />
  /// If there is a DAC descriptor already attached to the <paramref name="exception" />, then the <paramref name="exception" /> will not be modified.
  /// </summary>
  /// <typeparam name="TException">Type of the exception.</typeparam>
  /// <param name="exception">The exception to act on.</param>
  /// <param name="dacDescriptor">DAC descriptor.</param>
  /// <returns>
  /// Exception with DAC descriptor in <see cref="P:System.Exception.Data" />.
  /// </returns>
  /// <remarks>
  /// This helper is used in order to attach DAC descriptors to exceptions that come from .Net Framework libraries like <see cref="T:System.InvalidOperationException" />.<br />
  /// It is not possible to modify the code of such exceptions to add DAC descriptors to them.<br />
  /// For Acumatica exceptions which code you can change, you should implement <see cref="T:PX.Data.DacDescriptorGeneration.IExceptionWithDescriptor" /> interface instead of using this method.
  /// </remarks>
  public static TException AddDacDescriptor<TException>(
    this TException exception,
    DacDescriptor? dacDescriptor)
    where TException : Exception
  {
    ExceptionExtensions.ThrowOnNull<TException>(exception, nameof (exception), (string) null);
    if (!dacDescriptor.HasValue || !dacDescriptor.Value.IsNonTrivial || exception.Data.IsReadOnly || exception.Data.Count != 0 && exception.Data.Contains((object) "DacDescriptorInExceptionData"))
      return exception;
    exception.Data.Add((object) "DacDescriptorInExceptionData", (object) dacDescriptor.Value);
    return exception;
  }

  /// <summary>
  /// Get a DAC descriptor attached to the <paramref name="exception" />, if there is one.
  /// </summary>
  /// <param name="exception">The exception to act on.</param>
  /// <returns>
  /// The DAC descriptor attached to the <paramref name="exception" /> or <see langword="null" />.
  /// </returns>
  /// <remarks>
  /// This helper first checks whether the <paramref name="exception" /> implements the <see cref="T:PX.Data.DacDescriptorGeneration.IExceptionWithDescriptor" /> interface and,
  /// if that is the case, obtains the DAC descriptor from the <see cref="T:PX.Data.DacDescriptorGeneration.IExceptionWithDescriptor" /> interface.<br />
  /// If <paramref name="exception" /> does not implement the <see cref="T:PX.Data.DacDescriptorGeneration.IExceptionWithDescriptor" /> interface, then the helper will try to get the descriptor
  /// from the <see cref="P:System.Exception.Data" /> collection.
  /// </remarks>
  public static DacDescriptor? GetAttachedDacDescriptor(this Exception exception)
  {
    ExceptionExtensions.ThrowOnNull<Exception>(exception, nameof (exception), (string) null);
    DacDescriptor? attachedDacDescriptor = exception is IExceptionWithDescriptor exceptionWithDescriptor ? exceptionWithDescriptor.DacDescriptor : new DacDescriptor?();
    if (attachedDacDescriptor.HasValue && attachedDacDescriptor.Value.IsNonTrivial || exception.Data.Count <= 0 || !exception.Data.Contains((object) "DacDescriptorInExceptionData"))
      return attachedDacDescriptor;
    attachedDacDescriptor = exception.Data[(object) "DacDescriptorInExceptionData"] as DacDescriptor?;
    return attachedDacDescriptor;
  }

  /// <summary>
  /// Get DAC descriptor text for <see cref="!:row" /> or default value provided by the <paramref name="defaultValueFactory" />
  /// if <see cref="!:row" /> is <see langword="null" /> or has trivial empty descriptor.
  /// </summary>
  /// <param name="cache">The <see cref="T:PX.Data.PXCache" /> to act on.</param>
  /// <param name="row">
  /// The weekly typed object that can be either <see cref="T:PX.Data.IBqlTable" /> DAC or <see cref="T:PX.Data.PXResult" />.
  /// For other types the value generated by <paramref name="defaultValueFactory" /> is returned.
  /// </param>
  /// <param name="defaultValueFactory">The default value factory.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation. If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.</param>
  /// <returns>
  /// The DAC descriptor text or default value provided by the <paramref name="defaultValueFactory" />.
  /// </returns>
  public static string GetDacDescriptorText(
    this PXCache cache,
    object? row,
    Func<PXCache, object?, string> defaultValueFactory,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    ExceptionExtensions.ThrowOnNull<PXCache>(cache, nameof (cache), (string) null);
    IBqlTable bqlTable1;
    switch (row)
    {
      case IBqlTable bqlTable2:
        bqlTable1 = bqlTable2;
        break;
      case PXResult pxResult:
        if (pxResult.Items.Length != 0)
        {
          bqlTable1 = pxResult.Items[0] as IBqlTable;
          break;
        }
        goto default;
      default:
        bqlTable1 = (IBqlTable) null;
        break;
    }
    IBqlTable dac = bqlTable1;
    if (dac == null)
      return (defaultValueFactory != null ? defaultValueFactory(cache, row) : (string) null) ?? string.Empty;
    DacDescriptor? emptyDacDescriptor = DacDescriptorUtils.GetNonEmptyDacDescriptor(cache.Graph, dac, dacDescriptorCreationOptions);
    ref DacDescriptor? local = ref emptyDacDescriptor;
    return (local.HasValue ? local.GetValueOrDefault().Value : (string) null) ?? (defaultValueFactory != null ? defaultValueFactory(cache, (object) dac) : (string) null) ?? string.Empty;
  }

  /// <summary>
  /// Get DAC descriptor text for <see cref="!:row" /> or default value <paramref name="defaultValue" />
  /// if <see cref="!:row" /> is <see langword="null" /> or has trivial empty descriptor.
  /// </summary>
  /// <param name="cache">The <see cref="T:PX.Data.PXCache" /> to act on.</param>
  /// <param name="row">
  /// The weekly typed object that can be either <see cref="T:PX.Data.IBqlTable" /> DAC or <see cref="T:PX.Data.PXResult" />.
  /// For other types <paramref name="defaultValue" /> is returned.
  /// </param>
  /// <param name="defaultValue">(Optional) The default value.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The DAC descriptor text or default value <paramref name="defaultValue" />.
  /// </returns>
  public static string GetDacDescriptorText(
    this PXCache cache,
    object? row,
    string? defaultValue = null,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    return cache?.Graph.GetDacDescriptorText(row, defaultValue, dacDescriptorCreationOptions);
  }

  /// <summary>
  /// Get DAC descriptor text for <see cref="!:result" /> or default value <paramref name="defaultValue" />
  /// if <see cref="!:result" /> is <see langword="null" /> or has trivial empty descriptor.
  /// </summary>
  /// <param name="cache">The <see cref="T:PX.Data.PXCache" /> to act on.</param>
  /// <param name="result">The non empty <see cref="T:PX.Data.PXResult" />. The first item of <paramref name="result" /> will be used for descriptor.</param>
  /// <param name="defaultValue">(Optional) The default value.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The DAC descriptor text or default value <paramref name="defaultValue" />.
  /// </returns>
  public static string GetDacDescriptorText(
    this PXCache cache,
    PXResult? result,
    string? defaultValue = null,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    return DacDescriptorUtils.GetDacDescriptorText(cache?.Graph, result, defaultValue, dacDescriptorCreationOptions);
  }

  /// <summary>
  /// Get DAC descriptor text for <see cref="!:dac" /> or default value <paramref name="defaultValue" />
  /// if <see cref="!:dac" /> is <see langword="null" /> or has trivial empty descriptor.
  /// </summary>
  /// <param name="cache">The <see cref="T:PX.Data.PXCache" /> to act on.</param>
  /// <param name="dac">The DAC to use for the DAC descriptor generation.</param>
  /// <param name="defaultValue">(Optional) The default value.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation. If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The DAC descriptor text or default value <paramref name="defaultValue" />.
  /// </returns>
  public static string GetDacDescriptorText(
    this PXCache cache,
    IBqlTable? dac,
    string? defaultValue = null,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    return DacDescriptorUtils.GetDacDescriptorText(cache?.Graph, dac, defaultValue, dacDescriptorCreationOptions);
  }

  /// <summary>
  /// Get DAC descriptor text for <see cref="!:row" /> or default value <paramref name="defaultValue" />
  /// if <see cref="!:row" /> is <see langword="null" /> or has trivial empty descriptor.
  /// </summary>
  /// <param name="graph">The <see cref="T:PX.Data.PXGraph" /> to act on.</param>
  /// <param name="row">
  /// The weekly typed object that can be either <see cref="T:PX.Data.IBqlTable" /> DAC or <see cref="T:PX.Data.PXResult" />.
  /// For other types <paramref name="defaultValue" /> is returned.
  /// </param>
  /// <param name="defaultValue">(Optional) The default value.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation. If <see langword="null" />,
  /// then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The DAC descriptor text or default value <paramref name="defaultValue" />.
  /// </returns>
  public static string GetDacDescriptorText(
    this PXGraph graph,
    object? row,
    string? defaultValue = null,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    DacDescriptor? emptyDacDescriptor = graph.GetNonEmptyDacDescriptor(row, dacDescriptorCreationOptions);
    ref DacDescriptor? local = ref emptyDacDescriptor;
    return (local.HasValue ? local.GetValueOrDefault().Value : (string) null) ?? defaultValue ?? string.Empty;
  }

  /// <summary>
  /// Get DAC descriptor text for <see cref="!:result" /> or default value <paramref name="defaultValue" />
  /// if <see cref="!:result" /> is <see langword="null" /> or has trivial empty descriptor.
  /// </summary>
  /// <param name="graph">The <see cref="T:PX.Data.PXGraph" /> to act on.</param>
  /// <param name="result">The non empty <see cref="T:PX.Data.PXResult" />. The first item of <paramref name="result" /> will be used for descriptor.</param>
  /// <param name="defaultValue">(Optional) The default value.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation. If <see langword="null" />,
  /// then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The DAC descriptor text or default value <paramref name="defaultValue" />.
  /// </returns>
  public static string GetDacDescriptorText(
    this PXGraph graph,
    PXResult? result,
    string? defaultValue = null,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    DacDescriptor? emptyDacDescriptor = DacDescriptorUtils.GetNonEmptyDacDescriptor(graph, result, dacDescriptorCreationOptions);
    ref DacDescriptor? local = ref emptyDacDescriptor;
    return (local.HasValue ? local.GetValueOrDefault().Value : (string) null) ?? defaultValue ?? string.Empty;
  }

  /// <summary>
  /// Get DAC descriptor text for <see cref="!:dac" /> or default value <paramref name="defaultValue" />
  /// if <see cref="!:dac" /> is <see langword="null" /> or has trivial empty descriptor.
  /// </summary>
  /// <param name="graph">The <see cref="T:PX.Data.PXGraph" /> to act on.</param>
  /// <param name="dac">The DAC to use for the DAC descriptor generation.</param>
  /// <param name="defaultValue">(Optional) The default value.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation. If <see langword="null" />,
  /// then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The DAC descriptor text or default value <paramref name="defaultValue" />.
  /// </returns>
  public static string GetDacDescriptorText(
    this PXGraph graph,
    IBqlTable? dac,
    string? defaultValue = null,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    DacDescriptor? emptyDacDescriptor = DacDescriptorUtils.GetNonEmptyDacDescriptor(graph, dac, dacDescriptorCreationOptions);
    ref DacDescriptor? local = ref emptyDacDescriptor;
    return (local.HasValue ? local.GetValueOrDefault().Value : (string) null) ?? defaultValue ?? string.Empty;
  }

  /// <summary>
  /// Get non empty DAC descriptor for <see cref="!:row" /> or <see langword="null" />.
  /// </summary>
  /// <param name="cache">The <see cref="T:PX.Data.PXCache" /> to act on.</param>
  /// <param name="row">
  /// The weekly typed object that can be either <see cref="T:PX.Data.IBqlTable" /> DAC or <see cref="T:PX.Data.PXResult" />.
  /// For other types <see langword="null" /> is returned.
  /// </param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The non empty DAC descriptor or <see langword="null" />.
  /// </returns>
  public static DacDescriptor? GetNonEmptyDacDescriptor(
    this PXCache cache,
    object? row,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    return ExceptionExtensions.CheckIfNull<PXCache>(cache, nameof (cache), (string) null).Graph.GetNonEmptyDacDescriptor(row, dacDescriptorCreationOptions);
  }

  /// <summary>
  /// Get non empty DAC descriptor for <see cref="!:dac" /> or <see langword="null" />.
  /// </summary>
  /// <param name="cache">The <see cref="T:PX.Data.PXCache" /> to act on.</param>
  /// <param name="dac">The DAC to use for the DAC descriptor generation.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.</param>
  /// <returns>
  /// The non empty DAC descriptor or <see langword="null" />.
  /// </returns>
  public static DacDescriptor? GetNonEmptyDacDescriptor(
    this PXCache cache,
    IBqlTable? row,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    return DacDescriptorUtils.GetNonEmptyDacDescriptor(ExceptionExtensions.CheckIfNull<PXCache>(cache, nameof (cache), (string) null).Graph, row, dacDescriptorCreationOptions);
  }

  /// <summary>
  /// Get non empty DAC descriptor for <see cref="!:result" /> or <see langword="null" />.
  /// </summary>
  /// <param name="cache">The <see cref="T:PX.Data.PXCache" /> to act on.</param>
  /// <param name="result">The non empty <see cref="T:PX.Data.PXResult" />. The first item of <paramref name="result" /> will be used for descriptor.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The non empty DAC descriptor or <see langword="null" />.
  /// </returns>
  public static DacDescriptor? GetNonEmptyDacDescriptor(
    this PXCache cache,
    PXResult? result,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    return DacDescriptorUtils.GetNonEmptyDacDescriptor(ExceptionExtensions.CheckIfNull<PXCache>(cache, nameof (cache), (string) null).Graph, result, dacDescriptorCreationOptions);
  }

  /// <summary>
  /// Get non empty DAC descriptor for <see cref="!:row" /> or <see langword="null" />.
  /// </summary>
  /// <param name="graph">The <see cref="T:PX.Data.PXGraph" /> to act on.</param>
  /// <param name="row">
  /// The weekly typed object that can be either <see cref="T:PX.Data.IBqlTable" /> DAC or <see cref="T:PX.Data.PXResult" />.
  /// For other types <see langword="null" /> is returned.
  /// </param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The non empty DAC descriptor or <see langword="null" />.
  /// </returns>
  public static DacDescriptor? GetNonEmptyDacDescriptor(
    this PXGraph graph,
    object? row,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    DacDescriptor? emptyDacDescriptor;
    switch (row)
    {
      case IBqlTable dac:
        emptyDacDescriptor = DacDescriptorUtils.GetNonEmptyDacDescriptor(graph, dac, dacDescriptorCreationOptions);
        break;
      case PXResult result:
        emptyDacDescriptor = DacDescriptorUtils.GetNonEmptyDacDescriptor(graph, result, dacDescriptorCreationOptions);
        break;
      default:
        emptyDacDescriptor = new DacDescriptor?();
        break;
    }
    return emptyDacDescriptor;
  }

  /// <summary>
  /// Get non empty DAC descriptor for <see cref="!:result" /> or <see langword="null" />.
  /// </summary>
  /// <param name="graph">The <see cref="T:PX.Data.PXGraph" /> to act on.</param>
  /// <param name="result">The non empty <see cref="T:PX.Data.PXResult" />. The first item of <paramref name="result" /> will be used for descriptor.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.
  /// </param>
  /// <returns>
  /// The non empty DAC descriptor or <see langword="null" />.
  /// </returns>
  public static DacDescriptor? GetNonEmptyDacDescriptor(
    this PXGraph graph,
    PXResult? result,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    return result == null || result.Items.Length == 0 ? new DacDescriptor?() : DacDescriptorUtils.GetNonEmptyDacDescriptor(graph, result.Items[0] as IBqlTable, dacDescriptorCreationOptions);
  }

  /// <summary>
  /// Get non empty DAC descriptor for <see cref="!:dac" /> or <see langword="null" />.
  /// </summary>
  /// <param name="graph">The <see cref="T:PX.Data.PXGraph" /> to act on.</param>
  /// <param name="dac">The DAC to use for the DAC descriptor generation.</param>
  /// <param name="dacDescriptorCreationOptions">
  /// (Optional) Custom options for controlling the DAC descriptor creation.
  /// If <see langword="null" />, then <see cref="P:PX.Data.DacDescriptorGeneration.DacDescriptorCreationOptions.Default" /> is used.</param>
  /// <returns>
  /// The non empty DAC descriptor or <see langword="null" />.
  /// </returns>
  public static DacDescriptor? GetNonEmptyDacDescriptor(
    this PXGraph graph,
    IBqlTable? dac,
    DacDescriptorCreationOptions? dacDescriptorCreationOptions = null)
  {
    ExceptionExtensions.ThrowOnNull<PXGraph>(graph, nameof (graph), (string) null);
    if (dac == null)
      return new DacDescriptor?();
    DacDescriptor dacDescriptor = graph.GetDacDescriptor(dac, dacDescriptorCreationOptions);
    return !dacDescriptor.IsNonTrivial ? new DacDescriptor?() : new DacDescriptor?(dacDescriptor);
  }
}
