// Decompiled with JetBrains decompiler
// Type: PX.Data.ErrorMessages
// Assembly: PX.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A82D21C-DAFC-4371-ACE9-BAD417AC5A62
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Data.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Data.xml

using PX.Common;
using System;

#nullable disable
namespace PX.Data;

/// <summary>
/// Contains strings for exceptions that can be thrown in Acumatica Platform.
/// These strings are automatically collected during the localization process
/// and can be translated to desired languages.
/// </summary>
[PXLocalizable("Error")]
public static class ErrorMessages
{
  public const string BusinessDate = "Business Date";
  public const string NotCurrentOrOptionalParameter = "Only the Current and Optional parameters are allowed.";
  public const string CantCreateForeignKeyReference = "A foreign key reference cannot be created from the type '{0}'.";
  public const string FieldIsEmpty = "'{0}' cannot be empty.";
  public const string CantSetDescriptionField = "The Description field cannot be set from type '{0}'.";
  public const string CantSetFilterEntity = "The Filter Entity cannot be set from type '{0}'.";
  public const string CantSubstituteKey = "Cannot substitute key from type '{0}'";
  public const string HeadersNotMeetColList = "The headers don't match the column list.";
  public const string InvalidSelectorColumn = "An invalid selector column has been provided.";
  public const string ElementDoesntExist = "'{0}' cannot be found in the system.";
  public const string PXParentAllowsOnlyBQLSelections = "PXParentAttribute accepts BQL selections only.";
  public const string PXParentUnparametrizedBQLSelect = "The condition inside a BQL select for PXParentAttribute declared on {0} must be parametrized.";
  public const string PXParentBQLSelectUsesBqlFieldsFromTheBaseType = "A BQL select for PXParentAttribute declared on {0} references BQL fields that are declared in the base type instead of the current one. They must be redeclared as 'new' to infer the table alias correctly. The BQL fields in question: {1}.";
  public const string PXParentBQLSelectContainsUnrelatedTables = "A BQL select for PXParentAttribute declared on {0} references DACs that are neither child nor parent. Such scenario is only allowed in the 'additionalCondition' constructor argument in exceptional cases. The DACs in question: {1}.";
  public const string UnconditionalUniqueParent = "Multiple PXParentAttribute attributes are found for '{0}'.";
  public const string RecordRaisedErrors = "{0} '{1}' record raised at least one error. Please review the errors.";
  public const string NotEnoughRights = "You don't have enough rights on '{0}'.";
  public const string IncorrectValueArrayLength = "The length of the values array is not equal to the length of labels array.";
  public const string IncorrectLabelArrayLength = "The length of the labels array is less than the values count.";
  public const string CantCreateFormula = "The formula '{0}' cannot be created.";
  public const string CantGetParentField = "The parent field '{0}' cannot be obtained.";
  public const string CantFindAggregateType = "The aggregate type {0} cannot be found.";
  public const string InvalidField = "Invalid field: '{0}'";
  public const string DimensionDontExist = "Dimension '{0}' does not exist in the system.";
  public const string ElementOfFieldDoesntExist = "'{0}' of '{1}' does not exist in the system.";
  public const string ElementsOfFieldsDontExist = "{0} of {1} do not exist in the system.";
  public const string CantRestoreValueFromByteArray = "The value cannot be restored from a byte array.";
  public const string CantConvertValueToByteArray = "The value cannot be converted to a byte array.";
  public const string PhoneValidationFieldNotValid = "The specified phone validation field is not valid.";
  public const string CountryIdWithSelectorNotFound = "The Country ID field with a selector is not found.";
  public const string ZipValidationFieldNotValid = "The specified Postal Code validation field is not valid.";
  public const string ZipMaskFieldNotValid = "The specified Postal Code Mask field is not valid.";
  public const string CountryIdFieldNotValid = "The specified Country ID field is not valid.";
  public const string CountryIdFieldNonReassignable = "The Country ID field is already assigned and cannot be changed.";
  public const string StringDoesntMatchInputMask = "The entered string '{0}' does not match the required input mask '{1}'.";
  public const string ValueDoesntMatchInputMask = "The provided value '{0}' does not match the required input mask '{1}'.";
  public const string ZipCodeDoesntMatch = "The entered code doesn't match the required expression.";
  public const string CountryIdFieldNotFound = "No ID field has been found.";
  public const string BaseAttributeStateOverride = "An attempt to override the base attribute state has been detected.";
  public const string ArgumentException = "An invalid argument has been specified.";
  public const string ArgumentNullException = "The argument cannot be null.";
  public const string ArgumentOutOfRangeException = "The argument is out of range.";
  public const string TableDoesNotExist = "The table with the name '{0}' does not exist in the database.";
  public const string InvalidOperationException = "The requested operation cannot be performed.";
  public const string NotSupportedException = "The operation is not supported.";
  public const string ObjectDisposedException = "The object is disposed.";
  public const string EmptyConnectionString = "The connection string cannot be empty.";
  public const string PXAccessProviderNotImplemented = "The provider '{0}' must implement the PXAccessProvider type.";
  public const string DefaultAccessProviderNotSpecified = "A default access provider is not specified.";
  public const string PasswordFormatNotSupported = "The password format is not supported.";
  public const string PasswordChangeValidationFailure = "The password change has been canceled because of a new password validation failure.";
  public const string PasswordResetValidationFailure = "The password reset has been canceled because of a password validation failure.";
  public const string UserIsLockedOut = "The supplied user is locked out.";
  public const string UserNotFound = "The supplied username has not been found.";
  public const string IncorrectPasswordAnswer = "Incorrect password answer";
  public const string PasswordMissmatch = "Incorrect old password";
  public const string IncorrectPassword = "Incorrect password";
  public const string PasswordLenght = "The password length must be at least {0} characters.";
  public const string PasswordComplexity = "The password is not complex.~~Passwords must contain characters from three of the following four categories:~English uppercase characters (A through Z)~English lowercase characters (a through z)~Base 10 digits (0 through 9)~Non-alphabetic characters (such as !, $, #, %)";
  public const string PasswordResetNotEnabled = "Password reset is not enabled.";
  public const string PasswordRequiredToResetPassword = "A password answer is required for password reset.";
  public const string UserNotFoundPasswordNotReset = "The user has not been found or is locked out. The password has not been reset.";
  /// <exclude />
  public const string HttpContextNotFound = "The system cannot validate the user IP address because the HTTP request is not present.";
  /// <exclude />
  public const string UnableToParseIPAddress = "The system cannot parse the user IP address from '{0}'.";
  public const string CantLockOutUser = "The user cannot be locked out.";
  public const string CantUpdateFailureCount = "The failure count cannot be updated.";
  public const string HashPasswordDecode = "Hashed passwords can't be decoded.";
  public const string RoleNotFound = "The role name is not found.";
  public const string CommasInUserName = "Usernames cannot contain commas.";
  public const string UserAlreadyInRole = "The user already belongs to the role.";
  public const string CommasInRoleName = "Role names cannot contain commas.";
  public const string RoleAlreadyExists = "The role name already exists.";
  public const string CantDeletePopulatedRole = "A populated role cannot be deleted.";
  public const string UserNotInRole = "The user does not belong to a role.";
  public const string OperandNotClassFieldAndNotIBqlCreator = "'{0}' either has to be a class field or has to expose the IBqlCreator interface.";
  public const string OperandNotClassFieldAndNotIBqlParameter = "'{0}' either has to be a class field or has to expose the IBqlParameter interface.";
  public const string FirstTypeNotBqlCommand = "The first type has to be convertible to the Bqlcommand type.";
  public const string InvalidParameterLength = "The parameter length exceeds the allowed value.";
  public const string InvalidJoinCriteria = "Invalid Join criteria have been detected.";
  public const string CollectionChanged = "The collection has been changed.";
  public const string CantStartEnumeration = "Enumeration cannot be started.";
  public const string DuplicateEntryAdded = "An attempt was made to add a duplicate entry.";
  public const string EmailFieldWrongTranformationRule = "The selected transformation rule may cause inaccurate results of deduplication if most common email domains, such as gmail.com or outlook.com, are used in email addresses.";
  public const string SplitWordCanUseOnlyWithAllowOptionWarning = "The Split Word transformation rule can only be used with the Allow option in the Create on Entry column.";
  public const string CapacityOverflow = "Capacity overflow";
  public const string RecordUpdatedByAnotherProcess = "Another process has updated the '{0}' record. Your changes will be lost.";
  public const string RecordDeletedByAnotherProcess = "Another process has deleted the '{0}' record. Your changes will be lost.";
  public const string CannotUpdateDeletedDatabaseRecord = "Cannot update the record. The record {0} ({1}) has been marked as deleted. Your changes will be lost.";
  public const string CannotInsertDeletedDatabaseRecord = "Cannot insert the record. The record {0} ({1}) has been marked as deleted. {2}";
  public const string CannotDeleteDeletedDatabaseRecord = "Cannot delete the record. The record {0} ({1}) has been already deleted. Your changes will be lost.";
  public const string DelegateArgsDontMeetSelectionCommandPars = "Delegate arguments do not meet the selection command parameters.";
  public const string InvalidDelegate = "An invalid delegate is supplied.";
  public const string CantRequestDialog = "A dialog cannot be requested.";
  public const string DefaultDbProviderNotSpecified = "The default database provider is not specified.";
  public const string CantInstantiateProvider = "The provider cannot be instantiated.";
  public const string PXDatabaseProviderNotImplemented = "The provider must implement the PXDatabaseProvider type.";
  public const string PXTraceProviderNotImplemented = "The provider must implement the PXTraceProvider type.";
  public const string ParsNotSupportedForOdbc = "{0} parameters are not supported for ODBC data sources.";
  public const string WrongSelectPassedToButton = "A wrong SELECT has been passed to the button.";
  public const string CantSaveRecord = "The record cannot be saved.";
  public const string ViewDoesntExist = "The view {0} doesn't exist.";
  public const string PXSelectorAttributeIsMissing = "Cannot create the {0} control.\nThe PXSelector attribute is missing for the {1} field.";
  public const string UpperLevelRightsNotDefined = "Explicitly define upper-level rights first.";
  public const string InvalidEntityType = "An invalid entity type has been specified.";
  public const string PreviousOperationNotCompleted = "The previous operation has not been completed yet.";
  public const string CantDeleteRecord = "The record cannot be deleted.";
  public const string CantInsertRecord = "The record cannot be inserted.";
  public const string CantUpdateRecord = "The record cannot be updated.";
  public const string CantCreateCache = "A cache instance cannot be created for the type {0}.";
  public const string ErrorFieldProcessing = "An error occurred during processing of the field {0}: {1}.";
  public const string ErrorFieldValueProcessing = "An error occurred during processing of the field {0} value {1} {2}.";
  public const string ImportFieldProcessingError = "An error occurred during processing of the field {0}.";
  public const string NulledFieldProcessingError = "Field: {0}, Error: {1}";
  public const string ValuedFieldProcessingError = "Field: {0}, Value: {2}, Error: {1}";
  public const string NulledFieldProcessingWarning = "Field: {0}, Warning: {1}";
  public const string ValuedFieldProcessingWarning = "Field: {0}, Value: {2}, Warning: {1}";
  public const string LoginAlreadyExists = "The entered login already exists.";
  public const string PasswordNotConfirmed = "The entered password doesn't match the confirmation.";
  public const string CantLockOutYourself = "You cannot lock yourself out.";
  public const string CantDisableYourself = "You cannot disable your own user account.";
  public const string CantAutoNumber = "An identifier could not be assigned automatically because no applicable subsequence was found for the current branch and business date in the {0} numbering sequence.";
  public const string WarningNumReached = "The warning number has been reached.";
  public const string EndOfNumberingReached = "The end of numbering has been reached.";
  public const string NameCantBeEmpty = "The name cannot be empty.";
  public const string Prefix = "Error";
  public const string Warning = "Warning";
  public const string LoginUserLockedOut = "Your account is locked out. Please contact your system administrator.";
  public const string LoginUserDisabled = "Your account is disabled. Please contact your system administrator.";
  public const string LoginUserPending = "Your account is not activated yet. Please contact your system administrator.";
  public const string LoginGuestOnInternal = "Your account does not have access to the Acumatica ERP. Please contact your system administrator.";
  public const string LoginUserPortalFeature = "Your account does not have access to the Portal. Contact your system administrator.";
  public const string LoginUserPortalNotAuthorized = "Your account is not authorized to access this portal. Contact your system administrator.";
  public const string LoginInvalidCredentials = "Invalid credentials. Please try again.";
  public const string LoginForceChangePassword = "You need to change your password. Sign in by using your browser to set a new password. ";
  public const string LoginOTPInvalid = "Incorrect code. Please try again.";
  public const string LoginInvalidUsername = "Invalid user name. Please try again.";
  public const string LoginFailed = "Login failed.";
  public const string CantSignInTwoFactorDisabled = "The system is configured for two-factor authentication but the required advanced authentication license could not be located. Contact your administrator to review the authentication licensing or configuration.";
  public const string ErrorDuringTwoFactorSending = "The following error occurred when sending the multifactor notification: {0}.";
  public const string CantSignInWithExternalFeatureDisabled = "You cannot sign in using an external provider because the {0} feature is disabled on the Enable/Disable Features (CS100000) form.";
  public const string InvalidIPAddress = "Invalid IP address";
  public const string PasswordRegexMessage = "An alert message can't be empty when a mask is filled.";
  public const string ElementDoesntExistOrNoRights = "'{0}' cannot be found in the system. Please verify whether you have proper access rights to this object.";
  public const string ValueDoesntExist = "{0} '{1}' cannot be found in the system.";
  public const string ValueDoesntExistOrNoRights = "{0} '{1}' cannot be found in the system. Please verify whether you have proper access rights to this object.";
  public const string NoAccessRightsForProject = "The {0} employee has no access to the {1} project. To provide access, add the employee to the list of project employees on the Employees tab of the Projects (PM301000) form.";
  public const string SelectFile = "Please select a file.";
  public const string FileAlreadyCheckedOut = "This file is already checked out by '{0}'.";
  public const string FileCheckedOutUploadFailed = "A new revision cannot be uploaded because the file is checked out by another user.";
  public const string FileCheckedOutByUndoFailed = "This file is checked out by '{0}'. You cannot undo this operation.";
  public const string FileExtensionNotMatching = "The file you are trying to upload has an extension that differs from the extension that is stored in the database.";
  public const string FileAttachAccessDenied = "The file '{0}' is not found, or access to the file is denied.";
  public const string FileNotFound = "The file is not found, or you don't have enough rights to see the file.";
  public const string FileDoesntHaveContent = "The content of the file is not found, or you don't have enough rights to see the content.";
  public const string FileAlredyExists = "This file already exists.";
  public const string FileTooBig = "The file exceeds the maximum allowed size ({0} KB).";
  public const string FileZeroSize = "The {0} file cannot be uploaded because the file size is zero. Please make sure that the file is not corrupted and try again.";
  public const string PrevOperationNotCompleteYet = "The previous operation has not been completed yet.";
  public const string SeveralItemsFailed = "At least one item has not been processed.";
  public const string RecordExists = "The record already exists.";
  public const string AttributeNotDefined = "The attribute '{0}' cannot be found.";
  public const string RecordAddedByAnotherProcess = "Another process has added the '{0}' record. {1}";
  public const string RetrySavingRecord = "Please try again.";
  public const string ChangesWillBeLost = "Your changes will be lost.";
  public const string CantChangeDBCertificateDiff = "The encryption certificate cannot be changed. The pending certificate is the same as the current one.";
  public const string CantChangeDBCertificate = "The encryption certificate cannot be changed. The previous certificate changes have not been completed.";
  public const string CertificateNotFound = "An encryption certificate cannot be created. Make sure that the certificate has been uploaded to the site.";
  public const string CertificateWithoutKey = "An encryption certificate cannot be created. There is no private key.";
  public const string CantCreateDBCertificate = "An encryption certificate cannot be created. Make sure that the certificate has been configured properly and the valid certificate file has been uploaded to the site.";
  public const string CantCheckCertificate = "Failed to get response from server when checking certificate . Request: {0} Details: {1}";
  public const string CertificateIsNotValid = "The current certificate is not valid.";
  public const string SetupNotEntered = "The required configuration data is not entered on the {0} form.";
  public const string SetupNotEnteredPrefix = "The requested resource is not available.";
  public const string InvalidTypeForPXSetupFromOptions = "The PXSetupFromOptions type accepts only database unbound DACs.";
  public const string ErrorHasOccurred = "Error Has Occurred";
  public const string ErrorNumber = "Error #{0}";
  public const string ShowTrace = "Show Trace";
  public const string NextStep = "Next step:";
  public const string NavTo = "Navigate to the";
  public const string NavToSuffix = " form and enter the required configuration data.";
  public const string CantUpdateUsedCertificate = "The certificate cannot be replaced. It is used in the site preferences.";
  public const string WikiNotEmpty = "The wiki cannot be deleted. It contains undeleted articles or the recycle bin is not empty.";
  public const string IncorrectValueResultedEmptyField = "An incorrect value in '{0}' resulted in the empty '{1}' field.";
  public const string BadEnumType = "Not enum type";
  public const string BadEnumField = "Bad enum field name";
  public const string FileRevisionUnchanged = "The file has not been changed since the last revision.";
  public const string GuestRoleError = "Only guest roles are allowed for a guest user.";
  public const string NoDatabaseConnection = "The system is unable to connect to the database. The following error code has been returned: {0}.";
  public const string NotEnoughRightsToMoveArticle = "You don't have enough rights to move this article.";
  public const string NotEnoughRightsToMoveFromFolder = "You don't have enough rights to move articles from the '{0}' folder.";
  public const string NotEnoughRightsToPaste = "You don't have enough rights to paste articles into this folder.";
  public const string CantMoveDeletedFolder = "You cannot move deleted items or modify the Deleted folder.";
  public const string CantPasteToDifferentType = "An article cannot be pasted into a wiki of different type.";
  public const string AccountHasNoEmail = "No email address is specified in your account.";
  public const string SYProviderColumnNotFound = "The column '{0}' is not found in the data set.";
  public const string LoginNotFound = "The login you specified is incorrect.";
  public const string NotificationIsNotFound = "The notification has not been found.";
  public const string PasswordRecoveryNotificationIsNotConfigured = "A notification for password recovery has not been configured.";
  public const string LoginRecoveryNotificationIsNotConfigured = "A notification for login recovery has not been configured.";
  public const string PasswordRecoveryNotificationNotFound = "A notification for password recovery has not been found.";
  public const string PasswordRecoveryLinkExpired = "The Reset Password link has expired. Please reset your password again to have a new link sent to you.";
  public const string LoginRecoveryNotificationNotFound = "A notification for login recovery has not been found.";
  public const string NotEnoughRightsToCheckOut = "You don't have enough rights to check out this file.";
  public const string NotEnoughRightsToUpload = "You don't have enough rights to upload new revisions of this file.";
  public const string NotEnoughRightsToView = "You don't have enough rights to download this file.";
  public const string NotInRestrictionGroup = "You are not in a group that has access to this file.";
  public const string EmailNotConfigured = "The email account is empty. Please define the Default Email Account in Email Preferences.";
  public const string CantUpdateDefaultExceptionExists = "You cannot delete the default translation because exceptional translations exist. If you want to delete all translations of this value, you must delete exceptional translations first.";
  public const string DefineDefaultValue = "Define a default value first.";
  public const string DeletedItemsCantBeDeleted = "The Deleted Items folder cannot be deleted.";
  public const string NotLoggedIn = "You are not currently logged in.";
  public const string NotLoggedInLogIn = "You are currently logged off. Would you like to log in?";
  public const string UnhandledException = "An unhandled exception has occurred.";
  public const string UnexpectedException = "An unhandled exception has occurred. Please see the trace log for more details.";
  public const string UnexpectedExceptionInFunction = "An unhandled exception has occurred in the function '{0}'. Please see the trace log for more details.";
  public const string Pop3UsageWarning = "The POP3 protocol is not well suited for retrieving large mailboxes because all messages are retrieved from the server every time the mail is collected. We recommend that you use IMAP protocol instead.";
  public const string MailSendCompletted = "The mail has been successfully sent.";
  public const string MailSendFailed = "The mail send has failed.";
  public const string MailReceiveFailed = "The mail receive has failed.";
  public const string EmailAccountDoesNotSupportReceivingEmail = "The {0} email account does nоt support receiving emails.";
  public const string EmailAccountDoesNotSupportSendingEmail = "The {0} email account does nоt support sending emails.";
  public const string EmailAccountDoesNotSupportReceivingAndSendingEmail = "The {0} email account does nоt support sending and receiving emails.";
  public const string MailSendFailedWithError = "The mail send has failed.\r\n{0}";
  public const string CannotConnectToHost = "Cannot connect to the host {0} with port {1}. Original error: {2}.";
  public const string MailReceiveFailedWithError = "The mail receive has failed.\r\n{0}";
  public const string MailSendAndReceiveFailed = "Mail sending and receiving has failed.";
  public const string EmailAddressNotMatchSenderMessage = "The email address of the email account does not match the email address specified in the From box of the email. The SMTP server requires that the specified email address matches the email address of the authenticated user.";
  public const string EmailAddressInOAuthTokenNotMatchSenderMessage = "The email address used to obtain the OAuth token does not match the email address specified in the From box of the email. The SMTP server requires that the specified email address matches the email address of the authenticated user.";
  public const string TimeoutDuringEstablishImapConnection = "The IMAP connection could not be established because of a timeout error.";
  public const string TimeoutDuringEstablishPop3Connection = "The POP3 connection could not be established because of a timeout error.";
  public const string LinkMissed = "(invalid link)";
  public const string UndefinedCompany = "A proper company ID cannot be determined for the request.";
  public const string LoginIvalidCompany = "You are not allowed to log in to the tenant {0}. Please contact your system administrator.";
  public const string LoginNotAllowed = "You are not allowed to log in. Please contact your system administrator.";
  public const string IncomingAccountNotConfigurated = "The email account isn't properly configured to receive email.";
  public const string ChangesNotCommitted = "The latest changes have been committed with an error. Please review.";
  public const string OperationNotCompleted = "The operation has been completed with an error. Please review.";
  public const string OperationCompletedWithWarning = "The operation has been completed. At least one item was processed with a warning. Please review";
  public const string OperationCompleted = "The operation has been completed successfully.";
  public const string ForeignRecordDeleted = "The record has been deleted.";
  public const string CantSetTargetFrame = "The TargetFrame property cannot be set when the SuppressFrameset value is True.";
  public const string ObjectVersionExists = "The object '{0}' labeled as '{1}' already exists.";
  public const string CustObjectSelectorError = "CustObjectSelectorAttribute: invalid restrictions (should be of the 'Where&lt;&gt;' type)";
  public const string CurrentVersionCantBeDeleted = "The current version cannot be deleted.";
  public const string CantDeleteLastArticleRevision = "The article contains only one revision. This revision cannot be deleted.";
  public const string CantDeleteLastFileRevision = "The file contains only one revision. This revision cannot be deleted.";
  public const string InvalidXmlFormat = "Invalid XML format";
  public const string CantLocateLatest = "The latest version cannot be located.";
  public const string MappingExists = "A mapping that uses the current data source exists. The record cannot be deleted.";
  public const string SchemaObjectNotSelected = "A schema object is not selected.";
  public const string SchemaFieldNotSelected = "A schema field is not selected.";
  public const string SourceObjectNotSelected = "An external object is not selected.";
  public const string NumberItemsFailed = "{0} items have not been processed successfully. View name: {1}.";
  public const string CantCreateIPXSYProvider = " IPXSYProvider cannot be instantiated from the {0} type.";
  public const string SiteUnderMaintenance = "The site is under maintenance and cannot be accessed at this time.";
  public const string SystemRowCantBeDeleted = "System rows cannot be deleted.";
  public const string ArticleAlreadyExists = "An article with the same name already exists.";
  public const string CantDetermineGraphType = "A graph type cannot be determined from the specified article type.";
  public const string DeletedArticle = "Deleted Article";
  public const string DuplicateObjectsInSchema = "There is a duplicate for object '{0}' in the schema. Schema object names should be unique.";
  public const string DuplicateFieldsInSchema = "There is a duplicate for field '{0}' in the schema. Schema field names should be unique.";
  public const string SymbolsNotAllowedInArticleName = "The following symbols cannot be used in an article ID: '/', '\\', '.'";
  public const string FailedCommitRow = "The system failed to commit the {0} row.";
  public const string CannotCreateGraph = "A graph cannot be created.";
  public const string StringLengthExceeded = "The string value provided exceeds the field '{0}' length.";
  public const string ProjectNotFound = "A project with this name has not been found.";
  public const string ProjectExists = "The project cannot be created. A project with this name already exists.";
  public const string CstDacFieldMustStartWithUsrPrefix = "Name of a custom field must start with the 'Usr' prefix.";
  public const string InvalidName = "Invalid Name";
  public const string InvalidImportTarget = "The target found violates the constraints.";
  public const string DetailBypassedDuePreviosError = "The record was not processed because of an error during processing of the previous record";
  public const string DetailBypassedDueNextError = "The record was not processed because of an error during processing of the next record.";
  public const string DontDeleteWikiFromSitemap = "A wiki record cannot be deleted. Use the {0} form ({1}) for this operation.";
  public const string NoPermissionToAddToThisFolder = "You don't have access rights to add an article into this folder.";
  public const string MissingMassProcessWorkFlow = "A work flow is not set up for this form.";
  public const string WorkflowSetFlowTypeFieldError = "The Workflow-Identifying Field and the State Identifier cannot be the same.";
  public const string ItemCantBePrimaryScreen = "This item cannot be selected as a primary screen.";
  public const string ScenarioNotFound = "The scenario cannot be found.";
  public const string TablesAreEqual = "Parent and child tables cannot be equal.";
  public const string InvalidFieldOrTable = "The field or table '{0}' in the inquiry design is invalid.";
  public const string AliasRequired = "The following parameters are required: alias, cacheType.";
  public const string StringParsDontMatch = "The string parameters defined in the translated string do not match the number of parameters in the source string.";
  public const string TriggerConstraintFailed = "' exists for this '";
  public const string ReferenceConstraintFailed = "This record is referenced by at least one '{0}' record. The operation cannot be completed.";
  public const string InvalidFilterParName = "The names of filter parameters can contain only numbers and letters.";
  public const string InvalidRelation = "Please select a committed relation first.";
  public const string CantCreateQueryDescr = "A query description cannot be created: A design ID or a name is not specified. Call the PrepareCaches method and pass to it a valid ID or name.";
  public const string CantDeleteActiveMapping = "Activated scenarios cannot be deleted. Deactivate the scenario and try again.";
  public const string ErrorInAUActivation = "An error occurred during activation: {0}. {1}";
  public const string ScreenIdOverflow = "The last screen ID is '99.99.99', which is a maximum value. A new screen cannot be added because incrementing the screen ID will cause an overflow.";
  public const string InvalidScreenIDLength = "The length of the last screen ID is invalid. A new valid value cannot be generated.";
  public const string InvalidScreenIDPrefix = "The screen ID prefix is invalid. It must be two characters long.";
  public const string NonDigitInScreenID = "The last screen ID contains invalid symbols. A new valid value cannot be generated.";
  public const string ScenarioExists = "An import or export scenario with the same name already exists. Please enter another name.";
  public const string ServiceIDNotSelected = "Please select or enter a Service ID value.";
  public const string FieldCantBeUpdated = "This field cannot be updated.";
  public const string SYInvalidScreen = "The entered screen ID is invalid. Make sure that the graph type for this screen is valid.";
  public const string SYProviderNotFound = "The provider does not exist in the system.";
  public const string SYInvalidScreenInTree = "The selected screen has an invalid screen ID or graph type. Navigation is aborted.";
  public const string SYDuplicateWsdlScreen = "The screen is being merged more than once. Please check that there are no duplicate screen IDs among the items you're trying to merge.";
  public const string SYServiceIDNull = "The service ID is not selected or is null. Please select or enter the service ID.";
  public const string ActionMenuNotDefined = "Menu item '{0}' cannot be enabled or disabled for an action because its menus are not defined.";
  public const string ActionMenuNotDefined2 = "Menu item '{0}' cannot be enabled or disabled for the action '{1}' because its menus are not defined.";
  public const string ButtonIsDisabled = "The {0} button is disabled.";
  public const string ActionInterruptFormatMessage = "The action has been interrupted due to the following reason: {0}.";
  public const string InvalidColumnName = "Invalid column name '{0}'";
  public const string InvalidCondition = "Invalid condition: '{0}'";
  public const string SYFileNotFound = "The file '{0}' for the provider '{1}' has not been found.";
  public const string EmptyTableInWhereClause = "Empty table in \"Where\" clause";
  public const string PasswordRecoveryDenied = "The password recovery feature is disabled for this account. Contact your system administrator.";
  public const string RowForComboBoxNotSelected = "Please select the row to define combo box values for.";
  public const string SpecifyComboboxToSetValues = "Combo box values cannot be defined for this row. Please first select the <Combobox> value in the Schema field.";
  public const string ActionNotFound = "The {0} action cannot be found.";
  public const string UrlValidation = "The URL {0} is not valid. This is an example of a valid URL: http://www.acumatica.com.";
  public const string LocaleNotSelected = "A locale is not selected.";
  public const string ScheduleNextTimeNotInRange = "Next Execution Time is not in a valid time range.";
  public const string ScheduleNextDateNotInRange = "Next Execution Date is not in a valid time range.";
  public const string ScheduleFrequencyNotInRange = "The value in this box must be greater than or equal to 1.";
  public const string ScheduleStartTimeIsNotDefinedWhenStopTimeIsDefined = "You have to define the start time when the stop time is defined.";
  public const string ScheduleStartTimeIsNotDefinedWhenNoInterval = "You have to define the start time for a single schedule start.";
  public const string ScheduleEndTimeIsNotDefined = "You have to define the stop time when the start time and an interval are defined.";
  public const string ProcessDelegateNotSet = "The process delegate has not been defined.";
  public const string IncorrectExtensionRequested = "An incorrect type of extension has been requested.";
  public const string ModificationOfTableProhibited = "Modification of the {0} table is not allowed in this installation.";
  public const string TableSchemaWasNotFoundInCache = "The table schema of the {0} table was not found in the cache. The table is locked by another process. Please try again later.";
  public const string AuditNotAvailable = "Detailed information is not available for this entry.";
  public const string AuditTableTypeIsNotAvailable = "Published customizations do not contain the '{0}' type.";
  public const string CircularReferenceInFormula = "There is a circular reference in the calculated field {0}.{1} (formula: {2})";
  public const string LicenseLinkActivate = "Activate";
  public const string LicenseLinkRenew = "Renew";
  public const string LicenseTrialMode = "Your product is in trial mode. Only two concurrent users are allowed. ";
  public const string LicenseGracePeriod = "Your license has expired. Please renew your license. ";
  public const string LicenseNotifyPeriod = "Your license will expire soon. Please renew your license. ";
  public const string LicenseNotifyPeriodPerpetual = "The system was not able to connect to the licensing server. This may happen due to network connectivity or configuration issues. Please contact the support team to resolve this problem.";
  public const string LicenseExpired = "Your license has expired. Your product has been switched into trial mode. ";
  public const string LicenseTrialCompany = "You are currently using a test tenant that is not intended for production use.";
  public const string LicenseTrialMessage = "This message was sent from an Acumatica trial tenant that is not intended for production use.";
  public const string LicenseKeyInvalid = "The license key is invalid.";
  public const string LicenseServerError = "The license server returned an error. For detailed information, see the trace.";
  public const string LicenseKeyNotEntered = "Please enter an appropriate license key.";
  public const string LicenseInvalidResponce = "The license cannot be obtained. An unexpected response has been returned from the license server.";
  public const string LicenseCantObtain = "The license cannot be obtained.";
  public const string LicenseNotValidSignature = "The received license has an invalid signature.";
  public const string LicenseValidForPortalOnly = "Requested license is valid for Acumatica Self-Service Portal only.";
  public const string LicenseNotValidFile = "The received file is not a valid license.";
  public const string LicenseNotValid = "The current license is not valid.";
  public const string LicenseNotSign = "The received license is not valid. A digital signature is missing.";
  public const string LicenseFeatureValidation = "Feature '{0}' validation has failed. Your license does not include access to the used feature.";
  public const string LicenseActivationFailed = "License activation has failed.";
  public const string LicenseIsValidOnlyForPortal = "The license you are trying to apply is valid for Acumatica Self-Service Portal only.";
  public const string MaximumNumberOfFixedAssests = "Your limit for number of fixed assets in the system has been exceeded. If you need to have more fixed assets in the system please contact your license provider.";
  public const string MaximumNumberOfInventoryItems = "Your limit for number of inventory items in the system has been exceeded. If you need to have more inventory items in the system please contact your license provider.";
  public const string MaximumNumberOfBusinessAccounts = "Your limit for number of business accounts in the system has been exceeded. If you need to have more business accounts in the system please contact your license provider.";
  public const string FixedAssetsExceedsLimit = "Number of fixed assets for the tenant has exceeded the limit of the current license.";
  public const string FixedAssetsHasReachedLimit = "Number of fixed assets for the tenant has reached {0}% of the limit in the current license.";
  public const string InventoryItemsExceedsLimit = "Number of inventory items for the tenant has exceeded the limit of the current license.";
  public const string InventoryItemsHasReachedLimit = "Number of inventory items for the tenant has reached {0}% of the limit in the current license.";
  public const string BusinessAccountsExceedsLimit = "Number of business accounts for the tenant has exceeded the limit of the current license.";
  public const string BusinessAccountsHasReachedLimit = "Number of business accounts for the tenant has reached {0}% of the limit in the current license.";
  public const string PayrollEmployeesExceedsLimit = "Number of employees paid for the tenant has exceeded the limit of the current license.";
  public const string PayrollEmployeesHasReachedLimit = "The number of paid employees has reached {0}% of the limit allowed for the tenant by the currently applied license.";
  public const string DocumentsRecognizedPerMonthExceedsLimit = "The number of recognized AP documents for the current month has exceeded the limit allowed by the currently applied license.";
  public const string DocumentsRecognizedPerMonthHasReachedLimit = "The number of recognized AP documents for the current month has reached {0}% of the limit allowed by the currently applied license.";
  public const string ExpenseReceiptsRecognizedPerMonthExceedsLimit = "The number of recognized expense receipts for the current month has exceeded the limit allowed by the currently applied license.";
  public const string ExpenseReceiptsRecognizedPerMonthHasReachedLimit = "The number of recognized expense receipts for the current month has reached {0}% of the limit allowed by the currently applied license.";
  public const string BusinessCardsRecognizedPerMonthExceedsLimit = "The number of recognized Business Cards for the current month has exceeded the limit allowed by the currently applied license.";
  public const string BusinessCardsRecognizedPerMonthHasReachedLimit = "The number of recognized Business Cards for the current month has reached {0}% of the limit allowed by the currently applied license.";
  public const string NumberOfBankfeedsExceedsLimitWithQty = "The number of the bank feed accounts ({0}) exceeds the limit of the current license.";
  public const string NumberOfBankfeedsExceedsLimit = "The number of the bank feed accounts exceeds the limit of the current license.";
  public const string AppointmentsByMonthExceedsLimit = "The number of appointments for the current month has exceeded the limit allowed for the tenant by the currently applied license.";
  public const string AppointmentsByMonthHasReachedLimit = "The number of appointments for the current month has reached {0}% of the limit allowed for the tenant by the currently applied license.";
  public const string StaffVehiclesExceedsLimit = "The number of staff members and vehicles has exceeded the limit allowed for the tenant by the currently applied license.";
  public const string StaffVehiclesHasReachedLimit = "The number of staff members and vehicles has reached {0}% of the limit allowed for the tenant by the currently applied license.";
  public const string LicenseLimitsExceeded = "License limits of your resource level were exceeded. ";
  public const string LicenseSystemConstraintsLimitsExceeded = "System constraints maximum defined for your current license has been exceeded.";
  public const string LicenseLimitsButton = "More Details";
  public const string ExchangeServerUrlError = "An exchange URL cannot be auto-discovered.";
  public const string EndDateLessThanStartDate = "{0} must be greater than or equal to {1} '{2:d}'.";
  public const string StartDateGreaterThanEndDate = "{0} must be less than or equal to {1} '{2:d}'.";
  public const string ExtRefError = "The {0} record is referenced by the {1} record and cannot be deleted.";
  public const string InvalidWeblink = "The link URL does not have the correct format.";
  public const string InvalidEmail = "The email address {0} is invalid.";
  public const string HistoryNotAvailable = "History is not available on this form.";
  public const string PossibleADConflict = "A username containing '\\' can hide the Active Directory login";
  public const string InvalidDecimalValue = "The number in {0} does not fit the SQL decimal data type.";
  public const string ValueLessThanMin = "The value must be greater than or equal to {0}.";
  public const string ValueGreaterThanMax = "The value must be less than or equal to {0}.";
  public const string UnallowedListValue = "The list value '{0}' is not allowed for the {1} field.";
  public const string TheListValueIsNotAllowed = "The '{0}' list value is not allowed for the {1} field. The allowed values are: {2}.";
  [Obsolete("This method has been deprecated and will be removed in Acumatica ERP 2020 R1.")]
  public const string AllFieldsIsEmpty = "One of the fields {0} and {1} cannot be empty.";
  public const string AttemptOfWholeTableUpdate = "An attempt of an update of the whole table {0} was detected because of missed key values.";
  public const string RowModificationAfterPersist = "The system detected an attempt to modify a record that had already been saved to the application database.";
  public const string UsageOfAttributeWithoutPrerequisites = "The attribute {0} is being used without the prerequisite {1} on the field {2}.{3}.";
  public const string DefaultUrl = "The default URL is ~/Frames/Default.aspx.";
  public const string ScaleExceedsPrecision = "For the decimal column type, scale cannot exceed precision.";
  public const string TableNameAreRestricted = "Table names cannot be used as names of SQL scripts.";
  public const string DecreaseColumnLengthAreRestricted = "The new length of the field must be greater than the current length of the field.";
  public const string RestrictedEmailAccount = "You do not have permission to access the account {0}.";
  public const string EmailAccountNotActive = "The email account is inactive.";
  public const string Inserting = "Inserting ";
  public const string Updating = "Updating ";
  public const string Deleting = "Deleting ";
  public const string InvalidIBqlField = "The type {0} must inherit the PX.Data.IBqlField interface.";
  public const string SupportetBrowsers = "We're sorry. Your browser is not supported. <br />~Acumatica ERP supports only the following web browsers: <br />~<ul style='margin:5px 0px 0px 60px;padding-left:0px'><li>Microsoft Internet Explorer 9, 10, and 11 with Compatibility View turned off (the Display intranet sites in Compatibility View option should be turned off)</li>~<li>Mozilla Firefox 26 and above</li>~<li>Apple Safari 7</li>~<li>Google Chrome 31 and above</li></ul>";
  public const string SpacesAreNotAllowed = "Spaces are not allowed.";
  public const string PrimaryQuote = "The quote cannot be deleted because it is marked as primary for the opportunity. If you want to delete this quote, mark another quote as primary first.";
  public const string DuplicatedKeyForRow = "The {0} identifier is already used for another business account record (vendor, customer, employee, branch, company, or company group).";
  public const string DataWouldBeTruncated = "{0} the '{1}' record failed because data in some field is too long.";
  public const string DataWouldBeTruncatedWithColumnName = "{0} the '{1}' record failed because data in the '{2}' field is too long.";
  public const string ThemeDoesNotExists = "The '{0}' theme not found in the ~\\App_Themes\\ folder. The default theme will be used.";
  public const string SignFormulaShouldBeIBqlCreator = "Cannot create {0}. The sign formula should be IBqlCreator.";
  public const string SignFormulaShouldBeSetBeforeCacheAttached = "Cannot create {0}. The sign formula should be set before CacheAttached.";
  public const string NotificationTemplateNoOwnerWarning = "The email will not be processed by the Exchange Integration if the email owner is not specified.";
  public const string ValueMustBeScreenOrExternalUrlOrTemplate = "Only an existing screen ID, an external URL, or a URL template should be specified here.";
  public const string ValueIsNotAnExternalUrl = "Unable to navigate to the '{0}' URL. It must be a valid external URL.";
  public const string StoredErpTranDocumentsAreLimited = "Information about the processed documents that caused the transaction registration was truncated. Only {0} documents of each document type are stored for each action.";
  public const string ErpTranActionsAreStoredForLimitedPeriod = "Information about documents is stored only for {0} days.";
  public const string LeadingSpaceIsNotAllowed = "Key field cannot start with a leading space.";
  public const string PersistBeforeWorkflowActionValidationError = "Cannot save changes to the database and execute the {0} action due to a validation error in the {1} graph.";
  public const string PersistWrongWorkflowStateError = "Your changes cannot be saved due to the status of the record stored in the {0}.{1} field. Modify the record so that its status changes, and then save it.";
  public const string CannotMarkTheRecordAsUpdated = "Cannot mark the record as updated because another record with the same key exists in the cache. Contact your Acumatica support provider for the assistance.";
  public const string CurrenRecordDoesNotBelongCacheItemsList = "The \"Current\" property of the cache refers to a record that is not available in the list of items in the cache.";
  public const string IgnoredForParallelProcessing = "This option is ignored for import scenarios with the Parallel Processing option enabled";
  public const string PXReplaceUDFConfigurationPXNoteAttributeNotFound = "PXReplaceUDFConfigurationAttribute must be used along with PXNoteAttribute. The {0} field of the {1} DAC has PXReplaceUDFConfigurationAttribute, but has no PXNoteAttribute assigned.";
  public const string IncorrectTenantName = "The tenant Name cannot contain any of the following characters: ',' ';' '<' '>' '*' '%' '&' ':' '\\' '?'. ";
  public const string IncorrectTenantLogin = "The tenant Login Name cannot contain any of the following characters: ',' ';' '<' '>' '*' '%' '&' ':' '\\' '?'. ";
  public const string AddThisReportToTheSitemap = "Please add this report to the site map.";
  public const string ReportDoesNotContainParameters = "The report does not contain parameters: {0}.";
  public const string ItemCollectionNullOrEmpty = "itemCollection cannot be null or empty.";
  public const string TableOrFieldDoesntExist = "The report cannot be opened because it includes a table ({0}) or a field ({1}) that does not exist.";
  public const string ReportTemplateAlreadyExists = "A report template with the name {0} already exists. Please change the name of the template.";
  public const string CodeNotInt = "The Code column contains at least one non-integer value.";
  public const string RowCodeExists = "A record with the same value of the Code field already exists.";
  public const string ReportNotFound = "The report with name {0} is not found.";
  public const string InvalidEndColumn = "The end column in Column Range of the column {0} can't be located to the left.";
  public const string InvalidColumnCellEvaluationOrder = "You cannot use Cell Evaluation Order set to Column for columns of the GL type.";
  public const string ReportIdNotFound = "The selected notification has no specified report ID.";
  public const string EmailNotificationWithNotExistTemplate = "The report template cannot be used to generate attached reports. Make sure the template exists for the corresponding report and the Shared check box is selected for it.";
  public const string AUFieldNameStartLetter = "The field name should start with a letter.";
  public const string AUUnableToAddBaseField = "The field is already defined in the data access class.";
  public const string AUDuplicateField = "The field is already defined for this project.";
  public const string AUTableNameError = "You should define the full name of the existing data access class.";
  public const string ViewNotExisted = "The \"{0}\" view is not found. Try to publish the customization project.";
  public const string DuplicateKeyEntryDetected = "The key cannot be updated at this time. Try to save your previous changes first.";
  public const string EmptyTranslationSet = "You must provide items for the translation set before string collection.";
  public const string GIFieldNotExists = "A field with the name {0} cannot be found.";
  public const string GIFieldCannotBeUsed = "The {0} field cannot be used because either the table with the {1} alias is not joined with other tables on the Relations tab or the corresponding relation is inactive.";
  public const string GITableNotExists = "A table with the alias {0} cannot be found.";
  public const string GITableIsNotFound = "This table is not found in the system.";
  public const string GIIsNotFound = "This generic inquiry does not exist.";
  public const string GIReferenceLoopDetected = "This generic inquiry references the generic inquiry you are modifying.";
  public const string GIReferenceLoopDetectedWithDetails = "The generic inquiry's description cannot be built due to circular referencing. The {0} generic inquiry references the {1} generic inquiry, which in turn references the {0} generic inquiry.";
  public const string GIInvalidIdentifierFormat = "{0} is not recognized as a valid identifier of a generic inquiry.";
  public const string GITableIsObsolete = "This table is obsolete. You cannot use it as a data source for new generic inquiries. Select another table.";
  public const string GIFieldIsObsolete = "This data field is obsolete. Select another data field.";
  public const string GIFieldTooSmall = "The value has to be greater than 0.";
  public const string GIFieldValueNull = "The value can't be null in the Where condition for the field {0}.";
  public const string GIVirtualField = "The virtual field {0} cannot be used in a condition expression.";
  public const string GICannotDetermineField = "The field {0} cannot be determined.";
  public const string GISiteMapNodeIsFolder = "You must select a form rather than a folder.";
  public const string GINoPrimaryScreenDefined = "You must define a primary screen.";
  public const string GIMustSaveToSiteMap = "You should make the screen visible in the UI first.";
  public const string GISiteMapNodeDoesNotExist = "A site map node with the screen ID {0} does not exist. Maybe it was moved or removed.";
  public const string GIPrimaryScreenNodeDoesNotExistExt = "A primary screen node for this inquiry form does not exist; it may have been moved or removed. Primary screen settings will be reset to default values.";
  public const string GINoTableForPrimaryScreen = "The primary screen has been reset because there are no tables defined for this primary screen.";
  public const string GIActionNotFound = "An action with the name '{0}' cannot be found.";
  public const string GIActionIsNotActive = "The action is unavailable for this record.";
  public const string GIProcessingFailed = "At least one record hasn't been processed.";
  public const string GIMassDeleteFailed = "At least one record hasn't been deleted.";
  public const string GIDeleteUnavailiable = "The Delete operation is not available for this type of record.";
  public const string GIActionCannotBeApplied = "The action cannot be applied to this record.";
  public const string GIFieldIsDisabled = "The field {0} cannot be updated in this record because the field is disabled.";
  public const string GICannotAutomatePrimaryScreen = "The entry form (ID: {0}, title: {1}) cannot be automated. {2}";
  public const string GICannotFindGenInqNode = "A site map node with the screen ID {0} cannot be found.";
  public const string GICannotFindGenInq = "A generic inquiry with this ID or name cannot be found. Please check the URL of the site map node for this inquiry.";
  public const string GIPrimaryScreenAndEntryScreenDiffers = "You have to specify the same primary screen in this generic inquiry first.";
  public const string GITablesConfFileEmptyName = "The name of the XML file for GI table configuration cannot be empty.";
  public const string GITablesConfFileNotExists = "An XML file for GI table configuration cannot be found. Please check whether the file exists.";
  public const string GITablesConfInvalidFile = "The XML file for GI table configuration has an invalid format. Please check the file and try again. ({0})";
  public const string GIGroupByRequired = "You must define Group By to use the <Count> field.";
  public const string GIFieldWithSubselect = "Adding this field to the generic inquiry will affect the system performance. To avoid unnecessary queries, join with the related table. The generated query for this field is ~{0}";
  public const string GIComplexSort = "Adding this sort to your generic inquiry will impact performance. Generated query for this sort:~{0}";
  public const string GIDoesNotExist = "This generic inquiry does not exist anymore.";
  public const string GISubGIDoesNotExist = "This inquiry cannot be displayed because it refers to a non-existent generic inquiry, table, or field. For details, see the Trace log.";
  public const string GICannotDeletePrimaryScreenNavSetting = "The navigation settings for the entry screen cannot be deleted. Please remove the entry screen on the Entry Point tab first.";
  public const string GIInvalidNavigationParameterValue = "Invalid value. Please enter either a field name, a formula or a value from schema.";
  /// <exclude />
  public const string GIImportXMLScreenIDAlreadyExists = "A site map node with the Screen ID = '{0}' already exists. Please change its screen ID before the importing of this Generic Inquiry.";
  public const string GIUnbalancedBracketsInWhere = "Brackets in the Where condition are not balanced.";
  public const string GIUnbalancedBracketsInOn = "Brackets in the On condition are not balanced.";
  public const string GIInvalidAggregateFunction = "Selected aggregate function is not supported for this data field.";
  public const string GIInvalidDateInterval = "Time interval is not correct for the {0} function.";
  public const string GITitleAlreadyExists = "The '{0}' title is already used for another generic inquiry.";
  public const string GIWhereFieldCannotBeEmpty = "The {0} cannot be empty for the {1} condition.";
  public const string GIFieldHiddenByAccessRights = "This field will not be displayed for the current user because the user has insufficient access rights or the required feature is disabled.";
  public const string GIIsUsedByOtherGIsWarning = "This inquiry is used as a source for another generic inquiry. Changes can corrupt the data output of the parent inquiry.";
  public const string GIIsUsedByOtherGIsAskToCopy = "The inquiry is used in generic inquiries {0}. Do you want to save a copy of this inquiry or overwrite it?";
  public const string GIIsUsedByOtherGIsAskToDelete = "The inquiry is used in generic inquiries {0}. Do you want to delete this inquiry?";
  public const string GIFieldIsUsedByOtherGIsAskToDelete = "The field is used in generic inquiries {0}. Do you want to remove the field from the inquiry output?";
  public const string GICouldNotBeDisplayed = "This generic inquiry cannot be displayed. Please check the settings of the generic inquiry.";
  public const string GIFieldDoesNotExistInGI = "This field is not returned by the generic inquiry used as the data source.";
  public const string GIAlreadyExistList = "The following existing generic inquiries will be overwritten: {0}. Do you want to import the file?";
  public const string SitemapTitleCannotBeEmpty = "Site Map Title cannot be empty.";
  public const string SiteMapRootNodeIsMissing = "The related site map root node is missing.";
  public const string UserHasNoAccessToScreen = "The current user does not have access to the {0} screen.";
  public const string TenantHasNoAccessToScreen = "The {0} screen has not been added to the site map of the current tenant.";
  public const string NotEnoughRightsToAccessObject = "You have insufficient rights to access the object ({0}).";
  public const string InnerErrorPlaceholder = "Inner error(s):";
  public const string CantSaveEnvironment = "The environment(s) cannot be saved. This license can have only {0} active environment(s).";
  public const string PropertyIsNotABqlField = "The property {0} is not found or it is not a BQL field in a DAC.";
  public const string CheckInputParameters = "At least one of the mandatory parameters is null. Check the input parameters.";
  public const string CacheTypeIsWrong = "The input cache type doesn't match the DAC type.";
  public const string ZeroNavigaitonElements = "The navigation actions and fields count is 0. You must specify at least one navigation action or field.";
  public const string WrongScreenIDPrefixLength = "The length of a screen ID prefix must be two symbols.";
  public const string SpecifyValidParameters = "You must either specify an URL parameter field and ID placeholder or generate a new screen ID from keys.";
  public const string FilterDataFieldIsEmpty = "The Property value cannot be empty.";
  public const string FilterConditionIsEmpty = "The Condition value cannot be empty.";
  public const string ParameterScreenName = "Screen Name is empty or the screen doesn't support the Copy and Paste actions.";
  public const string ParameterScenarioName = "Scenario Name is empty or a scenario or provider with this name already exists in the system.";
  public const string ProviderTypeIsNotValid = "Provider Type is empty or its value is not permitted.";
  public const string FieldsConverterCtr = "{0} cannot be instantiated. The Ctr parameters are not valid.";
  public const string CannotUpdateUserLogin = "Changes to the user name are prohibited in the system.";
  public const string NotAllowedForNonSelectorFields = "The EveryValue option is not allowed for non-selector fields. ViewName:{0}, fieldName:{1}";
  public const string ConversionException = "Field {0}: Failed to convert the value {1} to the type {2}.";
  public const string SelectIsNotAllowed = "A Select from the {0} view is not allowed.";
  public const string CantAddDashboardNoAccessRights = "You don't have sufficient access rights to add dashboards to the selected node.";
  public const string InvalidFilterVariableField = "Filter variables can be used only in the Value field.";
  public const string InvalidFilterVariableConditionTwoVariables = "The variables {0} and {1} can be used only in conjunction with condition '{2}' or '{3}' only.";
  public const string InvalidFilterVariableConditionThreeVariables = "The variables {0}, {1}, and {2} can be used in conjunction with the conditions '{3}' or '{4}' only.";
  public const string InvalidFilterConditionUsage = "Value returns a list. It seems like you're trying to use {0}, {1}, or {2}.";
  public const string InvalidSnapshotFormat = "Invalid snapshot format";
  public const string SnapshotValidationFailed = "The data from the snapshot cannot be uploaded:";
  public const string SnapshotValidationDataLength = "{0}: The field value ({1}, {2}) exceeds the maximum length.";
  public const string SnapshotValidationNullValue = "{0}: The Null value ({1}, {2}) is not allowed.";
  public const string SnapshotValidationNMoreIssues = " +{0} more similar issue(s) in table {1}";
  public const string InvalidExternalAuth = "The system cannot process an external authentication. Please make sure that authentication is set up correctly and the specified parameters are valid.";
  public const string NotCorrectTokenFromAddIn = "The system received not correct identity token from the Exchange server. Token is empty.";
  public const string InvalidExternalAccount = "The system cannot find an associated user for the provided external login. Please make sure that your login has access rights to the requested site.";
  public const string InvalidExternalAssociated = "The system cannot associate the specified user with the provided external login. Please make sure that the specified user is allowed to authenticate with external logins.";
  public const string InvalidExternalAssociation = "The system cannot find the associated user. Sign in using your internal credentials, and the system will automatically associate your external account with an internal user. Alternatively, you can use another sign-in option.";
  public const string InvalidAuthUser = "Please select and activate an appropriate identity provider.";
  public const string ClaimIsMissing = "The required claim '{0}' is missing. Please configure your ADFS server to pass through this claim.";
  public const string RoleMappingMissing = "User '{0}' doesn't have associated roles in the system.";
  public const string ValueIsNotUnique = "The value of this field must be unique among all records.";
  public const string NonADFSUserAlreadyExists = "A non-ADFS user with the same name already exists.";
  public const string GraphTypeIsEmpty = "The graph type can't be empty.";
  public const string ViewNameIsEmpty = "The view name can't be empty.";
  public const string FilterNameIsEmpty = "The filter name can't be empty.";
  public const string FilterRowsAreEmpty = "The filter rows can't be null.";
  public const string ExistingFilterNamesAreNull = "You can't append filter names to an undefined collection.";
  public const string CannotApplyThisVariable = "Variable {0} is not applicable to this field.";
  public const string TranslationMaintImportParseFail = "Neutral Value can't be null or empty.";
  public const string WrongImportMode = "Import mode cannot be parsed. The string value is invalid.";
  public const string ImportStrategyConflict = "The row cannot be inserted. It already exists.";
  public const string ListHasAlreadyBeenUsed = "This list screen has already been used for another entry screen. Please select another screen.";
  public const string NodeCannotBeFolder = "This node is a folder. Please select an appropriate node.";
  public const string ListAndEntryScreenAreEqual = "The entry screen and list screen must differ (Screen ID: {0}).";
  public const string FormWasRemoved = "This form was removed from the site map. Select another form or delete the row.";
  public const string UnableConvertToTime = "\"{0}\" cannot be converted to Time.";
  public const string CancelParameterInvalidType = "Invalid type of the generic parameter TField";
  public const string AnotherSiteMapNodesWithDifferentScreenIDs = "There are multiple nodes in the site map for this screen that have different screen IDs: {0}.";
  public const string SystemMustHaveAtLeastOneLocale = "The locale cannot be deleted. The system must have at least one locale.";
  public const string TranslationsWithLocaleExist = "The locale cannot be deleted. The translation dictionaries contain translations that use this locale.";
  public const string PivotAlreadyExists = "A pivot table with the name {0} already exists. Please select another name.";
  public const string TimeZoneCannotBeFound = "The time zone {0} cannot be found in the system.";
  public const string NotValidTransaction = "The transaction has been silently rolled back before a database update operation.";
  public const string ConnectionInvalidState = "The connection is busy. The current DB reader is already in use.";
  public const string TransactionInvalidState = "Your last operation cannot be completed because the database server closed the connection unexpectedly. The results of the operation are lost. Please repeat this operation.";
  public const string UnknownWindowMode = "Unknown window mode";
  public const string MapKeyColumnShouldBeOfType = "A field from the UNION query cannot be matched to any field of the {0} DAC.";
  public const string TooManyRowsSelected = "Denial Code 513. The system was unable to process the request due to data size limits. Please review your operation and consider requesting a smaller dataset. Contact your provider for further assistance.";
  public const string SqlTimeout = "Denial Code 510. The system was unable to gather the data needed to complete the operation due to SQL timeout constraints. Please try to optimize the operation or contact your Acumatica support provider for further assistance.";
  public const string XMLDifferentRelationsVersion = "The XML file cannot be imported. The XML file being imported was created with a previous version of the XML export definition for this screen (file version = {0}, current version = {1}).";
  public const string XMLUniqueKeysInconsistent = "The unique key of the {0} table has the following different values in the export template: {1}. Specify the same unique key value for this table.";
  public const string InvalidPrimaryKeyInsertError = "The import will lead to the insertion of a {0} record with the {1} ID. This action is prohibited by the relation model. Check if your destination is set up correctly.";
  public const string ScreenIDNotFound = "The screen ID {0} is not found in the system.";
  public const string EntityNotFound = "The system cannot find the '{0}' record.";
  public const string ActiveTransactionNotFound = "No transaction is available.";
  /// <exclude />
  public const string ScreenIDDuplicate = "The Screen ID you have entered already exists in the site map. The '{0}' form with another URL has the same screen ID. Please change the Screen ID.";
  public const string InvalidScreenID = "The screen ID must be 8 characters long.";
  public const string YouDoNotHaveAccessRightsToViewOrModifyDataOfTheBranchOrBranches = "You do not have access rights to view or modify data of the {0} branch or branches.";
  public const string GridIsAlreadySorted = "The lines cannot be rearranged, custom sorting has been applied. Clear the sorting, before rearranging the lines.";
  public const string ValueIsNotValid = "Provided value does not pass validation rules defined for this field.";
  public const string ValueIsNotFound = "The record has been deleted.";
  public const string OnlineHelpIsEnabled = "The form is not available because the Use Online Help System check box is selected on the Site Preferences (SM200505) form.";
  public const string DefaultSmsProviderNotConfigured = "You need to configure default SMS provider on SMS Providers screen to allow use SMS for two-factor authentication";
  public const string ExternalFileStorageDisabled = "External File Storage is disabled by administrator.";
  public const string SessionRollback = "Unhandled exception has occurred, your changes have been rolled back: {0}";
  public const string ImpossibleImportError = "Impossible to import selected file. Records in the file and in the database table {0} don't match.";
  public const string IncomingHostProtocolNotSupported = "The specified IncomingHostProtocol {0} is not supported.";
  public const string IncomingHostNameNotSpecified = "Incoming Mail Server is not specified.";
  public const string OutcomingHostNameNotSpecified = "Outcoming Mail Server is not specified.";
  public const string CannotInvokeActionNoInsertRights = "Cannot invoke the {0} action. You have no access rights for the INSERT operation.";
  public const string CannotChangeAttributeControlType = "Cannot change a control type because there are entities that already use the attribute: {0}. Remove this attribute from the entities to change attribute type.";
  public const string CannotChangeAttributeSettings = "Cannot change the attribute settings because there are entities that already use the attribute: {0}. Remove this attribute from the entities to change the attribute settings.";
  public const string CannotChangeUdfSettings = "Cannot change the attribute settings because there are forms that already use the attribute as a user-defined field: {0}. Remove this attribute from the forms to change the attribute settings.";
  public const string MailSenderPluginCannotBeResolved = "The system cannot resolve the {0} plug-in type.";
  public const string MailSenderCannotBeResolved = "The system cannot resolve the {0} mail sender.";
  public const string MailSenderNotSpecified = "No mail sender is specified.";
  public const string MailReceiverCannotBeResolved = "The system cannot resolve the {0} mail receiver.";
  public const string MailReceiverNotSpecified = "No mail receiver is specified.";
  public const string InaccessibleObjectByScreenId = "The form with the {0} screen ID has not been found or you do not have sufficient rights to access this form.";
  public const string ChangesWillBeAppliedToAllTenants = "Note that your changes will be applied to all tenants of the instance.";

  public static string GetLocal(string msg)
  {
    return PXLocalizer.Localize(msg, typeof (ErrorMessages).ToString());
  }
}
