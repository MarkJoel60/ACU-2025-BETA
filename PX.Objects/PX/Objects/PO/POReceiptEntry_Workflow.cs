// Decompiled with JetBrains decompiler
// Type: PX.Objects.PO.POReceiptEntry_Workflow
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Common;
using PX.Data;
using PX.Data.BQL;
using PX.Data.BQL.Fluent;
using PX.Data.WorkflowAPI;
using PX.Objects.Common;
using PX.Objects.PO.GraphExtensions.POReceiptEntryExt;
using System;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.PO;

public class POReceiptEntry_Workflow : PXGraphExtension<POReceiptEntry>
{
  public virtual void Configure(PXScreenConfiguration config)
  {
    POReceiptEntry_Workflow.Configure(config.GetScreenConfigurationContext<POReceiptEntry, POReceipt>());
  }

  protected static void Configure(WorkflowContext<POReceiptEntry, POReceipt> context)
  {
    var conditions = new
    {
      IsOnHold = Bql<BqlOperand<POReceipt.hold, IBqlBool>.IsEqual<True>>(),
      IsReleased = Bql<BqlOperand<POReceipt.released, IBqlBool>.IsEqual<True>>(),
      IsReceived = Bql<BqlOperand<POReceipt.received, IBqlBool>.IsEqual<True>>(),
      IsNotIntercompany = Bql<BqlOperand<POReceipt.isIntercompany, IBqlBool>.IsEqual<False>>(),
      IsIntercompanySalesReturnGenerated = Bql<BqlOperand<POReceipt.intercompanySONbr, IBqlString>.IsNotNull>()
    }.AutoNameConditions();
    CommonActionCategories.Categories<POReceiptEntry, POReceipt> categories1 = CommonActionCategories.Get<POReceiptEntry, POReceipt>(context);
    BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.IConfigured processingCategory = categories1.Processing;
    BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.IConfigured intercompanyCategory = categories1.Intercompany;
    BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.IConfigured correctionsCategory = categories1.Corrections;
    BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.IConfigured printingEmailingCategory = categories1.PrintingAndEmailing;
    BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.IConfigured otherCategory = categories1.Other;
    context.AddScreenConfigurationFor((Func<BoundedTo<POReceiptEntry, POReceipt>.ScreenConfiguration.IStartConfigScreen, BoundedTo<POReceiptEntry, POReceipt>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<POReceiptEntry, POReceipt>.ScreenConfiguration.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<POReceipt.status>().FlowTypeIdentifierIs<POReceipt.receiptType>(true).WithFlows((Action<BoundedTo<POReceiptEntry, POReceipt>.Workflow.IContainerFillerFlows>) (flows =>
    {
      flows.Add<POReceiptType.poreceipt>((Func<BoundedTo<POReceiptEntry, POReceipt>.Workflow.INeedStatesFlow, BoundedTo<POReceiptEntry, POReceipt>.Workflow.IConfigured>) (flow => (BoundedTo<POReceiptEntry, POReceipt>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POReceiptEntry, PXAutoAction<POReceipt>>>) (g => g.initializeState))));
        states.Add<POReceiptStatus.hold>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.releaseFromHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printAllocated), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))));
        states.Add<POReceiptStatus.balanced>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.release), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.putOnHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.emailPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printAllocated), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOReceipt));
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnConfirmReceipt));
        }))));
        states.Add<POReceiptStatus.received>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.release), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.emailPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printAllocated), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOReceipt))))).WithOnEnterAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (ass => ass.Add<POReceipt.received>(new bool?(true))))));
        states.Add<POReceiptStatus.released>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createReturn), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createAPDocument), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createLCDocument), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add<Correction>((Expression<Func<Correction, PXAction<POReceipt>>>) (g => g.correctReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add<Correction>((Expression<Func<Correction, PXAction<POReceipt>>>) (g => g.cancelReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printBillingDetail), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printAllocated), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnCorrectionReceiptCreated));
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnReceiptCancelled));
        }))));
        states.Add<POReceiptStatus.underCorrection>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) state.WithEventHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnCorrectionReceiptDeleted));
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnCorrectionReceiptReleased));
        }))).WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null)))));
        states.Add<POReceiptStatus.canceled>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null)))));
      })).WithTransitions((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.hold>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsReleased)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.received>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsReceived)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.balanced>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POReceiptStatus.hold>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.balanced>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.releaseFromHold))))));
        transitions.AddGroupFrom<POReceiptStatus.balanced>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.hold>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.putOnHold)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOReceipt)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.released>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.received>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnConfirmReceipt))));
        }));
        transitions.AddGroupFrom<POReceiptStatus.received>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOReceipt)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.released>(new bool?(true))))))));
        transitions.AddGroupFrom<POReceiptStatus.released>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.underCorrection>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnCorrectionReceiptCreated)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.isUnderCorrection>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.canceled>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnReceiptCancelled)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.canceled>(new bool?(true))))));
        }));
        transitions.AddGroupFrom<POReceiptStatus.underCorrection>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnCorrectionReceiptDeleted)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.isUnderCorrection>(new bool?(false))))))));
        transitions.AddGroupFrom<POReceiptStatus.underCorrection>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.canceled>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnCorrectionReceiptReleased)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields =>
        {
          fields.Add<POReceipt.isUnderCorrection>(new bool?(false));
          fields.Add<POReceipt.canceled>(new bool?(true));
        }))))));
      }))));
      flows.Add<POReceiptType.poreturn>((Func<BoundedTo<POReceiptEntry, POReceipt>.Workflow.INeedStatesFlow, BoundedTo<POReceiptEntry, POReceipt>.Workflow.IConfigured>) (flow => (BoundedTo<POReceiptEntry, POReceipt>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POReceiptEntry, PXAutoAction<POReceipt>>>) (g => g.initializeState))));
        states.Add<POReceiptStatus.hold>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.releaseFromHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))));
        states.Add<POReceiptStatus.balanced>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.release), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.putOnHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.emailPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnInventoryIssueCreatedFromPOReturn))))));
        states.Add<POReceiptStatus.released>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createAPDocument), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printBillingDetail), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add<Intercompany>((Expression<Func<Intercompany, PXAction<POReceipt>>>) (e => e.generateSalesReturn), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))));
      })).WithTransitions((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.hold>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsReleased)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.balanced>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POReceiptStatus.hold>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.balanced>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.releaseFromHold))))));
        transitions.AddGroupFrom<POReceiptStatus.balanced>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.hold>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.putOnHold)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnInventoryIssueCreatedFromPOReturn)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.released>(new bool?(true))))));
        }));
      }))));
      flows.Add<POReceiptType.transferreceipt>((Func<BoundedTo<POReceiptEntry, POReceipt>.Workflow.INeedStatesFlow, BoundedTo<POReceiptEntry, POReceipt>.Workflow.IConfigured>) (flow => (BoundedTo<POReceiptEntry, POReceipt>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POReceiptEntry, PXAutoAction<POReceipt>>>) (g => g.initializeState))));
        states.Add<POReceiptStatus.hold>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.releaseFromHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))));
        states.Add<POReceiptStatus.balanced>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.release), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.putOnHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.emailPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOTransfer));
          handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnConfirmReceipt));
        }))));
        states.Add<POReceiptStatus.received>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.release), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.emailPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))).WithEventHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<POReceiptEntry, PXWorkflowEventHandler<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOTransfer))))).WithOnEnterAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (ass => ass.Add<POReceipt.received>(new bool?(true))))));
        states.Add<POReceiptStatus.released>((Func<BoundedTo<POReceiptEntry, POReceipt>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POReceiptEntry, POReceipt>.BaseFlowStep.IConfigured) state.WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createLCDocument), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printBillingDetail), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionState.IAllowOptionalConfig, BoundedTo<POReceiptEntry, POReceipt>.ActionState.IConfigured>) null);
        }))));
      })).WithTransitions((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.hold>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.received>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsReceived)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsReleased)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.balanced>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POReceiptStatus.hold>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.balanced>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.releaseFromHold))))));
        transitions.AddGroupFrom<POReceiptStatus.balanced>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.hold>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.putOnHold)).When((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.received>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnConfirmReceipt))));
          ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOTransfer)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.released>(new bool?(true))))));
        }));
        transitions.AddGroupFrom<POReceiptStatus.received>((Action<BoundedTo<POReceiptEntry, POReceipt>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.Transition.INeedTarget, BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured>) (t => (BoundedTo<POReceiptEntry, POReceipt>.Transition.IConfigured) t.To<POReceiptStatus.released>().IsTriggeredOn((Expression<Func<POReceiptEntry, PXWorkflowEventHandlerBase<POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOTransfer)).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fields => fields.Add<POReceipt.released>(new bool?(true))))))));
      }))));
    })).WithActions((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.initializeState), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.releaseFromHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fas => fas.Add<POReceipt.hold>(new bool?(false))))));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.putOnHold), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<POReceiptEntry, POReceipt>.Assignment.IContainerFillerFields>) (fas => fas.Add<POReceipt.hold>(new bool?(true))))));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.release), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createAPDocument), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createLCDocument), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.createReturn), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add<Intercompany>((Expression<Func<Intercompany, PXAction<POReceipt>>>) (e => e.generateSalesReturn), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (a => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) a.WithCategory(intercompanyCategory).IsHiddenWhen((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsNotIntercompany).IsDisabledWhen((BoundedTo<POReceiptEntry, POReceipt>.ISharedCondition) conditions.IsIntercompanySalesReturnGenerated)));
      actions.Add<Correction>((Expression<Func<Correction, PXAction<POReceipt>>>) (g => g.correctReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(correctionsCategory)));
      actions.Add<Correction>((Expression<Func<Correction, PXAction<POReceipt>>>) (g => g.cancelReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(correctionsCategory)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.emailPurchaseReceipt), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithPersistOptions((ActionPersistOptions) 2)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.assign), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory(otherCategory)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printBillingDetail), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory((PredefinedCategory) 2)));
      actions.Add((Expression<Func<POReceiptEntry, PXAction<POReceipt>>>) (g => g.printAllocated), (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured>) (c => (BoundedTo<POReceiptEntry, POReceipt>.ActionDefinition.IConfigured) c.WithCategory((PredefinedCategory) 2)));
    })).WithCategories((Action<BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(intercompanyCategory);
      categories.Add(correctionsCategory);
      categories.Add(printingEmailingCategory);
      categories.Add(otherCategory);
      categories.Update((FolderType) 2, (Func<BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.ConfiguratorCategory, BoundedTo<POReceiptEntry, POReceipt>.ActionCategory.ConfiguratorCategory>) (category => category.PlaceAfter(otherCategory)));
    })).WithHandlers((Action<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IContainerFillerHandlers>) (handlers =>
    {
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.InventoryReceiptCreated))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOReceipt))).UsesTargetAsPrimaryEntity()).DisplayName("IN Receipt Created")));
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.InventoryIssueCreated))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnInventoryIssueCreatedFromPOReturn))).UsesTargetAsPrimaryEntity()).DisplayName("IN Issue Created")));
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.InventoryReceiptCreated))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnInventoryReceiptCreatedFromPOTransfer))).UsesTargetAsPrimaryEntity()).DisplayName("IN Receipt Created")));
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.ReceiveConfirmed))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnConfirmReceipt))).UsesTargetAsPrimaryEntity()).DisplayName("Receipt Confirmed")));
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.CorrectionReceiptCreated))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnCorrectionReceiptCreated))).UsesPrimaryEntityGetter<SelectFromBase<POReceipt, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POReceipt.receiptNbr, Equal<BqlField<POReceipt.origReceiptNbr, IBqlString>.FromCurrent>>>>>.And<BqlOperand<POReceipt.receiptType, IBqlString>.IsEqual<BqlField<POReceipt.receiptType, IBqlString>.FromCurrent>>>>(false)));
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.CorrectionReceiptDeleted))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnCorrectionReceiptDeleted))).UsesPrimaryEntityGetter<SelectFromBase<POReceipt, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POReceipt.receiptNbr, Equal<BqlField<POReceipt.origReceiptNbr, IBqlString>.FromCurrent>>>>>.And<BqlOperand<POReceipt.receiptType, IBqlString>.IsEqual<BqlField<POReceipt.receiptType, IBqlString>.FromCurrent>>>>(false)));
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.CorrectionReceiptReleased))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnCorrectionReceiptReleased))).UsesPrimaryEntityGetter<SelectFromBase<POReceipt, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POReceipt.receiptNbr, Equal<BqlField<POReceipt.origReceiptNbr, IBqlString>.FromCurrent>>>>>.And<BqlOperand<POReceipt.receiptType, IBqlString>.IsEqual<BqlField<POReceipt.receiptType, IBqlString>.FromCurrent>>>>(false)));
      handlers.Add((Func<BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POReceipt>) ((BoundedTo<POReceiptEntry, POReceipt>.WorkflowEventHandlerDefinition.INeedSubscriber<POReceipt>) handler.WithTargetOf<POReceipt>().OfEntityEvent<POReceipt.Events>((Expression<Func<POReceipt.Events, PXEntityEvent<POReceipt>>>) (e => e.ReceiptCanceled))).Is((Expression<Func<POReceipt, PXWorkflowEventHandler<POReceipt, POReceipt>>>) (g => g.OnReceiptCancelled))).UsesTargetAsPrimaryEntity()));
    }))));

    BoundedTo<POReceiptEntry, POReceipt>.Condition Bql<T>() where T : IBqlUnary, new()
    {
      return context.Conditions.FromBql<T>();
    }
  }
}
