// Decompiled with JetBrains decompiler
// Type: PX.Objects.PO.POOrderEntry_Workflow
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Common;
using PX.Data;
using PX.Data.BQL;
using PX.Data.WorkflowAPI;
using PX.Objects.AP;
using PX.Objects.Common;
using PX.Objects.PM;
using PX.Objects.PO.GraphExtensions.POOrderEntryExt;
using System;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.PO;

public class POOrderEntry_Workflow : PXGraphExtension<POOrderEntry>
{
  public virtual void Configure(PXScreenConfiguration config)
  {
    POOrderEntry_Workflow.Configure(config.GetScreenConfigurationContext<POOrderEntry, POOrder>());
  }

  protected static void Configure(WorkflowContext<POOrderEntry, POOrder> context)
  {
    var conditions = new
    {
      IsOnHold = Bql<BqlOperand<POOrder.hold, IBqlBool>.IsEqual<True>>(),
      IsCancelled = Bql<BqlOperand<POOrder.cancelled, IBqlBool>.IsEqual<True>>(),
      IsPrinted = Bql<BqlOperand<POOrder.printedExt, IBqlBool>.IsEqual<True>>(),
      IsEmailed = Bql<BqlOperand<POOrder.emailedExt, IBqlBool>.IsEqual<True>>(),
      IsChangeOrder = Bql<BqlOperand<POOrder.behavior, IBqlString>.IsEqual<POBehavior.changeOrder>>(),
      HasAllLinesClosed = Bql<BqlOperand<POOrder.linesToCloseCntr, IBqlInt>.IsEqual<Zero>>(),
      HasAllLinesCompleted = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POOrder.linesToCloseCntr, NotEqual<Zero>>>>>.And<BqlOperand<POOrder.linesToCompleteCntr, IBqlInt>.IsEqual<Zero>>>(),
      IsNotIntercompany = Bql<BqlOperand<POOrder.isIntercompany, IBqlBool>.IsEqual<False>>(),
      IsIntercompanyOrderGenerated = Bql<BqlOperand<POOrder.intercompanySONbr, IBqlString>.IsNotNull>(),
      HasAllDropShipLinesLinked = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POOrder.dropShipOpenLinesCntr, Equal<Zero>>>>>.Or<BqlOperand<POOrder.dropShipNotLinkedLinesCntr, IBqlInt>.IsEqual<Zero>>>(),
      IsNewDropShipOrder = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POOrder.orderType, Equal<POOrderType.dropShip>>>>>.And<BqlOperand<POOrder.isLegacyDropShip, IBqlBool>.IsNotEqual<True>>>(),
      IsLinkedToSalesOrder = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POOrder.orderType, Equal<POOrderType.dropShip>>>>>.And<BqlOperand<POOrder.sOOrderNbr, IBqlString>.IsNotNull>>(),
      ProjectDropShipReceiptsNotAllowed = Bql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<POOrder.orderType, Equal<POOrderType.projectDropShip>>>>>.And<BqlOperand<POOrder.dropshipReceiptProcessing, IBqlString>.IsEqual<DropshipReceiptProcessingOption.skipReceipt>>>()
    }.AutoNameConditions();
    CommonActionCategories.Categories<POOrderEntry, POOrder> categories1 = CommonActionCategories.Get<POOrderEntry, POOrder>(context);
    BoundedTo<POOrderEntry, POOrder>.ActionCategory.IConfigured processingCategory = categories1.Processing;
    BoundedTo<POOrderEntry, POOrder>.ActionCategory.IConfigured dropShipCategory = context.Categories.CreateNew("Drop-Ship Category", (Func<BoundedTo<POOrderEntry, POOrder>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<POOrderEntry, POOrder>.ActionCategory.IConfigured>) (category => (BoundedTo<POOrderEntry, POOrder>.ActionCategory.IConfigured) category.DisplayName("Drop-Ship")));
    BoundedTo<POOrderEntry, POOrder>.ActionCategory.IConfigured intercompanyCategory = categories1.Intercompany;
    BoundedTo<POOrderEntry, POOrder>.ActionCategory.IConfigured printingEmailingCategory = categories1.PrintingAndEmailing;
    BoundedTo<POOrderEntry, POOrder>.ActionCategory.IConfigured otherCategory = categories1.Other;
    context.AddScreenConfigurationFor((Func<BoundedTo<POOrderEntry, POOrder>.ScreenConfiguration.IStartConfigScreen, BoundedTo<POOrderEntry, POOrder>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<POOrderEntry, POOrder>.ScreenConfiguration.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<POOrder.status>().FlowTypeIdentifierIs<POOrder.orderType>(true).WithFlows((Action<BoundedTo<POOrderEntry, POOrder>.Workflow.IContainerFillerFlows>) (flows =>
    {
      flows.Add<POOrderType.regularOrder>((Func<BoundedTo<POOrderEntry, POOrder>.Workflow.INeedStatesFlow, BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured>) (flow => (BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POOrderEntry, PXAutoAction<POOrder>>>) (g => g.initializeState))));
        states.Add<POOrderStatus.hold>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.recalculateDiscountsAction), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.addPOOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.addPOOrderLine), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.showItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.addSelectedItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.ownerID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))));
        states.Add<POOrderStatus.pendingPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontPrint), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.excludeFromIntercompanyProc>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnPrinted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnDoNotPrintChecked));
        }))));
        states.Add<POOrderStatus.pendingEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontEmail), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.excludeFromIntercompanyProc>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnDoNotEmailChecked));
        }))));
        states.Add<POOrderStatus.open>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createPOReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<Intercompany>((Expression<Func<Intercompany, PXAction<POOrder>>>) (e => e.generateSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.excludeFromIntercompanyProc>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.WithConnotation((ActionConnotation) 3)));
          actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
      })).WithTransitions((Action<BoundedTo<POOrderEntry, POOrder>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POOrderStatus.hold>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition9 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition10 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition9) ? condition9 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition9, BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted));
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition10);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition11 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition12 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition11) ? condition11 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition11, BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed));
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition12);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition13 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition14 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition13) ? condition13 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition13, conditions.HasAllLinesClosed);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition14);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition15 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition16 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition15) ? condition15 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition15, conditions.HasAllLinesCompleted);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition16);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold))));
        }));
        transitions.AddGroupFrom<POOrderStatus.pendingPrint>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed)).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).DoesNotPersist()));
        }));
        transitions.AddGroupFrom<POOrderStatus.pendingEmail>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked))));
        }));
        transitions.AddGroupFrom<POOrderStatus.open>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.cancelled>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.completed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.closed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder))));
        }));
      }))));
      flows.Add<POOrderType.dropShip>((Func<BoundedTo<POOrderEntry, POOrder>.Workflow.INeedStatesFlow, BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured>) (flow => (BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POOrderEntry, PXAutoAction<POOrder>>>) (g => g.initializeState))));
        states.Add<POOrderStatus.hold>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.recalculateDiscountsAction), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.addPOOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.addPOOrderLine), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.showItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.addSelectedItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.unlinkFromSO), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.convertToNormal), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.ownerID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
        }))));
        states.Add<POOrderStatus.pendingPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontPrint), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.unlinkFromSO), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnPrinted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnDoNotPrintChecked));
        }))));
        states.Add<POOrderStatus.pendingEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontEmail), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.unlinkFromSO), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnDoNotEmailChecked));
        }))));
        states.Add<POOrderStatus.awaitingLink>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.unlinkFromSO), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.convertToNormal), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.createSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesLinked));
        }))));
        states.Add<POOrderStatus.open>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createPOReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.unlinkFromSO), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.convertToNormal), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.createSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<Intercompany>((Expression<Func<Intercompany, PXAction<POOrder>>>) (e => e.generateSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesUnlinked));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.createSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.createSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
      })).WithTransitions((Action<BoundedTo<POOrderEntry, POOrder>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState));
            BoundedTo<POOrderEntry, POOrder>.Condition condition19 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition20 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition19) ? condition19 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition19, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition20);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POOrderStatus.hold>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition31 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition32 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition31) ? condition31 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition31, BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted));
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition32);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition33 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition34 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition33) ? condition33 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition33, BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed));
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition34);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition35 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition36 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition35) ? condition35 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition35, conditions.HasAllLinesClosed);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition36);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition37 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition38 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition37) ? condition37 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition37, conditions.HasAllLinesCompleted);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition38);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition39 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition40 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition39) ? condition39 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition39, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition40);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
        }));
        transitions.AddGroupFrom<POOrderStatus.pendingPrint>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed)).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted));
            BoundedTo<POOrderEntry, POOrder>.Condition condition45 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition46 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition45) ? condition45 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition45, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition46).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))));
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked));
            BoundedTo<POOrderEntry, POOrder>.Condition condition47 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition48 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition47) ? condition47 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition47, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition48).DoesNotPersist();
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).DoesNotPersist()));
        }));
        transitions.AddGroupFrom<POOrderStatus.pendingEmail>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder));
            BoundedTo<POOrderEntry, POOrder>.Condition condition53 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition54 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition53) ? condition53 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition53, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition54);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked));
            BoundedTo<POOrderEntry, POOrder>.Condition condition55 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition56 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition55) ? condition55 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition55, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition56);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked))));
        }));
        transitions.AddGroupFrom<POOrderStatus.awaitingLink>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesLinked))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.open>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesUnlinked));
            BoundedTo<POOrderEntry, POOrder>.Condition condition59 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition60 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition59) ? condition59 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition59, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition60);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.cancelled>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.completed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened));
            BoundedTo<POOrderEntry, POOrder>.Condition condition63 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition64 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition63) ? condition63 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition63, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition64);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.closed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.awaitingLink>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened));
            BoundedTo<POOrderEntry, POOrder>.Condition condition67 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.HasAllDropShipLinesLinked);
            BoundedTo<POOrderEntry, POOrder>.Condition condition68 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition67) ? condition67 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition67, conditions.IsNewDropShipOrder);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition68);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
      }))));
      flows.Add<POOrderType.projectDropShip>((Func<BoundedTo<POOrderEntry, POOrder>.Workflow.INeedStatesFlow, BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured>) (flow => (BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POOrderEntry, PXAutoAction<POOrder>>>) (g => g.initializeState))));
        states.Add<POOrderStatus.hold>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.recalculateDiscountsAction), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.showItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.addSelectedItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.ownerID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))));
        states.Add<POOrderStatus.pendingPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontPrint), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.excludeFromIntercompanyProc>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnPrinted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnDoNotPrintChecked));
        }))));
        states.Add<POOrderStatus.pendingEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontEmail), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.excludeFromIntercompanyProc>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnDoNotEmailChecked));
        }))));
        states.Add<POOrderStatus.open>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createPOReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.excludeFromIntercompanyProc>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.WithConnotation((ActionConnotation) 3)));
          actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
      })).WithTransitions((Action<BoundedTo<POOrderEntry, POOrder>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POOrderStatus.hold>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition77 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition78 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition77) ? condition77 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition77, BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted));
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition78);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition79 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition80 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition79) ? condition79 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition79, BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed));
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition80);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition81 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition82 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition81) ? condition81 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition81, conditions.HasAllLinesClosed);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition82);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition83 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition84 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition83) ? condition83 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition83, conditions.HasAllLinesCompleted);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition84);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold))));
        }));
        transitions.AddGroupFrom<POOrderStatus.pendingPrint>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed)).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnPrinted)).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.printed>(new bool?(true))))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotPrintChecked)).DoesNotPersist()));
        }));
        transitions.AddGroupFrom<POOrderStatus.pendingEmail>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnDoNotEmailChecked))));
        }));
        transitions.AddGroupFrom<POOrderStatus.open>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.cancelled>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.completed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.closed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
      }))));
      flows.Add<POOrderType.standardBlanket>((Func<BoundedTo<POOrderEntry, POOrder>.Workflow.INeedStatesFlow, BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured>) (flow => (BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POOrderEntry, PXAutoAction<POOrder>>>) (g => g.initializeState))));
        states.Add<POOrderStatus.hold>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.recalculateDiscountsAction), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.showItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.addSelectedItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField) x.IsDisabled()).IsHidden()));
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField) x.IsDisabled()).IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POOrderPrepayment>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField) c.IsDisabled()).IsHidden()));
        }))));
        states.Add<POOrderStatus.open>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField) x.IsDisabled()).IsHidden()));
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField) x.IsDisabled()).IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderPrepayment>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField) x.IsDisabled()).IsHidden()));
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField) x.IsDisabled()).IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderPrepayment>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.pendingPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) null);
        states.Add<POOrderStatus.pendingEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) null);
      })).WithTransitions((Action<BoundedTo<POOrderEntry, POOrder>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POOrderStatus.hold>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold))))));
        transitions.AddGroupFrom<POOrderStatus.open>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.cancelled>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
      }))));
      flows.Add<POOrderType.blanket>((Func<BoundedTo<POOrderEntry, POOrder>.Workflow.INeedStatesFlow, BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured>) (flow => (BoundedTo<POOrderEntry, POOrder>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IContainerFillerStates>) (states =>
      {
        states.Add("_", (Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) state.IsInitial((Expression<Func<POOrderEntry, PXAutoAction<POOrder>>>) (g => g.initializeState))));
        states.Add<POOrderStatus.hold>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.recalculateDiscountsAction), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.showItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.addSelectedItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddFields<POOrderEntry_Workflow.BlanketOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.ownerID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.workgroupID>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
        }))));
        states.Add<POOrderStatus.open>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddAllFields<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.controlTotal>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.approved>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesClosed));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) (state => (BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig) state.WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionState.IContainerFillerActions>) (actions =>
        {
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
          actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionState.IAllowOptionalConfig, BoundedTo<POOrderEntry, POOrder>.ActionState.IConfigured>) null);
        }))).WithFieldStates((Action<BoundedTo<POOrderEntry, POOrder>.FieldState.IContainerFillerFields>) (fields =>
        {
          fields.AddTable<POOrder>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POOrder.orderType>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.orderNbr>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POOrder.printed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.emailed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddField<POOrder.dontEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsHidden()));
          fields.AddTable<POLine>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddField<POLine.cancelled>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.completed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.promisedDate>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddField<POLine.closed>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) null);
          fields.AddFields<POOrderEntry_Workflow.DropShipOrderLineFields>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (x => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) x.IsHidden()));
          fields.AddAllFields<PORemitAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<PORemitContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipAddress>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddAllFields<POShipContact>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POTaxTran>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<POOrderDiscountDetail>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
          fields.AddTable<PX.Objects.CM.Extensions.CurrencyInfo>((Func<BoundedTo<POOrderEntry, POOrder>.FieldState.INeedAnyConfigField, BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.FieldState.IConfigured) c.IsDisabled()));
        }))).WithEventHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
        {
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesReopened));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnLinesCompleted));
          handlers.Add((Expression<Func<POOrderEntry, PXWorkflowEventHandler<POOrder>>>) (g => g.OnReleaseChangeOrder));
        }))));
        states.Add<POOrderStatus.pendingPrint>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) null);
        states.Add<POOrderStatus.pendingEmail>((Func<BoundedTo<POOrderEntry, POOrder>.FlowState.INeedAnyFlowStateConfig, BoundedTo<POOrderEntry, POOrder>.BaseFlowStep.IConfigured>) null);
      })).WithTransitions((Action<BoundedTo<POOrderEntry, POOrder>.Transition.IContainerFillerTransitions>) (transitions =>
      {
        transitions.AddGroupFrom("_", (Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesClosed)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState))));
        }));
        transitions.AddGroupFrom<POOrderStatus.hold>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition89 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition90 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition89) ? condition89 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition89, conditions.HasAllLinesClosed);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition90);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t =>
          {
            BoundedTo<POOrderEntry, POOrder>.Transition.IAllowOptionalConfig iallowOptionalConfig = t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold));
            BoundedTo<POOrderEntry, POOrder>.Condition condition91 = BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold);
            BoundedTo<POOrderEntry, POOrder>.Condition condition92 = BoundedTo<POOrderEntry, POOrder>.Condition.op_False(condition91) ? condition91 : BoundedTo<POOrderEntry, POOrder>.Condition.op_BitwiseAnd(condition91, conditions.HasAllLinesCompleted);
            return (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) iallowOptionalConfig.When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) condition92);
          }));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsOnHold))));
        }));
        transitions.AddGroupFrom<POOrderStatus.open>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.cancelled>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsCancelled)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted)).DoesNotPersist()));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.HasAllLinesCompleted)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.cancelled>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.completed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.closed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesClosed))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
        transitions.AddGroupFrom<POOrderStatus.closed>((Action<BoundedTo<POOrderEntry, POOrder>.Transition.ISourceContainerFillerTransitions>) (ts =>
        {
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.open>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesReopened))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.completed>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnLinesCompleted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.hold>().IsTriggeredOn((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsOnHold)));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingPrint>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsPrinted))));
          ts.Add((Func<BoundedTo<POOrderEntry, POOrder>.Transition.INeedTarget, BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured>) (t => (BoundedTo<POOrderEntry, POOrder>.Transition.IConfigured) t.To<POOrderStatus.pendingEmail>().IsTriggeredOn((Expression<Func<POOrderEntry, PXWorkflowEventHandlerBase<POOrder>>>) (g => g.OnReleaseChangeOrder)).When((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsEmailed))));
        }));
      }))));
    })).WithActions((Action<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.initializeState), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.releaseFromHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.hold>(new bool?(false))))));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.putOnHold), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<POOrder.hold>(new bool?(true));
        fas.Add<POOrder.printed>(new bool?(false));
        fas.Add<POOrder.emailed>(new bool?(false));
        fas.Add<POOrder.cancelled>(new bool?(false));
      })).IsDisabledWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsChangeOrder)));
      actions.Add<Prepayments>((Expression<Func<Prepayments, PXAction<POOrder>>>) (g => g.createPrepayment), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createPOReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).IsHiddenWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.ProjectDropShipReceiptsNotAllowed)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.createAPInvoice), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.complete), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.cancelled>(new bool?(true))))));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<POOrder.hold>(new bool?(true));
        fas.Add<POOrder.printed>(new bool?(false));
        fas.Add<POOrder.emailed>(new bool?(false));
        fas.Add<POOrder.cancelled>(new bool?(false));
      })).IsDisabledWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsChangeOrder)));
      actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.createSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(dropShipCategory)));
      actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.unlinkFromSO), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(dropShipCategory).IsHiddenWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsNewDropShipOrder)).IsDisabledWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsLinkedToSalesOrder))));
      actions.Add<DropShipLinksExt>((Expression<Func<DropShipLinksExt, PXAction<POOrder>>>) (g => g.convertToNormal), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(dropShipCategory).IsHiddenWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) BoundedTo<POOrderEntry, POOrder>.Condition.op_LogicalNot(conditions.IsNewDropShipOrder))));
      actions.Add<Intercompany>((Expression<Func<Intercompany, PXAction<POOrder>>>) (e => e.generateSalesOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (a => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) a.WithCategory(intercompanyCategory).IsHiddenWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsNotIntercompany).IsDisabledWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsIntercompanyOrderGenerated)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.printPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithPersistOptions((ActionPersistOptions) 2).MassProcessingScreen<POPrintOrder>().InBatchMode()));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontPrint), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).MassProcessingScreen<POPrintOrder>().InBatchMode().WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.dontPrint>(new bool?(true))))));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.emailPurchaseOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithPersistOptions((ActionPersistOptions) 2).MassProcessingScreen<POPrintOrder>().InBatchMode().WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.emailed>(new bool?(true))))));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.markAsDontEmail), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).MassProcessingScreen<POPrintOrder>().InBatchMode().WithFieldAssignments((Action<BoundedTo<POOrderEntry, POOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<POOrder.dontEmail>(new bool?(true))))));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.recalculateDiscountsAction), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(otherCategory)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory(otherCategory)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.vendorDetails), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory((PredefinedCategory) 2).WithPersistOptions((ActionPersistOptions) 2)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewPurchaseOrderReceipt), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.WithCategory((PredefinedCategory) 2).WithPersistOptions((ActionPersistOptions) 2)));
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.addPOOrder), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.addPOOrderLine), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<POOrderEntry, PXAction<POOrder>>>) (g => g.viewDemand), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) c.IsHiddenWhen((BoundedTo<POOrderEntry, POOrder>.ISharedCondition) conditions.IsNewDropShipOrder)));
      actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.showItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) null);
      actions.Add<POOrderSiteStatusLookupExt>((Expression<Func<POOrderSiteStatusLookupExt, PXAction<POOrder>>>) (g => g.addSelectedItems), (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) null);
      actions.AddNew("ShowPreferredVendorItemsGI", (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (a => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) a.DisplayName("Preferred Vendor Items").IsSidePanelScreen((Func<BoundedTo<POOrderEntry, POOrder>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<POOrderEntry, POOrder>.NavigationDefinition.IConfiguredSidePanel>) (sp => sp.NavigateToScreen("IN2025SP").WithIcon("badge").WithAssignments((Action<BoundedTo<POOrderEntry, POOrder>.NavigationParameter.IContainerFillerNavigationActionParameters>) (ass => ass.Add("VendorID", (Func<BoundedTo<POOrderEntry, POOrder>.NavigationParameter.INeedRightOperand, BoundedTo<POOrderEntry, POOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<POOrder.vendorID>()))))))));
      actions.AddNew("ShowVendorDetails", (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (a => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) a.DisplayName("Vendor Details").IsSidePanelScreen((Func<BoundedTo<POOrderEntry, POOrder>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<POOrderEntry, POOrder>.NavigationDefinition.IConfiguredSidePanel>) (sp => sp.NavigateToScreen<APDocumentEnq>().WithIcon("details").WithAssignments((Action<BoundedTo<POOrderEntry, POOrder>.NavigationParameter.IContainerFillerNavigationActionParameters>) (ass => ass.Add<APDocumentEnq.APDocumentFilter.vendorID>((Func<BoundedTo<POOrderEntry, POOrder>.NavigationParameter.INeedRightOperand, BoundedTo<POOrderEntry, POOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<POOrder.vendorID>()))))))));
      actions.AddNew("ReceiptLinesByPurchaseOrder", (Func<BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured>) (a => (BoundedTo<POOrderEntry, POOrder>.ActionDefinition.IConfigured) a.DisplayName("Receipt Lines by Purchase Order").IsSidePanelScreen((Func<BoundedTo<POOrderEntry, POOrder>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<POOrderEntry, POOrder>.NavigationDefinition.IConfiguredSidePanel>) (sp => sp.NavigateToScreen("PO3024BI").WithIcon("duplicate").WithAssignments((Action<BoundedTo<POOrderEntry, POOrder>.NavigationParameter.IContainerFillerNavigationActionParameters>) (ass => ass.Add("POOrder", (Func<BoundedTo<POOrderEntry, POOrder>.NavigationParameter.INeedRightOperand, BoundedTo<POOrderEntry, POOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<POOrder.orderNbr>()))))))));
    })).WithCategories((Action<BoundedTo<POOrderEntry, POOrder>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(dropShipCategory);
      categories.Add(intercompanyCategory);
      categories.Add(printingEmailingCategory);
      categories.Add(otherCategory);
      categories.Update((FolderType) 2, (Func<BoundedTo<POOrderEntry, POOrder>.ActionCategory.ConfiguratorCategory, BoundedTo<POOrderEntry, POOrder>.ActionCategory.ConfiguratorCategory>) (category => category.PlaceAfter(otherCategory)));
    })).WithHandlers((Action<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IContainerFillerHandlers>) (handlers =>
    {
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.LinesCompleted))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnLinesCompleted))).UsesTargetAsPrimaryEntity()).DisplayName("PO Lines Completed")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.LinesClosed))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnLinesClosed))).UsesTargetAsPrimaryEntity()).DisplayName("PO Lines Closed")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.LinesReopened))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnLinesReopened))).UsesTargetAsPrimaryEntity()).DisplayName("PO Lines Reopened")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.Printed))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnPrinted))).UsesTargetAsPrimaryEntity()).DisplayName("Printed")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.DoNotPrintChecked))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnDoNotPrintChecked))).UsesTargetAsPrimaryEntity()).DisplayName("Do Not Print Selected")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.DoNotEmailChecked))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnDoNotEmailChecked))).UsesTargetAsPrimaryEntity()).DisplayName("Do Not Email Selected")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.LinesLinked))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnLinesLinked))).UsesTargetAsPrimaryEntity()).DisplayName("PO Lines Linked")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.LinesUnlinked))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnLinesUnlinked))).UsesTargetAsPrimaryEntity()).DisplayName("PO Lines Unlinked")));
      handlers.Add((Func<BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<POOrder>) ((BoundedTo<POOrderEntry, POOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<POOrder>) handler.WithTargetOf<POOrder>().OfEntityEvent<POOrder.Events>((Expression<Func<POOrder.Events, PXEntityEvent<POOrder>>>) (e => e.ReleaseChangeOrder))).Is((Expression<Func<POOrder, PXWorkflowEventHandler<POOrder, POOrder>>>) (g => g.OnReleaseChangeOrder))).UsesTargetAsPrimaryEntity()).WithFieldAssignments((Action<BoundedTo<POOrder, POOrder>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<POOrder.printed>(new bool?(false));
        fas.Add<POOrder.emailed>(new bool?(false));
        fas.Add<POOrder.cancelled>(new bool?(false));
      }))).DisplayName("Change Order Released")));
    }))));

    BoundedTo<POOrderEntry, POOrder>.Condition Bql<T>() where T : IBqlUnary, new()
    {
      return context.Conditions.FromBql<T>();
    }
  }

  public static class ActionCategories
  {
    public const string DropShipCategoryID = "Drop-Ship Category";

    [PXLocalizable]
    public static class DisplayNames
    {
      public const string DropShip = "Drop-Ship";
    }
  }

  public class BlanketOrderLineFields : 
    TypeArrayOf<IBqlField>.FilledWith<POLine.orderedQty, POLine.nonOrderedQty>
  {
  }

  public class DropShipOrderLineFields : 
    TypeArrayOf<IBqlField>.FilledWith<POLine.sOOrderNbr, POLine.sOLineNbr, POLine.sOOrderStatus, POLine.sOLinkActive>
  {
  }
}
