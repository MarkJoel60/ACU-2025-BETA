// Decompiled with JetBrains decompiler
// Type: PX.Objects.RQ.RQRequisitionEntry_Workflow
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Common;
using PX.Data;
using PX.Data.BQL;
using PX.Data.BQL.Fluent;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Data.WorkflowAPI;
using PX.Objects.Common;
using PX.Objects.PO;
using System;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.RQ;

public class RQRequisitionEntry_Workflow : PXGraphExtension<RQRequisitionEntry>
{
  public virtual void Configure(PXScreenConfiguration config)
  {
    RQRequisitionEntry_Workflow.Configure(config.GetScreenConfigurationContext<RQRequisitionEntry, RQRequisition>());
  }

  protected static void Configure(
    WorkflowContext<RQRequisitionEntry, RQRequisition> context)
  {
    RQRequisitionEntry_Workflow.Conditions conditions = context.Conditions.GetPack<RQRequisitionEntry_Workflow.Conditions>();
    CommonActionCategories.Categories<RQRequisitionEntry, RQRequisition> categories1 = CommonActionCategories.Get<RQRequisitionEntry, RQRequisition>(context);
    BoundedTo<RQRequisitionEntry, RQRequisition>.ActionCategory.IConfigured processingCategory = categories1.Processing;
    BoundedTo<RQRequisitionEntry, RQRequisition>.ActionCategory.IConfigured printingEmailingCategory = categories1.PrintingAndEmailing;
    BoundedTo<RQRequisitionEntry, RQRequisition>.ActionCategory.IConfigured otherCategory = categories1.Other;
    context.AddScreenConfigurationFor((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ScreenConfiguration.IStartConfigScreen, BoundedTo<RQRequisitionEntry, RQRequisition>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<RQRequisitionEntry, RQRequisition>.ScreenConfiguration.IConfigured) ((BoundedTo<RQRequisitionEntry, RQRequisition>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<RQRequisition.status>().AddDefaultFlow((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Workflow.INeedStatesFlow, BoundedTo<RQRequisitionEntry, RQRequisition>.Workflow.IConfigured>) (flow => (BoundedTo<RQRequisitionEntry, RQRequisition>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IContainerFillerStates>) (flowStates =>
    {
      flowStates.Add("_", (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) flowState.IsInitial((Expression<Func<RQRequisitionEntry, PXAutoAction<RQRequisition>>>) (g => g.initializeState))));
      flowStates.Add<RQRequisitionStatus.hold>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) flowState.WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.releaseFromHold), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured) a.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ChooseVendor), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
      }))));
      flowStates.Add<RQRequisitionStatus.bidding>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ViewBidding), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.sendRequestToAllVendors), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.cancelRequest), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.requestForProposal), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.sendRequestToCurrentVendor), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ChooseVendor), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ResponseVendor), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
      }))).WithEventHandlers((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandler<RQRequisition>>>) (g => g.OnBiddingCompleted))))).WithFieldStates((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IContainerFillerFields>) (fieldStates =>
      {
        fieldStates.AddAllFields<RQRequisition>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
        fieldStates.AddField<RQRequisition.reqNbr>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddTable<RQRequisitionLine>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
        fieldStates.AddTable<POShipAddress>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
        fieldStates.AddTable<RQRequisitionContent>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
        fieldStates.AddField<RQRequisitionLine.requestedDate>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.promisedDate>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.cancelled>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
      }))));
      flowStates.Add<RQRequisitionStatus.pendingQuotation>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.createQTOrder), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.markQuoted), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.cancelRequest), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ViewBidding), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
      }))).WithFieldStates((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IContainerFillerFields>) (fieldStates =>
      {
        RQRequisitionEntry_Workflow.DisableWholeScreen(fieldStates);
        fieldStates.AddField<RQRequisitionLine.siteID>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.subItemID>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.uOM>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
      }))));
      flowStates.Add<RQRequisitionStatus.open>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.createPOOrder), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured) a.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.cancelRequest), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ViewBidding), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null);
      }))).WithEventHandlers((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add<RQRequisitionOrder, PX.Objects.SO.SOOrder>((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandler<RQRequisition, RQRequisitionOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnSOOrderUnlinked))))).WithFieldStates((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IContainerFillerFields>) (fieldStates =>
      {
        RQRequisitionEntry_Workflow.DisableWholeScreen(fieldStates);
        fieldStates.AddField<RQRequisitionLine.requestedDate>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.promisedDate>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.cancelled>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.siteID>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.subItemID>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
        fieldStates.AddField<RQRequisitionLine.uOM>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
      }))));
      flowStates.Add<RQRequisitionStatus.released>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ViewBidding), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null)))).WithEventHandlers((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers =>
      {
        handlers.Add<RQRequisitionOrder, PX.Objects.PO.POOrder>((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandler<RQRequisition, RQRequisitionOrder, PX.Objects.PO.POOrder>>>) (g => g.OnPOOrderUnlinked));
        handlers.Add<PX.Objects.SO.SOOrder>((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandler<RQRequisition, PX.Objects.SO.SOOrder>>>) (g => g.OnSalesOrderDeleted));
        handlers.Add<PX.Objects.PO.POOrder>((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandler<RQRequisition, PX.Objects.PO.POOrder>>>) (g => g.OnPurchaseOrderDeleted));
      }))).WithFieldStates(new Action<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IContainerFillerFields>(RQRequisitionEntry_Workflow.DisableWholeScreen))));
      flowStates.Add<RQRequisitionStatus.closed>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ViewBidding), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null)))).WithFieldStates(new Action<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IContainerFillerFields>(RQRequisitionEntry_Workflow.DisableWholeScreen))));
      flowStates.Add<RQRequisitionStatus.canceled>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<RQRequisitionEntry, RQRequisition>.BaseFlowStep.IConfigured) ((BoundedTo<RQRequisitionEntry, RQRequisition>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IAllowOptionalConfig, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionState.IConfigured>) null)))).WithFieldStates(new Action<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IContainerFillerFields>(RQRequisitionEntry_Workflow.DisableWholeScreen))));
    })).WithTransitions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IContainerFillerTransitions>) (transitions =>
    {
      transitions.AddGroupFrom("_", (Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.canceled>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsCancelled)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.hold>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsOnHold)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.released>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsReleased)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.closed>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.HasZeroOpenOrderQty)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.open>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsQuoted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.pendingQuotation>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsBiddingCompleted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.bidding>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState))));
      }));
      transitions.AddGroupFrom<RQRequisitionStatus.hold>((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.open>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.releaseFromHold)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsQuoted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.pendingQuotation>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.releaseFromHold)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsBiddingCompleted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.bidding>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.releaseFromHold))));
      }));
      transitions.AddGroupFrom<RQRequisitionStatus.bidding>((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.hold>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsOnHold)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.open>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandlerBase<RQRequisition>>>) (g => g.OnBiddingCompleted)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsQuoted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.pendingQuotation>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandlerBase<RQRequisition>>>) (g => g.OnBiddingCompleted)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsBiddingCompleted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.canceled>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.cancelRequest)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsCancelled)));
      }));
      transitions.AddGroupFrom<RQRequisitionStatus.pendingQuotation>((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.hold>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsOnHold)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.canceled>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.cancelRequest)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsCancelled)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.open>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.markQuoted)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsQuoted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.open>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.createQTOrder)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsQuoted)));
      }));
      transitions.AddGroupFrom<RQRequisitionStatus.open>((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.hold>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsOnHold)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.pendingQuotation>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandlerBase<RQRequisition>>>) (g => g.OnSOOrderUnlinked)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsBiddingCompleted)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.bidding>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandlerBase<RQRequisition>>>) (g => g.OnSOOrderUnlinked))));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.released>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.createPOOrder)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsReleased)));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.canceled>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.cancelRequest)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsCancelled)));
      }));
      transitions.AddGroupFrom<RQRequisitionStatus.released>((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts => { }));
      transitions.AddGroupFrom<RQRequisitionStatus.canceled>((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.hold>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold)).When((BoundedTo<RQRequisitionEntry, RQRequisition>.ISharedCondition) conditions.IsOnHold)))));
      transitions.AddGroupFrom<RQRequisitionStatus.released>((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.open>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandlerBase<RQRequisition>>>) (g => g.OnPurchaseOrderDeleted))));
        ts.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.INeedTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured>) (t => (BoundedTo<RQRequisitionEntry, RQRequisition>.Transition.IConfigured) t.To<RQRequisitionStatus.open>().IsTriggeredOn((Expression<Func<RQRequisitionEntry, PXWorkflowEventHandlerBase<RQRequisition>>>) (g => g.OnSalesOrderDeleted))));
      }));
    })))).WithActions((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.initializeState), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.IsHiddenAlways()));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.releaseFromHold), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Assignment.IContainerFillerFields>) (fass => fass.Add<RQRequisition.hold>(new bool?(false))))));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.putOnHold), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Assignment.IContainerFillerFields>) (fass => fass.Add<RQRequisition.hold>(new bool?(true))))));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ViewBidding), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(processingCategory)));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.createQTOrder), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Assignment.IContainerFillerFields>) (fass => fass.Add<RQRequisition.quoted>(new bool?(true)))).MassProcessingScreen<RQRequisitionProcess>().InBatchMode()));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.markQuoted), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Assignment.IContainerFillerFields>) (fass => fass.Add<RQRequisition.quoted>(new bool?(true))))));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.createPOOrder), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Assignment.IContainerFillerFields>) (fass => fass.Add<RQRequisition.released>(new bool?(true)))).MassProcessingScreen<RQRequisitionProcess>().InBatchMode()));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.cancelRequest), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.Assignment.IContainerFillerFields>) (fass => fass.Add<RQRequisition.cancelled>(new bool?(true))))));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.requestForProposal), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(printingEmailingCategory)));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.sendRequestToAllVendors), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(printingEmailingCategory)));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.validateAddresses), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) (a => (BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured) a.WithCategory(otherCategory)));
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ChooseVendor), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.ResponseVendor), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) null);
      actions.Add((Expression<Func<RQRequisitionEntry, PXAction<RQRequisition>>>) (g => g.sendRequestToCurrentVendor), (Func<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<RQRequisitionEntry, RQRequisition>.ActionDefinition.IConfigured>) null);
    })).WithCategories((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(printingEmailingCategory);
      categories.Add(otherCategory);
    })).WithHandlers((Action<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IContainerFillerHandlers>) (handlers =>
    {
      handlers.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<RQRequisition>) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedSubscriber<RQRequisition>) handler.WithTargetOf<RQRequisition>().OfEntityEvent<RQRequisition.Events>((Expression<Func<RQRequisition.Events, PXEntityEvent<RQRequisition>>>) (e => e.BiddingCompleted))).Is((Expression<Func<RQRequisition, PXWorkflowEventHandler<RQRequisition, RQRequisition>>>) (g => g.OnBiddingCompleted))).UsesTargetAsPrimaryEntity()));
      handlers.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<RQRequisitionOrder, PX.Objects.SO.SOOrder>) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedSubscriber<RQRequisitionOrder, PX.Objects.SO.SOOrder>) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventContainer<RQRequisitionOrder, PX.Objects.SO.SOOrder>) handler.WithTargetOf<RQRequisitionOrder>().WithParametersOf<PX.Objects.SO.SOOrder>()).OfEntityEvent<RQRequisitionOrder.Events>((Expression<Func<RQRequisitionOrder.Events, PXEntityEvent<RQRequisitionOrder, PX.Objects.SO.SOOrder>>>) (e => e.SOOrderUnlinked))).Is((Expression<Func<RQRequisitionOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, RQRequisitionOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnSOOrderUnlinked))).UsesPrimaryEntityGetter<SelectFromBase<RQRequisition, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlOperand<RQRequisition.reqNbr, IBqlString>.IsEqual<BqlField<RQRequisitionOrder.reqNbr, IBqlString>.FromCurrent>>>(false)));
      handlers.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<RQRequisitionOrder, PX.Objects.PO.POOrder>) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedSubscriber<RQRequisitionOrder, PX.Objects.PO.POOrder>) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventContainer<RQRequisitionOrder, PX.Objects.PO.POOrder>) handler.WithTargetOf<RQRequisitionOrder>().WithParametersOf<PX.Objects.PO.POOrder>()).OfEntityEvent<RQRequisitionOrder.Events>((Expression<Func<RQRequisitionOrder.Events, PXEntityEvent<RQRequisitionOrder, PX.Objects.PO.POOrder>>>) (e => e.POOrderUnlinked))).Is((Expression<Func<RQRequisitionOrder, PXWorkflowEventHandler<PX.Objects.PO.POOrder, RQRequisitionOrder, PX.Objects.PO.POOrder>>>) (g => g.OnPOOrderUnlinked))).UsesPrimaryEntityGetter<SelectFromBase<RQRequisition, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlOperand<RQRequisition.reqNbr, IBqlString>.IsEqual<BqlField<RQRequisitionOrder.reqNbr, IBqlString>.FromCurrent>>>(false)));
      handlers.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.OrderDeleted))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<RQRequisition, PX.Objects.SO.SOOrder>>>) (g => g.OnSalesOrderDeleted))).UsesPrimaryEntityGetter<SelectFromBase<RQRequisition, TypeArrayOf<IFbqlJoin>.Append<TypeArrayOf<IFbqlJoin>.Empty, FbqlJoins.Inner<RQRequisitionOrder>.On<RQRequisitionOrder.FK.Requisition>>>.Where<KeysRelation<CompositeKey<Field<RQRequisitionOrder.orderType>.IsRelatedTo<PX.Objects.SO.SOOrder.orderType>, Field<RQRequisitionOrder.orderNbr>.IsRelatedTo<PX.Objects.SO.SOOrder.orderNbr>>.WithTablesOf<PX.Objects.SO.SOOrder, RQRequisitionOrder>, PX.Objects.SO.SOOrder, RQRequisitionOrder>.SameAsCurrent>>(false)));
      handlers.Add((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.PO.POOrder>) ((BoundedTo<RQRequisitionEntry, RQRequisition>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.PO.POOrder>) handler.WithTargetOf<PX.Objects.PO.POOrder>().OfEntityEvent<PX.Objects.PO.POOrder.Events>((Expression<Func<PX.Objects.PO.POOrder.Events, PXEntityEvent<PX.Objects.PO.POOrder>>>) (e => e.OrderDeleted))).Is((Expression<Func<PX.Objects.PO.POOrder, PXWorkflowEventHandler<RQRequisition, PX.Objects.PO.POOrder>>>) (g => g.OnPurchaseOrderDeleted))).UsesPrimaryEntityGetter<SelectFromBase<RQRequisition, TypeArrayOf<IFbqlJoin>.Append<TypeArrayOf<IFbqlJoin>.Empty, FbqlJoins.Inner<RQRequisitionOrder>.On<RQRequisitionOrder.FK.Requisition>>>.Where<KeysRelation<CompositeKey<Field<RQRequisitionOrder.orderType>.IsRelatedTo<PX.Objects.PO.POOrder.orderType>, Field<RQRequisitionOrder.orderNbr>.IsRelatedTo<PX.Objects.PO.POOrder.orderNbr>>.WithTablesOf<PX.Objects.PO.POOrder, RQRequisitionOrder>, PX.Objects.PO.POOrder, RQRequisitionOrder>.SameAsCurrent>>(false)));
    }))));
  }

  public static void DisableWholeScreen(
    BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IContainerFillerFields fieldStates)
  {
    fieldStates.AddAllFields<RQRequisition>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
    fieldStates.AddField<RQRequisition.reqNbr>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) null);
    fieldStates.AddTable<RQRequisitionLine>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
    fieldStates.AddTable<POShipAddress>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
    fieldStates.AddTable<POShipContact>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
    fieldStates.AddTable<PX.Objects.PO.PORemitAddress>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
    fieldStates.AddTable<PX.Objects.PO.PORemitContact>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
    fieldStates.AddTable<RQRequisitionContent>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
    fieldStates.AddTable<PX.Objects.CM.CurrencyInfo>((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.INeedAnyConfigField, BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured>) (fs => (BoundedTo<RQRequisitionEntry, RQRequisition>.FieldState.IConfigured) fs.IsDisabled()));
  }

  public class Conditions : BoundedTo<RQRequisitionEntry, RQRequisition>.Condition.Pack
  {
    public BoundedTo<RQRequisitionEntry, RQRequisition>.Condition IsCancelled
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Condition.ConditionBuilder, BoundedTo<RQRequisitionEntry, RQRequisition>.Condition>) (b => b.FromBql<BqlOperand<RQRequisition.cancelled, IBqlBool>.IsEqual<True>>()), nameof (IsCancelled));
      }
    }

    public BoundedTo<RQRequisitionEntry, RQRequisition>.Condition IsOnHold
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Condition.ConditionBuilder, BoundedTo<RQRequisitionEntry, RQRequisition>.Condition>) (b => b.FromBql<BqlOperand<RQRequisition.hold, IBqlBool>.IsEqual<True>>()), nameof (IsOnHold));
      }
    }

    public BoundedTo<RQRequisitionEntry, RQRequisition>.Condition IsReleased
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Condition.ConditionBuilder, BoundedTo<RQRequisitionEntry, RQRequisition>.Condition>) (b => b.FromBql<BqlOperand<RQRequisition.released, IBqlBool>.IsEqual<True>>()), nameof (IsReleased));
      }
    }

    public BoundedTo<RQRequisitionEntry, RQRequisition>.Condition HasZeroOpenOrderQty
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Condition.ConditionBuilder, BoundedTo<RQRequisitionEntry, RQRequisition>.Condition>) (b => b.FromBql<BqlOperand<RQRequisition.openOrderQty, IBqlDecimal>.IsEqual<Zero>>()), nameof (HasZeroOpenOrderQty));
      }
    }

    public BoundedTo<RQRequisitionEntry, RQRequisition>.Condition IsQuoted
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Condition.ConditionBuilder, BoundedTo<RQRequisitionEntry, RQRequisition>.Condition>) (b => b.FromBql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<RQRequisition.biddingComplete, Equal<True>>>>>.And<BqlOperand<RQRequisition.quoted, IBqlBool>.IsEqual<True>>>()), nameof (IsQuoted));
      }
    }

    public BoundedTo<RQRequisitionEntry, RQRequisition>.Condition IsBiddingCompleted
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<RQRequisitionEntry, RQRequisition>.Condition.ConditionBuilder, BoundedTo<RQRequisitionEntry, RQRequisition>.Condition>) (b => b.FromBql<BqlOperand<RQRequisition.biddingComplete, IBqlBool>.IsEqual<True>>()), nameof (IsBiddingCompleted));
      }
    }
  }
}
