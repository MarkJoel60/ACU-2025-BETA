// Decompiled with JetBrains decompiler
// Type: PX.Objects.CA.CABankTranRule
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Data;
using PX.Data.BQL;
using PX.Data.EP;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Objects.GL;
using System;
using System.Text.RegularExpressions;

#nullable enable
namespace PX.Objects.CA;

/// <summary>
/// The rule that is used to automatically generate documents
/// from <see cref="T:PX.Objects.CA.CABankTran">bank transactions</see> during
/// the auto-matching process.
/// </summary>
[PXPrimaryGraph(typeof (CABankTranRuleMaint))]
[PXCacheName("CA Bank Transactions Rule")]
[Serializable]
public class CABankTranRule : PXBqlTable, IBqlTable, IBqlTableSystemDataStorage
{
  /// <summary>
  /// Identifier of the rule. Database autogenerated identity key.
  /// </summary>
  [PXDBIdentity(IsKey = true)]
  [PXSelector(typeof (CABankTranRule.ruleID), DescriptionField = typeof (CABankTranRule.description))]
  [PXUIField(DisplayName = "Rule ID")]
  public virtual int? RuleID { get; set; }

  /// <summary>
  /// Description of the rule. Does not affect any functionality.
  /// </summary>
  [PXDBString(256 /*0x0100*/, IsUnicode = true)]
  [PXDefault]
  [PXUIField(DisplayName = "Rule Description")]
  [PXFieldDescription]
  public virtual 
  #nullable disable
  string Description { get; set; }

  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Active")]
  public virtual bool? IsActive { get; set; }

  /// <summary>
  /// The <see cref="T:PX.Objects.CA.CashAccount">Cash Account</see> for the rule. When specified, the rule will be applied
  /// only to the transactions on this Cash Account.
  /// </summary>
  /// <value>
  /// Corresponds to the <see cref="P:PX.Objects.CA.CashAccount.CashAccountID" /> field.
  /// </value>
  [CashAccount]
  public virtual int? BankTranCashAccountID { get; set; }

  /// <summary>
  /// Indicates whether this rule should be applied to receipt or disbursement bank transactions.
  /// </summary>
  /// <value>
  /// Corresponds to the <see cref="P:PX.Objects.CA.CABankTran.DrCr" /> field. Mandatory.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PXDefault("C")]
  [CADrCr.List]
  [PXUIField(DisplayName = "Debit/Credit")]
  public virtual string BankDrCr { get; set; }

  /// <summary>
  /// Code of the <see cref="T:PX.Objects.CM.Currency">Currency</see>.
  /// If specified, the rule will be applied only to the transactions in the respective currency.
  /// </summary>
  [PXDBString(5, IsUnicode = true)]
  [PXSelector(typeof (PX.Objects.CM.Currency.curyID))]
  [PXUIField(DisplayName = "Currency")]
  public virtual string TranCuryID { get; set; }

  /// <summary>The mode of the transaction amount matching.</summary>
  /// <value>
  /// The following options are available:
  /// <c>"N"</c> (None): The amount criterion is not used;
  /// <c>"E"</c> (Equal): The transaction amount must be equal to the number specified in the Amount box;
  /// <c>"B"</c> (Between): The transaction amount must be in the range of the numbers specified in the Amount and the Max. Amount boxes.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PXDefault("N")]
  [MatchingMode.Amount]
  [PXUIField(DisplayName = "Matching Mode")]
  public virtual string AmountMatchingMode { get; set; }

  /// <summary>
  /// Transaction amount in the currency of the transaction.
  /// When specified together with appropriate value in the <see cref="P:PX.Objects.CA.CABankTranRule.AmountMatchingMode" /> field,
  /// the rule will be applied only to the transactions with matching amount.
  /// In case the <see cref="P:PX.Objects.CA.CABankTranRule.AmountMatchingMode" /> is set to "Between",
  /// the value in this field is used as a lower bound for transaction amount.
  /// </summary>
  /// <value>
  /// Corresponds to the <see cref="P:PX.Objects.CA.CABankTran.CuryTranAmt" /> field.
  /// </value>
  [PXDBDecimal(4)]
  [PXDefault]
  [PXUIField(DisplayName = "Amount")]
  public virtual Decimal? CuryTranAmt { get; set; }

  /// <summary>
  /// Transaction amount in the currency of the transaction.
  /// When specified together with appropriate value in the <see cref="P:PX.Objects.CA.CABankTranRule.AmountMatchingMode" /> field,
  /// the rule will be applied only to the transactions with matching amount.
  /// In case the <see cref="P:PX.Objects.CA.CABankTranRule.AmountMatchingMode" /> is set to "Between",
  /// the value in this field is used as a lower bound for transaction amount.
  /// </summary>
  /// <value>
  /// Corresponds to the <see cref="!:CABankTran.CuryMinTranAmt" /> field.
  /// </value>
  [PXDecimal(4)]
  [PXDefault]
  [PXUIField(DisplayName = "Min. Amount")]
  public virtual Decimal? CuryMinTranAmt
  {
    get => this.CuryTranAmt;
    set => this.CuryTranAmt = value;
  }

  /// <summary>
  /// Maximum transaction amount in the currency of the transaction, which the rule should match.
  /// Used only when the <see cref="P:PX.Objects.CA.CABankTranRule.AmountMatchingMode" /> is set to "Between"
  /// </summary>
  /// <value>
  /// Matching is done on the <see cref="P:PX.Objects.CA.CABankTran.CuryTranAmt" /> field.
  /// </value>
  [PXDBDecimal(4)]
  [PXDefault]
  [PXUIField(DisplayName = "Max. Amount")]
  public virtual Decimal? MaxCuryTranAmt { get; set; }

  /// <summary>The transaction code that the rule should match.</summary>
  /// <value>
  /// Corresponds to the <see cref="P:PX.Objects.CA.CABankTran.TranCode" /> field.
  /// </value>
  [PXDBString(35, IsUnicode = true)]
  [PXUIField(DisplayName = "Tran. Code")]
  public virtual string TranCode { get; set; }

  /// <summary>
  /// Represents the text used to identify transactions, to which the rule should be applied.
  /// Transaction must contain the text in the <see cref="P:PX.Objects.CA.CABankTran.TranDesc">description</see>.
  /// </summary>
  [PXDBString(512 /*0x0200*/, IsUnicode = true)]
  [PXUIField(DisplayName = "Tran. Description")]
  public virtual string BankTranDescription { get; set; }

  /// <summary>
  /// Indicates whether the case should be matched when the system attempts to apply the rule.
  /// </summary>
  /// <value>
  /// When set to <c>true</c> the <see cref="P:PX.Objects.CA.CABankTran.TranDesc">description</see> of the transactions
  /// will be scanned for presence of the <see cref="P:PX.Objects.CA.CABankTranRule.BankTranDescription">specified text</see>
  /// with respect to case. Otherwise, the case will be ignored during string comparison.
  /// Defaults to <c>false</c>.
  /// </value>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Match Case")]
  public virtual bool? MatchDescriptionCase { get; set; }

  /// <summary>
  /// When set to <c>true</c>, indicates that the system must treat '*' and '?' characters in the <see cref="P:PX.Objects.CA.CABankTranRule.BankTranDescription" />
  /// as wildcards ('*' matches 0 or more arbitrary symbols, '?' matches one arbitrary symbol).
  /// </summary>
  /// <value>
  /// Defaults to <c>false</c>.
  /// </value>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Use Wildcards (*, ?)")]
  public virtual bool? UseDescriptionWildcards { get; set; }

  private string Pattern
  {
    get
    {
      string str = Regex.Escape(this.BankTranDescription ?? "");
      return !this.UseDescriptionWildcards.GetValueOrDefault() ? str : $"^{str.Replace("\\*", ".*").Replace("\\?", ".")}$";
    }
  }

  public Regex Regex
  {
    get
    {
      return new Regex(this.Pattern, this.MatchDescriptionCase.GetValueOrDefault() ? RegexOptions.None : RegexOptions.IgnoreCase);
    }
  }

  /// <summary>
  /// The payee/payer name, if any, specified for a transaction rule.
  /// </summary>
  [PXDBString(256 /*0x0100*/, IsUnicode = true)]
  [PXUIField(DisplayName = "Payee/Payer", Visible = true)]
  public virtual string PayeeName { get; set; }

  /// <summary>
  /// When set to <c>true</c>, indicates that the system must treat '*' and '?' characters in the <see cref="P:PX.Objects.CA.CABankTranRule.PayeeName" />
  /// as wildcards ('*' matches 0 or more arbitrary symbols, '?' matches one arbitrary symbol).
  /// </summary>
  /// <value>
  /// Defaults to <c>false</c>.
  /// </value>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Use Wildcards (*, ?)")]
  public virtual bool? UsePayeeNameWildcards { get; set; }

  [PXDBString(1, IsFixed = true)]
  [PXUIField(DisplayName = "Action")]
  [PXDefault("C")]
  [RuleAction.List]
  public virtual string Action { get; set; }

  /// <summary>The module of the document generated by the rule.</summary>
  /// <value>
  /// Default is "CA". Now this is the only supported value. Mandatory.
  /// </value>
  [PXDBString(2, IsFixed = true)]
  [PXDefault("CA")]
  [PXUIField(DisplayName = "Resulting Document Module", Visible = false, Enabled = false)]
  public virtual string DocumentModule { get; set; }

  /// <summary>
  /// Identifier of the <see cref="T:PX.Objects.CA.CAEntryType" /> of the document generated by the rule.
  /// </summary>
  /// <value>
  /// Corresponds to the <see cref="!:CAEntryType.EntryTypeID" /> field. Mandatory.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Search2<CAEntryType.entryTypeId, LeftJoin<CashAccountETDetail, On<CashAccountETDetail.entryTypeID, Equal<CAEntryType.entryTypeId>, And<CashAccountETDetail.cashAccountID, Equal<Current<CABankTranRule.bankTranCashAccountID>>>>>, Where<CAEntryType.module, Equal<Current<CABankTranRule.documentModule>>, And<CAEntryType.drCr, Equal<Current<CABankTranRule.bankDrCr>>, And<Where<CashAccountETDetail.cashAccountID, Equal<Current<CABankTranRule.bankTranCashAccountID>>, Or<Current<CABankTranRule.bankTranCashAccountID>, IsNull>>>>>>), DescriptionField = typeof (CAEntryType.descr))]
  [PXUIField(DisplayName = "Resulting Entry Type")]
  [PXDefault]
  public virtual string DocumentEntryTypeID { get; set; }

  [PXNote]
  public virtual Guid? NoteID { get; set; }

  [PXDBCreatedByID]
  public virtual Guid? CreatedByID { get; set; }

  [PXDBCreatedByScreenID]
  public virtual string CreatedByScreenID { get; set; }

  [PXDBCreatedDateTime]
  [PXUIField(DisplayName = "Created On", Enabled = false, IsReadOnly = true)]
  public virtual DateTime? CreatedDateTime { get; set; }

  [PXDBLastModifiedByID]
  public virtual Guid? LastModifiedByID { get; set; }

  [PXDBLastModifiedByScreenID]
  public virtual string LastModifiedByScreenID { get; set; }

  [PXDBLastModifiedDateTime]
  [PXUIField(DisplayName = "Last Modified On", Enabled = false, IsReadOnly = true)]
  public virtual DateTime? LastModifiedDateTime { get; set; }

  [PXDBTimestamp]
  public virtual byte[] tstamp { get; set; }

  public class PK : PrimaryKeyOf<CABankTranRule>.By<CABankTranRule.ruleID>
  {
    public static CABankTranRule Find(PXGraph graph, int? ruleID, PKFindOptions options = 0)
    {
      return (CABankTranRule) PrimaryKeyOf<CABankTranRule>.By<CABankTranRule.ruleID>.FindBy(graph, (object) ruleID, options);
    }
  }

  public static class FK
  {
    public class CashAccount : 
      PrimaryKeyOf<CashAccount>.By<CashAccount.cashAccountID>.ForeignKeyOf<CABankTranRule>.By<CABankTranRule.bankTranCashAccountID>
    {
    }

    public class Currency : 
      PrimaryKeyOf<PX.Objects.CM.Currency>.By<PX.Objects.CM.Currency.curyID>.ForeignKeyOf<CABankTranRule>.By<CABankTranRule.tranCuryID>
    {
    }

    public class ResultingEntryType : 
      PrimaryKeyOf<CAEntryType>.By<CAEntryType.entryTypeId>.ForeignKeyOf<CABankTranRule>.By<CABankTranRule.documentEntryTypeID>
    {
    }
  }

  public abstract class ruleID : BqlType<
  #nullable enable
  IBqlInt, int>.Field<
  #nullable disable
  CABankTranRule.ruleID>
  {
  }

  public abstract class description : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  CABankTranRule.description>
  {
  }

  public abstract class isActive : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  CABankTranRule.isActive>
  {
  }

  public abstract class bankTranCashAccountID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    CABankTranRule.bankTranCashAccountID>
  {
  }

  public abstract class bankDrCr : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  CABankTranRule.bankDrCr>
  {
  }

  public abstract class tranCuryID : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  CABankTranRule.tranCuryID>
  {
  }

  public abstract class amountMatchingMode : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    CABankTranRule.amountMatchingMode>
  {
  }

  public abstract class curyTranAmt : BqlType<
  #nullable enable
  IBqlDecimal, Decimal>.Field<
  #nullable disable
  CABankTranRule.curyTranAmt>
  {
  }

  public abstract class curyMinTranAmt : 
    BqlType<
    #nullable enable
    IBqlDecimal, Decimal>.Field<
    #nullable disable
    CABankTranRule.curyMinTranAmt>
  {
  }

  public abstract class maxCuryTranAmt : 
    BqlType<
    #nullable enable
    IBqlDecimal, Decimal>.Field<
    #nullable disable
    CABankTranRule.maxCuryTranAmt>
  {
  }

  public abstract class tranCode : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  CABankTranRule.tranCode>
  {
  }

  public abstract class bankTranDescription : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    CABankTranRule.bankTranDescription>
  {
  }

  public abstract class matchDescriptionCase : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    CABankTranRule.matchDescriptionCase>
  {
  }

  public abstract class useDescriptionWildcards : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    CABankTranRule.useDescriptionWildcards>
  {
  }

  public abstract class payeeName : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  CABankTranRule.payeeName>
  {
  }

  public abstract class usePayeeNameWildcards : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    CABankTranRule.usePayeeNameWildcards>
  {
  }

  public abstract class action : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  CABankTranRule.action>
  {
  }

  public abstract class documentModule : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    CABankTranRule.documentModule>
  {
  }

  public abstract class documentEntryTypeID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    CABankTranRule.documentEntryTypeID>
  {
  }

  public abstract class noteID : BqlType<
  #nullable enable
  IBqlGuid, Guid>.Field<
  #nullable disable
  CABankTranRule.noteID>
  {
  }

  public abstract class createdByID : BqlType<
  #nullable enable
  IBqlGuid, Guid>.Field<
  #nullable disable
  CABankTranRule.createdByID>
  {
  }

  public abstract class createdByScreenID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    CABankTranRule.createdByScreenID>
  {
  }

  public abstract class createdDateTime : 
    BqlType<
    #nullable enable
    IBqlDateTime, DateTime>.Field<
    #nullable disable
    CABankTranRule.createdDateTime>
  {
  }

  public abstract class lastModifiedByID : 
    BqlType<
    #nullable enable
    IBqlGuid, Guid>.Field<
    #nullable disable
    CABankTranRule.lastModifiedByID>
  {
  }

  public abstract class lastModifiedByScreenID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    CABankTranRule.lastModifiedByScreenID>
  {
  }

  public abstract class lastModifiedDateTime : 
    BqlType<
    #nullable enable
    IBqlDateTime, DateTime>.Field<
    #nullable disable
    CABankTranRule.lastModifiedDateTime>
  {
  }

  public abstract class Tstamp : BqlType<
  #nullable enable
  IBqlByteArray, byte[]>.Field<
  #nullable disable
  CABankTranRule.Tstamp>
  {
  }
}
