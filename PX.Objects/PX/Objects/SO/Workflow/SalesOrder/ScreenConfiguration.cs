// Decompiled with JetBrains decompiler
// Type: PX.Objects.SO.Workflow.SalesOrder.ScreenConfiguration
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Common;
using PX.Data;
using PX.Data.BQL;
using PX.Data.BQL.Fluent;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Data.WorkflowAPI;
using PX.Objects.AR;
using PX.Objects.Common;
using PX.Objects.CS;
using PX.Objects.SO.DAC.Unbound;
using PX.Objects.SO.GraphExtensions.SOOrderEntryExt;
using System;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.SO.Workflow.SalesOrder;

public class ScreenConfiguration : PXGraphExtension<SOOrderEntry>
{
  public virtual void Configure(PXScreenConfiguration config)
  {
    ScreenConfiguration.Configure(config.GetScreenConfigurationContext<SOOrderEntry, PX.Objects.SO.SOOrder>());
  }

  protected static void Configure(WorkflowContext<SOOrderEntry, PX.Objects.SO.SOOrder> context)
  {
    ScreenConfiguration.Conditions conditions = context.Conditions.GetPack<ScreenConfiguration.Conditions>();
    CommonActionCategories.Categories<SOOrderEntry, PX.Objects.SO.SOOrder> categories1 = CommonActionCategories.Get<SOOrderEntry, PX.Objects.SO.SOOrder>(context);
    BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IConfigured processingCategory = categories1.Processing;
    BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IConfigured approvalCategory = categories1.Approval;
    BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IConfigured printingEmailingCategory = categories1.PrintingAndEmailing;
    BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IConfigured replenishmentCategory = context.Categories.CreateNew("Replenishment Category", (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IConfigured>) (category => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IConfigured) category.DisplayName("Replenishment")));
    BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IConfigured otherCategory = categories1.Other;
    context.AddScreenConfigurationFor((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ScreenConfiguration.IStartConfigScreen, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ScreenConfiguration.IConfigured) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<PX.Objects.SO.SOOrder.status>().FlowTypeIdentifierIs<PX.Objects.SO.SOOrder.behavior>(false).FlowSubTypeIdentifierIs<PX.Objects.SO.SOOrder.orderType>(true).WithFlows((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Workflow.IContainerFillerFlows>) (flows => { })).WithActions((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.releaseFromHold), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<PX.Objects.SO.SOOrder.hold>(new bool?(false))))));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.putOnHold), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory, (Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.releaseFromHold)).PlaceAfter((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.createShipmentIssue)).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<PX.Objects.SO.SOOrder.cancelled>(new bool?(false));
        fas.Add<PX.Objects.SO.SOOrder.hold>(new bool?(true));
      }))));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.initializeState), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) null);
      actions.Add<SOOrderEntry.SOQuickProcess>((Expression<Func<SOOrderEntry.SOQuickProcess, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.quickProcess), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).IsHiddenWhen((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ISharedCondition) BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.op_LogicalNot(conditions.AllowQuickProcess))));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.createShipmentReceipt), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.createShipmentIssue), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).MassProcessingScreen<SOCreateShipment>().InBatchMode()));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.prepareInvoice), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).MassProcessingScreen<SOCreateShipment>().InBatchMode()));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.placeOnBackOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.openOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).MassProcessingScreen<SOCreateShipment>()));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.completeOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 2).IsDisabledWhen((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ISharedCondition) conditions.CanNotBeCompleted).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fas => fas.Add<PX.Objects.SO.SOOrder.forceCompleteOrder>(new bool?(true))))));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.cancelOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction) c.WithCategory(processingCategory).MassProcessingScreen<SOCreateShipment>()).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<PX.Objects.SO.SOOrder.cancelled>(new bool?(true));
        fas.Add<PX.Objects.SO.SOOrder.hold>(new bool?(false));
        fas.Add<PX.Objects.SO.SOOrder.creditHold>(new bool?(false));
        fas.Add<PX.Objects.SO.SOOrder.inclCustOpenOrders>(new bool?(false));
      }))));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.reopenOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).WithPersistOptions((ActionPersistOptions) 1).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<PX.Objects.SO.SOOrder.cancelled>(new bool?(false));
        fas.Add<PX.Objects.SO.SOOrder.completed>(new bool?(false));
      }))));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.releaseFromCreditHold), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction) c.WithCategory(approvalCategory).MassProcessingScreen<SOCreateShipment>()).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fas =>
      {
        fas.Add<PX.Objects.SO.SOOrder.approvedCredit>(new bool?(true));
        fas.Add<PX.Objects.SO.SOOrder.approvedCreditByPayment>(new bool?(false));
        fas.Add<PX.Objects.SO.SOOrder.approvedCreditAmt>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured>) (e => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured) e.SetFromField<PX.Objects.SO.SOOrder.orderTotal>()));
      }))));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.printSalesOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithPersistOptions((ActionPersistOptions) 2).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fass => fass.Add<PX.Objects.SO.SOOrder.printed>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured>) (e => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured) e.SetFromValue((object) true))))).IgnoresArchiveDisabling(true).MassProcessingScreen<SOOrderProcess>().InBatchMode()));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.printQuote), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithPersistOptions((ActionPersistOptions) 2).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fass => fass.Add<PX.Objects.SO.SOOrder.printed>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured>) (e => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured) e.SetFromValue((object) true))))).IgnoresArchiveDisabling(true).MassProcessingScreen<SOOrderProcess>().InBatchMode()));
      actions.Add<Blanket>((Expression<Func<Blanket, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.printBlanket), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fass => fass.Add<PX.Objects.SO.SOOrder.printed>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured>) (e => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured) e.SetFromValue((object) true))))).IgnoresArchiveDisabling(true).MassProcessingScreen<SOOrderProcess>().InBatchMode()));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.emailSalesOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fass => fass.Add<PX.Objects.SO.SOOrder.emailed>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured>) (e => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured) e.SetFromValue((object) true))))).WithPersistOptions((ActionPersistOptions) 2).MassProcessingScreen<SOOrderProcess>().InBatchMode()));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.emailQuote), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fass => fass.Add<PX.Objects.SO.SOOrder.emailed>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured>) (e => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured) e.SetFromValue((object) true))))).WithPersistOptions((ActionPersistOptions) 2).MassProcessingScreen<SOOrderProcess>().InBatchMode()));
      actions.Add<Blanket>((Expression<Func<Blanket, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.emailBlanket), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(printingEmailingCategory).WithFieldAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IContainerFillerFields>) (fass => fass.Add<PX.Objects.SO.SOOrder.emailed>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured>) (e => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Assignment.IConfigured) e.SetFromValue((object) true))))).WithPersistOptions((ActionPersistOptions) 1).MassProcessingScreen<SOOrderProcess>().InBatchMode()));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.createPurchaseOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(replenishmentCategory)));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.createTransferOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(replenishmentCategory)));
      actions.Add<DropshipReturn>((Expression<Func<DropshipReturn, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.createVendorReturn), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(replenishmentCategory)));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.recalculateDiscountsAction), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(otherCategory)));
      actions.Add<SOOrderEntryExternalTax>((Expression<Func<SOOrderEntryExternalTax, PXAction<PX.Objects.SO.SOOrder>>>) (e => e.recalcExternalTax), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(otherCategory)));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.validateAddresses), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(otherCategory)));
      actions.Add((Expression<Func<SOOrderEntry, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.copyOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(otherCategory)));
      actions.Add<CreatePaymentExt>((Expression<Func<CreatePaymentExt, PXAction<PX.Objects.SO.SOOrder>>>) (e => e.createAndAuthorizePayment), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.IsHiddenAlways().MassProcessingScreen<SOCreateShipment>()));
      actions.Add<CreatePaymentExt>((Expression<Func<CreatePaymentExt, PXAction<PX.Objects.SO.SOOrder>>>) (e => e.createAndCapturePayment), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.IsHiddenAlways().MassProcessingScreen<SOCreateShipment>()));
      actions.Add<Blanket>((Expression<Func<Blanket, PXAction<PX.Objects.SO.SOOrder>>>) (e => e.createChildOrders), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).MassProcessingScreen<SOCreateShipment>()));
      actions.Add<Blanket>((Expression<Func<Blanket, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.processExpiredOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).MassProcessingScreen<SOCreateShipment>()));
      actions.Add<SOOrderEntry.CarrierRates>((Expression<Func<SOOrderEntry.CarrierRates, PXAction<PX.Objects.SO.SOOrder>>>) (e => e.captureWeightFromScale), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.IsHiddenAlways()));
      actions.Add<SOOrchestration>((Expression<Func<SOOrchestration, PXAction<PX.Objects.SO.SOOrder>>>) (g => g.OrchestrateOrder), (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (c => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) c.WithCategory(processingCategory).MassProcessingScreen<SOCreateShipment>().InBatchMode()));
      actions.AddNew("ShowInvoicesAndMemos", (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (a => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) a.DisplayName("Invoices and Memos").IsHiddenWhen((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ISharedCondition) BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.op_LogicalNot(conditions.CanBeInvoiced)).IsSidePanelScreen((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationDefinition.IConfiguredSidePanel>) (sp => sp.NavigateToScreen<SOOrderInvoicesSP>().WithIcon("new_quote").WithAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IContainerFillerNavigationActionParameters>) (ass =>
      {
        ass.Add<SOOrderInvoicesSPFilter.orderType>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<PX.Objects.SO.SOOrder.orderType>()));
        ass.Add<SOOrderInvoicesSPFilter.orderNbr>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<PX.Objects.SO.SOOrder.orderNbr>()));
      }))))));
      actions.AddNew("ShowCustomerDetails", (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (a => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) a.DisplayName("Customer Details").IsHiddenWhen((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ISharedCondition) conditions.IsTransfer).IsSidePanelScreen((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationDefinition.IConfiguredSidePanel>) (sp => sp.NavigateToScreen<ARDocumentEnq>().WithIcon("details").WithAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IContainerFillerNavigationActionParameters>) (ass => ass.Add<ARDocumentEnq.ARDocumentFilter.customerID>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<PX.Objects.SO.SOOrder.customerID>()))))))));
      actions.AddNew("RelatedReturnDocuments", (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured>) (a => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionDefinition.IConfigured) a.DisplayName("Related Return Documents").IsHiddenWhen((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ISharedCondition) BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.op_LogicalNot(conditions.CanBeReturned)).IsSidePanelScreen((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationDefinition.IConfiguredSidePanel>) (sp => sp.NavigateToScreen("SO4010SP").WithIcon("flow").WithAssignments((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IContainerFillerNavigationActionParameters>) (ass =>
      {
        ass.Add<SOOrderRelatedReturnsSPFilter.orderType>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<PX.Objects.SO.SOOrder.orderType>()));
        ass.Add<SOOrderRelatedReturnsSPFilter.orderNbr>((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.INeedRightOperand, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.NavigationParameter.IConfigured>) (e => e.SetFromField<PX.Objects.SO.SOOrder.orderNbr>()));
      }))))));
    })).WithHandlers((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IContainerFillerHandlers>) (handlers =>
    {
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.OrderDeleted))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnOrderDeleted_ReopenQuote))).UsesPrimaryEntityGetter<SelectFromBase<PX.Objects.SO.SOOrder, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.orderType, Equal<BqlField<PX.Objects.SO.SOOrder.origOrderType, IBqlString>.FromCurrent>>>>>.And<BqlOperand<PX.Objects.SO.SOOrder.orderNbr, IBqlString>.IsEqual<BqlField<PX.Objects.SO.SOOrder.origOrderNbr, IBqlString>.FromCurrent>>>>(false)).DisplayName("Reopen Quote when Order Deleted")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.ShipmentCreationFailed))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnShipmentCreationFailed))).UsesTargetAsPrimaryEntity()).DisplayName("Shipment Creation Failed")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.ObtainedPaymentInPendingProcessing))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnObtainedPaymentInPendingProcessing))).UsesTargetAsPrimaryEntity()));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.LostLastPaymentInPendingProcessing))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnLostLastPaymentInPendingProcessing))).UsesTargetAsPrimaryEntity()));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.PaymentRequirementsSatisfied))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnPaymentRequirementsSatisfied))).UsesTargetAsPrimaryEntity()).DisplayName("Payment Requirements Satisfied")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.PaymentRequirementsViolated))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnPaymentRequirementsViolated))).UsesTargetAsPrimaryEntity()).DisplayName("Payment Requirements Violated")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.BlanketCompleted))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnBlanketCompleted))).UsesTargetAsPrimaryEntity()).DisplayName("Blanket Order Completed")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.BlanketReopened))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnBlanketReopened))).UsesTargetAsPrimaryEntity()).DisplayName("Blanket Order Reopened")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.CreditLimitSatisfied))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnCreditLimitSatisfied))).UsesTargetAsPrimaryEntity()).DisplayName("Credit Limit Satisfied")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.CreditLimitViolated))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnCreditLimitViolated))).UsesTargetAsPrimaryEntity()).DisplayName("Credit Limit Violated")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrderShipment, SOShipment>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrderShipment, SOShipment>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrderShipment, SOShipment>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventContainer<PX.Objects.SO.SOOrderShipment, SOShipment>) handler.WithTargetOf<PX.Objects.SO.SOOrderShipment>().WithParametersOf<SOShipment>()).OfEntityEvent<PX.Objects.SO.SOOrderShipment.Events>((Expression<Func<PX.Objects.SO.SOOrderShipment.Events, PXEntityEvent<PX.Objects.SO.SOOrderShipment, SOShipment>>>) (e => e.ShipmentLinked))).Is((Expression<Func<PX.Objects.SO.SOOrderShipment, PXWorkflowEventHandler<SOShipment, PX.Objects.SO.SOOrderShipment, SOShipment>>>) (g => g.OnShipmentLinked))).UsesPrimaryEntityGetter<SelectFromBase<PX.Objects.SO.SOOrder, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.orderType, Equal<BqlField<PX.Objects.SO.SOOrderShipment.orderType, IBqlString>.FromCurrent>>>>>.And<BqlOperand<PX.Objects.SO.SOOrder.orderNbr, IBqlString>.IsEqual<BqlField<PX.Objects.SO.SOOrderShipment.orderNbr, IBqlString>.FromCurrent>>>>(false)).DisplayName("Shipment Linked")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrderShipment, SOShipment>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrderShipment, SOShipment>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrderShipment, SOShipment>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventContainer<PX.Objects.SO.SOOrderShipment, SOShipment>) handler.WithTargetOf<PX.Objects.SO.SOOrderShipment>().WithParametersOf<SOShipment>()).OfEntityEvent<PX.Objects.SO.SOOrderShipment.Events>((Expression<Func<PX.Objects.SO.SOOrderShipment.Events, PXEntityEvent<PX.Objects.SO.SOOrderShipment, SOShipment>>>) (e => e.ShipmentUnlinked))).Is((Expression<Func<PX.Objects.SO.SOOrderShipment, PXWorkflowEventHandler<SOShipment, PX.Objects.SO.SOOrderShipment, SOShipment>>>) (g => g.OnShipmentUnlinked))).UsesPrimaryEntityGetter<SelectFromBase<PX.Objects.SO.SOOrder, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.orderType, Equal<BqlField<PX.Objects.SO.SOOrderShipment.orderType, IBqlString>.FromCurrent>>>>>.And<BqlOperand<PX.Objects.SO.SOOrder.orderNbr, IBqlString>.IsEqual<BqlField<PX.Objects.SO.SOOrderShipment.orderNbr, IBqlString>.FromCurrent>>>>(false)).DisplayName("Shipment Unlinked")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.GotShipmentConfirmed))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnShipmentConfirmed))).UsesTargetAsPrimaryEntity()).DisplayName("Shipment Confirmed")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrder>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrder>) handler.WithTargetOf<PX.Objects.SO.SOOrder>().OfEntityEvent<PX.Objects.SO.SOOrder.Events>((Expression<Func<PX.Objects.SO.SOOrder.Events, PXEntityEvent<PX.Objects.SO.SOOrder>>>) (e => e.GotShipmentCorrected))).Is((Expression<Func<PX.Objects.SO.SOOrder, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOOrder>>>) (g => g.OnShipmentCorrected))).UsesTargetAsPrimaryEntity()).DisplayName("Shipment Corrected")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventContainer<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) handler.WithTargetOf<PX.Objects.SO.SOOrderShipment>().WithParametersOf<PX.Objects.SO.SOInvoice>()).OfEntityEvent<PX.Objects.SO.SOOrderShipment.Events>((Expression<Func<PX.Objects.SO.SOOrderShipment.Events, PXEntityEvent<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>>>) (e => e.InvoiceLinked))).Is((Expression<Func<PX.Objects.SO.SOOrderShipment, PXWorkflowEventHandler<PX.Objects.SO.SOInvoice, PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>>>) (g => g.OnInvoiceLinked))).UsesPrimaryEntityGetter<SelectFromBase<PX.Objects.SO.SOOrder, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.orderType, Equal<BqlField<PX.Objects.SO.SOOrderShipment.orderType, IBqlString>.FromCurrent>>>>>.And<BqlOperand<PX.Objects.SO.SOOrder.orderNbr, IBqlString>.IsEqual<BqlField<PX.Objects.SO.SOOrderShipment.orderNbr, IBqlString>.FromCurrent>>>>(false)).DisplayName("Invoice Linked")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventContainer<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>) handler.WithTargetOf<PX.Objects.SO.SOOrderShipment>().WithParametersOf<PX.Objects.SO.SOInvoice>()).OfEntityEvent<PX.Objects.SO.SOOrderShipment.Events>((Expression<Func<PX.Objects.SO.SOOrderShipment.Events, PXEntityEvent<PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>>>) (e => e.InvoiceUnlinked))).Is((Expression<Func<PX.Objects.SO.SOOrderShipment, PXWorkflowEventHandler<PX.Objects.SO.SOInvoice, PX.Objects.SO.SOOrderShipment, PX.Objects.SO.SOInvoice>>>) (g => g.OnInvoiceUnlinked))).UsesPrimaryEntityGetter<SelectFromBase<PX.Objects.SO.SOOrder, TypeArrayOf<IFbqlJoin>.Empty>.Where<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.orderType, Equal<BqlField<PX.Objects.SO.SOOrderShipment.orderType, IBqlString>.FromCurrent>>>>>.And<BqlOperand<PX.Objects.SO.SOOrder.orderNbr, IBqlString>.IsEqual<BqlField<PX.Objects.SO.SOOrderShipment.orderNbr, IBqlString>.FromCurrent>>>>(false)).DisplayName("Invoice Unlinked")));
      handlers.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction<PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PX.Objects.SO.SOInvoice>) ((BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.WorkflowEventHandlerDefinition.INeedSubscriber<PX.Objects.SO.SOInvoice>) handler.WithTargetOf<PX.Objects.SO.SOInvoice>().OfEntityEvent<PX.Objects.SO.SOInvoice.Events>((Expression<Func<PX.Objects.SO.SOInvoice.Events, PXEntityEvent<PX.Objects.SO.SOInvoice>>>) (e => e.InvoiceReleased))).Is((Expression<Func<PX.Objects.SO.SOInvoice, PXWorkflowEventHandler<PX.Objects.SO.SOOrder, PX.Objects.SO.SOInvoice>>>) (g => g.OnInvoiceReleased))).UsesPrimaryEntityGetter<SelectFromBase<PX.Objects.SO.SOOrder, TypeArrayOf<IFbqlJoin>.Append<TypeArrayOf<IFbqlJoin>.Empty, FbqlJoins.Inner<PX.Objects.SO.SOOrderShipment>.On<PX.Objects.SO.SOOrderShipment.FK.Order>>>.Where<KeysRelation<CompositeKey<Field<PX.Objects.SO.SOOrderShipment.invoiceType>.IsRelatedTo<PX.Objects.SO.SOInvoice.docType>, Field<PX.Objects.SO.SOOrderShipment.invoiceNbr>.IsRelatedTo<PX.Objects.SO.SOInvoice.refNbr>>.WithTablesOf<PX.Objects.SO.SOInvoice, PX.Objects.SO.SOOrderShipment>, PX.Objects.SO.SOInvoice, PX.Objects.SO.SOOrderShipment>.SameAsCurrent>>(true)).DisplayName("Invoice Released")));
    })).WithCategories((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(approvalCategory);
      categories.Add(printingEmailingCategory);
      categories.Add(replenishmentCategory);
      categories.Add(otherCategory);
      categories.Update((FolderType) 1, (Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.ConfiguratorCategory, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ActionCategory.ConfiguratorCategory>) (category => category.PlaceAfter(otherCategory)));
    })).WithArchivingRules((Action<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IContainerFillerRules>) (rules =>
    {
      rules.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.INeedTable, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured>) (r => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured) r.Archive<SOLine>().UsingItsParentAttribute()));
      rules.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.INeedTable, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured>) (r => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured) r.Archive<SOLineSplit>().UsingItsParentAttribute()));
      rules.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.INeedTable, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured>) (r => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured) r.Archive<SOTaxTran>().UsingItsFK<SOTaxTran.FK.Order>()));
      rules.Add((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.INeedTable, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured>) (r => (BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.ArchivingRule.IConfigured) r.Archive<SOSalesPerTran>().UsingItsParentAttribute()));
    }))));
  }

  public class Conditions : BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.Pack
  {
    public BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition CanNotBeCompleted
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.ConditionBuilder, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition>) (b => b.FromBql<BqlChainableConditionMirror<TypeArrayOf<IBqlBinary>.Append<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.completed, Equal<True>>>>, Or<BqlOperand<PX.Objects.SO.SOOrder.shipmentCntr, IBqlInt>.IsEqual<Zero>>>>.Or<BqlOperand<PX.Objects.SO.SOOrder.openShipmentCntr, IBqlInt>.IsGreater<Zero>>>()), nameof (CanNotBeCompleted));
      }
    }

    public BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition AllowQuickProcess
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.ConditionBuilder, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition>) (b => b.FromBql<Where<Selector<PX.Objects.SO.SOOrder.orderType, SOOrderType.allowQuickProcess>, Equal<True>>>()), nameof (AllowQuickProcess));
      }
    }

    public BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition CanBeInvoiced
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.ConditionBuilder, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition>) (b => b.FromBql<BqlOperand<PX.Objects.SO.SOOrder.behavior, IBqlString>.IsNotIn<SOBehavior.tR, SOBehavior.qT>>()), nameof (CanBeInvoiced));
      }
    }

    public BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition IsTransfer
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.ConditionBuilder, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition>) (b => b.FromBql<BqlOperand<PX.Objects.SO.SOOrder.behavior, IBqlString>.IsEqual<SOBehavior.tR>>()), nameof (IsTransfer));
      }
    }

    public BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition CanBeReturned
    {
      get
      {
        return this.GetOrCreate((Func<BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition.ConditionBuilder, BoundedTo<SOOrderEntry, PX.Objects.SO.SOOrder>.Condition>) (b => b.FromBql<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.behavior, In3<SOBehavior.sO, SOBehavior.iN, SOBehavior.mO, SOBehavior.rM>>>>>.And<BqlChainableConditionBase<TypeArrayOf<IBqlBinary>.FilledWith<And<Compare<PX.Objects.SO.SOOrder.defaultOperation, Equal<SOOperation.issue>>>>>.Or<BqlOperand<PX.Objects.SO.SOOrder.activeOperationsCntr, IBqlInt>.IsGreater<int1>>>>()), nameof (CanBeReturned));
      }
    }
  }

  public static class ActionCategories
  {
    public const string ReplenishmentCategoryID = "Replenishment Category";

    [PXLocalizable]
    public static class DisplayNames
    {
      public const string Replenishment = "Replenishment";
    }
  }
}
