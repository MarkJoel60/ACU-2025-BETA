// Decompiled with JetBrains decompiler
// Type: PX.Objects.PM.ProgressWorksheetEntry_Workflow
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Data;
using PX.Data.WorkflowAPI;
using System;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.PM;

public class ProgressWorksheetEntry_Workflow : PXGraphExtension<ProgressWorksheetEntry>
{
  public static bool IsActive() => true;

  public virtual void Configure(PXScreenConfiguration config)
  {
    ProgressWorksheetEntry_Workflow.Configure(config.GetScreenConfigurationContext<ProgressWorksheetEntry, PMProgressWorksheet>());
  }

  protected static void Configure(
    WorkflowContext<ProgressWorksheetEntry, PMProgressWorksheet> context)
  {
    BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured processingCategory = context.Categories.CreateNew("Processing", (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured>) (category => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured) category.DisplayName("Processing")));
    BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured correctionsCategory = context.Categories.CreateNew("Corrections", (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured>) (category => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured) category.DisplayName("Corrections")));
    BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured printingAndEmailingCategory = context.Categories.CreateNew("Printing and Emailing", (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured>) (category => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured) category.DisplayName("Printing and Emailing")));
    BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured otherCategory = context.Categories.CreateNew("OtherCategory", (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured>) (category => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IConfigured) category.DisplayName("Other")));
    context.AddScreenConfigurationFor((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ScreenConfiguration.IStartConfigScreen, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ScreenConfiguration.IConfigured) ((BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<PMProgressWorksheet.status>().AddDefaultFlow((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Workflow.INeedStatesFlow, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Workflow.IConfigured>) (flow => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.BaseFlowStep.IContainerFillerStates>) (fss =>
    {
      fss.Add<ProgressWorksheetStatus.onHold>((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.BaseFlowStep.IConfigured) ((BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.FlowState.INeedAnyFlowStateConfig) flowState.IsInitial()).WithActions((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IContainerFillerActions>) (actions => actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.removeHold), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IAllowOptionalConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)))))));
      fss.Add<ProgressWorksheetStatus.open>((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.BaseFlowStep.IConfigured) ((BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.release), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IAllowOptionalConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.hold), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IAllowOptionalConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IConfigured>) null);
      }))).WithEventHandlers((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<ProgressWorksheetEntry, PXWorkflowEventHandler<PMProgressWorksheet>>>) (g => g.OnRelease))))));
      fss.Add<ProgressWorksheetStatus.closed>((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.BaseFlowStep.IConfigured) flowState.WithActions((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.reverse), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IAllowOptionalConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.correct), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IAllowOptionalConfig, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionState.IConfigured>) null);
      }))));
    })).WithTransitions((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IContainerFillerTransitions>) (transitions =>
    {
      transitions.AddGroupFrom<ProgressWorksheetStatus.onHold>((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.INeedTarget, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured>) (t => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured) t.To<ProgressWorksheetStatus.open>().IsTriggeredOn((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.removeHold))))));
      transitions.AddGroupFrom<ProgressWorksheetStatus.open>((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.INeedTarget, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured>) (t => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured) t.To<ProgressWorksheetStatus.onHold>().IsTriggeredOn((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.hold))));
        ts.Add((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.INeedTarget, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured>) (t => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured) t.To<ProgressWorksheetStatus.closed>().IsTriggeredOn((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.release))));
        ts.Add((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.INeedTarget, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured>) (t => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.IConfigured) t.To<ProgressWorksheetStatus.closed>().IsTriggeredOn((Expression<Func<ProgressWorksheetEntry, PXWorkflowEventHandlerBase<PMProgressWorksheet>>>) (g => g.OnRelease))));
      }));
      transitions.AddGroupFrom<ProgressWorksheetStatus.closed>((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Transition.ISourceContainerFillerTransitions>) (ts => { }));
    })))).WithActions((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.removeHold), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured) c.InFolder(processingCategory).WithPersistOptions((ActionPersistOptions) 2).WithFieldAssignments((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProgressWorksheet.hold>((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.INeedRightOperand, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.IConfigured>) (f => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.IConfigured) f.SetFromValue((object) false)))))));
      actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.hold), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured) c.InFolder(processingCategory).WithFieldAssignments((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProgressWorksheet.hold>((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.INeedRightOperand, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.IConfigured>) (f => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.Assignment.IConfigured) f.SetFromValue((object) true)))))));
      actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.release), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured) c.InFolder(processingCategory)));
      actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.reverse), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured) c.InFolder(correctionsCategory)));
      actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.correct), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured) c.InFolder(correctionsCategory)));
      actions.Add((Expression<Func<ProgressWorksheetEntry, PXAction<PMProgressWorksheet>>>) (g => g.print), (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionDefinition.IConfigured) c.InFolder(printingAndEmailingCategory)));
    })).WithHandlers((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.WorkflowEventHandlerDefinition.IContainerFillerHandlers>) (handlers => handlers.Add((Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PMProgressWorksheet>) ((BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.WorkflowEventHandlerDefinition.INeedSubscriber<PMProgressWorksheet>) handler.WithTargetOf<PMProgressWorksheet>().OfEntityEvent<PMProgressWorksheet.Events>((Expression<Func<PMProgressWorksheet.Events, PXEntityEvent<PMProgressWorksheet>>>) (e => e.Release))).Is((Expression<Func<PMProgressWorksheet, PXWorkflowEventHandler<PMProgressWorksheet, PMProgressWorksheet>>>) (g => g.OnRelease))).UsesTargetAsPrimaryEntity())))).WithCategories((Action<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(correctionsCategory);
      categories.Add(printingAndEmailingCategory);
      categories.Add(otherCategory);
      categories.Update((FolderType) 2, (Func<BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.ConfiguratorCategory, BoundedTo<ProgressWorksheetEntry, PMProgressWorksheet>.ActionCategory.ConfiguratorCategory>) (category => category.PlaceAfter(otherCategory)));
    }))));
  }
}
