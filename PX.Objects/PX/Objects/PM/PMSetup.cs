// Decompiled with JetBrains decompiler
// Type: PX.Objects.PM.PMSetup
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Data;
using PX.Data.BQL;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Objects.CS;
using PX.Objects.CT;
using PX.Objects.EP;
using PX.Objects.GL;
using PX.Objects.IN;
using PX.SM;
using System;
using System.Diagnostics.CodeAnalysis;

#nullable enable
namespace PX.Objects.PM;

/// <summary>
/// The tenant-level record with project preferences.
/// The parameters defined by this record include various numbering sequence settings and document processing options.
/// The single record of this type is created and edited on the Project Preferences (PM101000) form,
/// which corresponds to the <see cref="T:PX.Objects.PM.SetupMaint" /> graph.
/// </summary>
/// <remarks>
/// Particular settings, such as numbering sequences, cannot be changed once the project accounting is in use.
/// </remarks>
[PXPrimaryGraph(typeof (SetupMaint))]
[PXCacheName("Project Preferences")]
[ExcludeFromCodeCoverage]
[Serializable]
public class PMSetup : PXBqlTable, IBqlTable, IBqlTableSystemDataStorage
{
  /// <summary>The default non-project code, which is X.</summary>
  public const 
  #nullable disable
  string DefaultNonProjectCode = "X";
  protected byte[] _tstamp;
  protected Guid? _CreatedByID;
  protected string _CreatedByScreenID;
  protected DateTime? _CreatedDateTime;
  protected Guid? _LastModifiedByID;
  protected string _LastModifiedByScreenID;
  protected DateTime? _LastModifiedDateTime;

  /// <summary>
  /// Specifies (if set to <see langword="true" />) that the Project Accounting feature is enabled.
  /// </summary>
  [PXBool]
  [PXUIField(Visible = false)]
  public virtual bool? IsActive
  {
    get => new bool?(PXAccess.FeatureInstalled<FeaturesSet.projectAccounting>());
  }

  /// <summary>The non-project code.</summary>
  /// <value>The default value is X.</value>
  [PXDimension("PROJECT", AutoNumbering = false)]
  [PXDefault("X")]
  [PXDBString(30, IsUnicode = true)]
  [PXUIField(DisplayName = "Non-Project Code")]
  public virtual string NonProjectCode { get; set; }

  /// <summary>
  /// The empty item code. The empty item code is used whenever an inventory item is required but it is unknown or is not applicable.
  /// </summary>
  /// <value>The default value is N/A.</value>
  [PXDimension("INVENTORY", AutoNumbering = false)]
  [PXDefault("<N/A>")]
  [PXDBString(30, IsUnicode = true)]
  [PXUIField(DisplayName = "Empty Item Code")]
  public virtual string EmptyItemCode { get; set; }

  /// <summary>The unit of measure for the empty item.</summary>
  /// <value>The default value is HOUR.</value>
  [PXDBString(6, IsUnicode = true)]
  [PXDefault("HOUR")]
  [PXUIField(DisplayName = "Empty Item UOM")]
  [PXSelector(typeof (Search4<INUnit.fromUnit, Where<INUnit.unitType, Equal<INUnitType.global>>, Aggregate<GroupBy<INUnit.fromUnit>>>))]
  public virtual string EmptyItemUOM { get; set; }

  /// <summary>
  /// The numbering sequence that is used for transaction batches generated by the project accounting.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDefault("PMTRAN")]
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Transaction Numbering Sequence")]
  public virtual string TranNumbering { get; set; }

  /// <summary>
  /// The numbering sequence that is used for pro forma documents generated by the billing process.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDefault("PROFORMA")]
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Pro Forma Numbering Sequence")]
  public virtual string ProformaNumbering { get; set; }

  /// <summary>
  /// The numbering sequence that is used for change orders.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDefault("CHANGEORD")]
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Change Order Numbering Sequence", FieldClass = "CHANGEORDER")]
  public virtual string ChangeOrderNumbering { get; set; }

  /// <summary>
  /// The numbering sequence that is used for cost projections.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDefault("COSTPROJ")]
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Cost Projection by Date Numbering Sequence", FieldClass = "Construction")]
  public virtual string CostProjectionNumbering { get; set; }

  /// <summary>
  /// The numbering sequence that is used for a project WIP adjustment transaction.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDefault("WIPADJUST")]
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Wip Adjustment Numbering Sequence", FieldClass = "Construction")]
  public virtual string WipAdjustmentNumbering { get; set; }

  /// <summary>
  /// The numbering sequence that is used for change requests.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDefault("CHANGERST")]
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Change Request Numbering Sequence", FieldClass = "ChangeRequest")]
  public virtual string ChangeRequestNumbering { get; set; }

  /// <summary>
  /// The numbering sequence that is used for progress worksheets.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDefault("PROGRESSWS")]
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Progress Worksheet Numbering Sequence", FieldClass = "Construction")]
  public virtual string ProgressWorksheetNumbering { get; set; }

  /// <summary>
  /// The change order class that is used as the default change order class.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.PM.PMChangeOrderClass" /> DAC.
  /// </value>
  [PXForeignReference(typeof (Field<PMSetup.defaultChangeOrderClassID>.IsRelatedTo<PMChangeOrderClass.classID>))]
  [PXDBString(15, IsUnicode = true, InputMask = ">CCCCCCCCCCCCCCC")]
  [PXUIField]
  [PXSelector(typeof (Search<PMChangeOrderClass.classID, Where<PMChangeOrderClass.isActive, Equal<True>>>), DescriptionField = typeof (PMChangeOrderClass.description))]
  public virtual string DefaultChangeOrderClassID { get; set; }

  /// <summary>
  /// Indicates (if set to <see langword="true" />) that transactions will be automatically posted to the general ledger once they are released.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Automatically Post on Release")]
  public virtual bool? AutoPost { get; set; }

  /// <summary>
  /// Indicates (if set to <see langword="true" />) that the allocation will be automatically released after the allocation process.
  /// </summary>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Automatically Release Allocations")]
  public virtual bool? AutoReleaseAllocation { get; set; }

  /// <summary>
  /// The numbering sequence that is used for batches generated in the project accounting.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("BATCH")]
  [PXUIField(DisplayName = "Batch Numbering Sequence")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  public virtual string BatchNumberingID { get; set; }

  /// <summary>
  /// The source for the expense account. When a cost transaction is created, the source is used to define the account.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"I"</c>: Labor Item,
  /// <c>"P"</c>: Project,
  /// <c>"T"</c>: Task,
  /// <c>"E"</c>: Employee
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PMExpenseAccountSource.List]
  [PXDefault("I")]
  [PXUIField(DisplayName = "Expense Account Source", Required = true)]
  public virtual string ExpenseAccountSource { get; set; }

  /// <summary>
  /// The subaccount mask that defines the rule of choosing segment values for the expense subaccount
  /// to be used for non-stock items on data entry forms in the Project Accounting module.
  /// To set up the rule, select a segment, press F3, and choose a source of the segment value, which is one of the following options:
  /// </summary>
  /// <value>
  /// The mask may include the following characters:
  /// I: Expense subaccount associated with non-stock item
  /// J: Subaccount associated with project
  /// T: Subaccount associated with project task
  /// E: Subaccount associated with employee
  /// For a segment, the characters designating each option are repeated as many times as there are characters in the segment.
  /// </value>
  [PXDefault]
  [SubAccountMask(DisplayName = "Expense Sub. Source")]
  public virtual string ExpenseSubMask { get; set; }

  /// <summary>
  /// The source of the account for the credit side of the project transaction to be generated on release of the time cards.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"I"</c>: Labor Item,
  /// <c>"P"</c>: Project,
  /// <c>"T"</c>: Task,
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PMExpenseAccountSource.AccrualList]
  [PXDefault("I")]
  [PXUIField(DisplayName = "Expense Accrual Account Source", Required = true)]
  public virtual string ExpenseAccrualAccountSource { get; set; }

  /// <summary>
  /// The subaccount mask that defines the rule of selecting segment values for the expense accrual subaccount
  /// to be used for non-stock items on data entry forms in project accounting.
  /// </summary>
  /// <value>
  /// The mask can include the following characters:
  /// I: The expense subaccount associated with the non-stock item
  /// J: The subaccount associated with the project
  /// T: The subaccount associated with the project task
  /// E: The subaccount associated with the employee
  /// For a segment, the characters designating each option are repeated as many times as there are characters in the segment.
  /// </value>
  [PXDefault]
  [SubAccountMask(DisplayName = "Expense Accrual Sub. Source")]
  public virtual string ExpenseAccrualSubMask { get; set; }

  /// <summary>
  /// The map to be used to assign projects to employees for approval.
  /// If no value is specified, the approval is not required.
  /// </summary>
  /// <value>
  /// The field values refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProject>, And<EPAssignmentMap.mapType, NotEqual<EPMapType.assignment>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Project Approval Map")]
  public virtual int? AssignmentMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees who approve projects.
  /// An employee receives a notification about pending approval when a project requires approval from this employee.
  /// </summary>
  /// <value>
  /// The field value refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Project Approval Notification")]
  public virtual int? AssignmentNotificationID { get; set; }

  /// <summary>
  /// The map to be used to assign pro forma invoices to employees for approval.
  /// If no value is specified, the approval is not required for these documents.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProforma>, And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Pro Forma Invoice Approval Map")]
  public virtual int? ProformaApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees assigned to approve pro forma invoices.
  /// An employee receives a notification about a pending approval when approval of a pro forma invoice is required from this employee.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Pro Forma Invoice Approval Notification")]
  public virtual int? ProformaApprovalNotificationID { get; set; }

  [Obsolete]
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProforma>, And<EPAssignmentMap.mapType, Equal<EPMapType.assignment>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Pro Forma Assignment Map", Visible = false)]
  public virtual int? ProformaAssignmentMapID { get; set; }

  [Obsolete]
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Pro Forma Assignment Notification", Visible = false)]
  public virtual int? ProformaAssignmentNotificationID { get; set; }

  /// <summary>
  /// The map to be used to assign change orders to employees for approval.
  /// If no value is specified, the approval is not required for change orders.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeChangeOrder>, And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Change Order Approval Map", FieldClass = "CHANGEORDER")]
  public virtual int? ChangeOrderApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees assigned to approve change orders.
  /// An employee receives a notification about a pending approval when approval of a change order is required from this employee.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Change Order Approval Notification", FieldClass = "CHANGEORDER")]
  public virtual int? ChangeOrderApprovalNotificationID { get; set; }

  /// <summary>
  /// The map to be used to assign change requests to employees for approval.
  /// If no value is specified, the approval is not required for change requests.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeChangeRequest>, And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Change Request Approval Map", FieldClass = "ChangeRequest")]
  public virtual int? ChangeRequestApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees assigned to approve change requests.
  /// An employee receives a notification about a pending approval when approval of a change request is required from this employee.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Change Request Approval Notification", FieldClass = "ChangeRequest")]
  public virtual int? ChangeRequestApprovalNotificationID { get; set; }

  /// /// <summary>
  /// The map that is used to assign progress worksheets to employees for approval.
  /// </summary>
  /// <value>
  /// If no value is specified, no approval is required for the progress worksheets.
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProgressWorksheet>, And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Progress Worksheet Approval Map", FieldClass = "Construction")]
  public virtual int? ProgressWorksheetApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for the employees that are assigned to approve progress worksheets.
  /// An employee receives a notification about a pending approval when an approval of a progress worksheet is required from this employee.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Progress Worksheet Approval Notification", FieldClass = "Construction")]
  public virtual int? ProgressWorksheetApprovalNotificationID { get; set; }

  /// <summary>
  /// The project template that the system uses by default for new project quotes.
  /// </summary>
  [PXUIField(DisplayName = "Default Quote Template", FieldClass = "PROJECT")]
  [PXDimensionSelector("PROJECT", typeof (Search2<PMProject.contractID, LeftJoin<ContractBillingSchedule, On<ContractBillingSchedule.contractID, Equal<PMProject.contractID>>>, Where<PMProject.baseType, Equal<CTPRType.projectTemplate>, And<PMProject.isActive, Equal<True>>>>), typeof (PMProject.contractCD), new Type[] {typeof (PMProject.contractCD), typeof (PMProject.description), typeof (PMProject.budgetLevel), typeof (PMProject.billingID), typeof (ContractBillingSchedule.type), typeof (PMProject.ownerID)}, DescriptionField = typeof (PMProject.description))]
  [PXDBInt]
  [PXUIVisible(typeof (Where<FeatureInstalled<FeaturesSet.projectQuotes>>))]
  public virtual int? QuoteTemplateID { get; set; }

  /// <summary>
  /// The map to be used to assign project quotes to employees for approval.
  /// If no value is specified, the approval is not required for project quotes.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProjectQuotes>, And<EPAssignmentMap.mapType, NotEqual<EPMapType.assignment>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Project Quote Approval Map")]
  public virtual int? QuoteApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees assigned to approve project quotes.
  /// An employee receives a notification about a pending approval when approval of a project quote is required from this employee.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXDefault(292)]
  [PXUIField(DisplayName = "Project Quote Approval Notification")]
  public virtual int? QuoteApprovalNotificationID { get; set; }

  /// <summary>
  /// The default price markup for estimation lines of change requests.
  /// </summary>
  [PXDBPriceCost]
  [PXDefault(TypeCode.Decimal, "0.0")]
  [PXUIField(DisplayName = "Default Price Markup (%)", FieldClass = "ChangeRequest")]
  public virtual Decimal? DefaultPriceMarkupPct { get; set; }

  /// <summary>
  /// A check box that indicates (if selected) that purchase orders and subcontracts are tracked as cost commitments of each project.
  /// </summary>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Internal Cost Commitment Tracking")]
  public virtual bool? CostCommitmentTracking { get; set; }

  /// <summary>
  /// A Boolean value that indicates whether in the documents related to a project,
  /// the system uses the cost tax zone, revenue tax zone, and project address settings
  /// that are specified for the project on the Projects (PM301000) form.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Calculate Project-Specific Taxes")]
  public virtual bool? CalculateProjectSpecificTaxes { get; set; }

  /// <summary>
  /// A Boolean value that specifies the default value for <see cref="P:PX.Objects.PM.PMCostProjectionByDate.IncludePendingChangeOrders" />.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Include Pending CO in Cost Projections by Date", FieldClass = "Construction")]
  public virtual bool? IncludePendingChangeOrdersInCostProjections { get; set; }

  /// <summary>
  /// A Boolean value that specifies the logic of planned cost estimation in the project WIP adjustments.
  /// </summary>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Estimate Planned Costs in Project WIP Adjustments by Budget", FieldClass = "Construction")]
  public virtual bool? UseBudgetForPlannedCostEstimationInWipAdjustments { get; set; }

  /// <summary>The cut-off date for billing.</summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"I"</c>: Include, which means to include all unbilled transactions with earlier dates and with the date of the invoice. This is the default value.
  /// <c>"E"</c>: Exclude, which means to include all unbilled transactions with dates that are earlier than the date of the invoice.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PMCutOffDate.List]
  [PXDefault("I")]
  [PXUIField(DisplayName = "Billing Cutoff", Required = true)]
  public virtual string CutoffDate { get; set; }

  /// <summary>
  /// The option that defines how the system validates the limits of the revenue budget of a project when you process pro forma invoices for the project.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <list>
  /// <item><description><c>W</c>: Ignore</description></item>,
  /// <item><description><c>E</c>: Validate, which is the default value</description></item>
  /// </list>
  /// </value>
  [PXDBString(1)]
  [PXUIField(DisplayName = "Validate T&M Revenue Budget Limits")]
  [OverLimitValidationOption.List]
  [PXDefault("E")]
  public virtual string OverLimitErrorLevel { get; set; }

  /// <summary>
  /// The way the system updates the cost budget of projects when a project transaction is posted, a change order line is released, a commitment line is saved, a pro forma invoice line is saved, an accounts receivable invoice line is saved, or a new change request line is saved or linked to a change order.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"D"</c>: Detailed, which is the default value.
  /// <c>"S"</c>: Summary.
  /// </value>
  [PXDBString(1)]
  [PXUIField(DisplayName = "Cost Budget Update")]
  [CostBudgetUpdateModes.List]
  [PXDefault("D")]
  public virtual string CostBudgetUpdateMode { get; set; }

  /// <summary>
  /// The way the system controls the project budget on document entry.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"N"</c>: Do Not Control, which is the default value.
  /// <c>"W"</c>: Show a Warning.
  /// </value>
  [PXDBString(1)]
  [PXUIField(DisplayName = "Budget Control")]
  [BudgetControlOption.List]
  [PXDefault("N")]
  public virtual string BudgetControl { get; set; }

  /// <summary>
  /// The way the system updates the revenue budget of projects when a project transaction is posted, a change order line is released, a commitment line is saved, a pro forma invoice line is saved, an accounts receivable invoice line is saved, or a new change request line is saved or linked to a change order.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"D"</c>: Detailed, which is the default value.
  /// <c>"S"</c>: Summary.
  /// </value>
  [PXDBString(1)]
  [PXUIField(DisplayName = "Revenue Budget Update")]
  [CostBudgetUpdateModes.List]
  [PXDefault("S")]
  public virtual string RevenueBudgetUpdateMode { get; set; }

  /// <summary>The visibility of the project in the general ledger.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "GL")]
  public virtual bool? VisibleInGL { get; set; }

  /// <summary>The visibility of the project in accounts payable.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "AP")]
  public virtual bool? VisibleInAP { get; set; }

  /// <summary>The visibility of the project in accounts receivable.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "AR")]
  public virtual bool? VisibleInAR { get; set; }

  /// <summary>The visibility of the project in sales orders.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "SO")]
  public virtual bool? VisibleInSO { get; set; }

  /// <summary>The visibility of the project in purchase orders.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "PO")]
  public virtual bool? VisibleInPO { get; set; }

  /// <summary>The visibility of the project in time entries.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Time Entries")]
  public virtual bool? VisibleInTA { get; set; }

  /// <summary>The visibility of the project in expenses.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Expenses")]
  public virtual bool? VisibleInEA { get; set; }

  /// <summary>The visibility of the project in inventory.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "IN")]
  public virtual bool? VisibleInIN { get; set; }

  /// <summary>The visibility of the project in cash management.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "CA")]
  public virtual bool? VisibleInCA { get; set; }

  /// <summary>The visibility of the project in CRM.</summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "CRM")]
  public virtual bool? VisibleInCR { get; set; }

  /// <summary>The restrictions for the projects.</summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"C"</c>: Customer Projects, which is the default value.
  /// <c>"A"</c>: All Projects.
  /// </value>
  [PMRestrictOption.List]
  [PXDBString(1)]
  [PXDefault("C")]
  [PXUIField(DisplayName = "Restrict Project Selection")]
  public virtual string RestrictProjectSelect { get; set; }

  /// <summary>
  /// Migration mode, which is used to import data from external systems.
  /// </summary>
  /// <value>
  /// If the value is <see langword="true" />, pro forma documents can be imported into the system.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("PMQUOTE")]
  [PXUIField(DisplayName = "Quote Numbering Sequence")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIVisible(typeof (Where<FeatureInstalled<FeaturesSet.projectQuotes>>))]
  public virtual string QuoteNumberingID { get; set; }

  [Obsolete]
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Automatically Adjust Unbilled Revenue Based on the Completed Cost", Visible = false)]
  public virtual bool? AutoCompleteRevenueBudget { get; set; }

  /// <summary>
  /// Migration mode, which is used to import data from external systems.
  /// </summary>
  /// <value>
  /// If the value is <see langword="true" />, pro forma documents can be imported into the system.
  /// </value>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Activate Migration Mode")]
  public virtual bool? MigrationMode { get; set; }

  /// <summary>The stock initialization flag.</summary>
  [PXDBBool]
  [PXDefault(false)]
  public virtual bool? StockInitRequired { get; set; }

  /// <summary>
  /// The map to be used to assign cost projection revisions to employees for approval. If no value is specified for this field, approval is not required for cost projection revisions created for a project.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeCostProjection>, And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Cost Projection Approval Map", FieldClass = "Construction")]
  public virtual int? CostProjectionApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees assigned to approve cost projection revisions for project quotes. With a notification template specified, an employee receives a notification about a pending approval when the approval of a cost projection is required from this employee.
  /// </summary>
  /// <value>
  /// The values refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Cost Projection Approval Notification", FieldClass = "Construction")]
  public virtual int? CostProjectionApprovalNotificationID { get; set; }

  /// <summary>
  /// The map to be used to assign cost projections by date to employees for approval. If no value is specified for this field, approval is not required for the cost projection by date that is created for a project.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeCostProjectionByDate>, And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Cost Projection By Date Approval Map", FieldClass = "Construction")]
  public virtual int? CostProjectionByDateApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees assigned to approve cost projections by date for projects. With a notification template specified, an employee receives a notification about a pending approval when the approval of a cost projection by date is required from this employee.
  /// </summary>
  /// <value>
  /// The values refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Cost Projection By Date Approval Notification", FieldClass = "Construction")]
  public virtual int? CostProjectionByDateApprovalNotificationID { get; set; }

  /// <summary>
  /// The map to be used to assign a WIP adjustment transaction to employees for approval. If no value is specified for this field, approval is not required for the WIP adjustment transaction.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.EP.EPAssignmentMap" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<EPAssignmentMap.assignmentMapID, Where<EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeWipAdjustment>, And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>), DescriptionField = typeof (EPAssignmentMap.name))]
  [PXUIField(DisplayName = "Wip Adjustment Approval Map", FieldClass = "Construction")]
  public virtual int? WipAdjustmentApprovalMapID { get; set; }

  /// <summary>
  /// The notification template that the system uses to generate notification emails for employees assigned to approve the WIP accrual for a project. With the notification template configured, an employee receives a notification about the pending approval, if the approval of a WIP adjustment transaction is required from this employee.
  /// </summary>
  /// <value>
  /// The values refers to the <see cref="T:PX.SM.Notification" /> DAC.
  /// </value>
  [PXDBInt]
  [PXSelector(typeof (Search<Notification.notificationID>), DescriptionField = typeof (Notification.name))]
  [PXUIField(DisplayName = "Wip Adjustment Approval Notification", FieldClass = "Construction")]
  public virtual int? WipAdjustmentApprovalNotificationID { get; set; }

  /// <summary>
  /// The posting option of the Overbilling/Underbilling amounts.
  /// </summary>
  /// <value>
  /// The field can have one of the values described in <see cref="T:PX.Objects.PM.PostingOptions.OverbillingUnderbillingOptionsListAttribute" />.
  /// </value>
  [PXDBString(2, IsFixed = true)]
  [PostingOptions.OverbillingUnderbillingOptionsList]
  [PXDefault("PL")]
  [PXUIField(DisplayName = "Overbilling/Underbilling posting option", FieldClass = "Construction")]
  public virtual string WipAdjustmentOverbillingUnderbillingOption { get; set; }

  /// <summary>The default overbilling account.</summary>
  [Account(null, typeof (Search<PX.Objects.GL.Account.accountID, Where2<Match<Current<AccessInfo.userName>>, And<PX.Objects.GL.Account.active, Equal<True>, And<PX.Objects.GL.Account.type, Equal<AccountType.liability>, And<PX.Objects.GL.Account.isCashAccount, NotEqual<True>>>>>>), DisplayName = "Overbilling Account", DescriptionField = typeof (PX.Objects.GL.Account.description), FieldClass = "Construction")]
  public virtual int? WipAdjustmentOverbillingAccountID { get; set; }

  /// <summary>The default overbilling subaccount.</summary>
  [SubAccount(typeof (PMSetup.wipAdjustmentOverbillingAccountID), DisplayName = "Overbilling Subaccount")]
  [PXDefault(typeof (BqlField<GLSetup.defaultSubID, IBqlInt>.FromSetup))]
  public virtual int? WipAdjustmentOverbillingSubID { get; set; }

  /// <summary>The default underbilling account.</summary>
  [Account(null, typeof (Search<PX.Objects.GL.Account.accountID, Where2<Match<Current<AccessInfo.userName>>, And<PX.Objects.GL.Account.active, Equal<True>, And<PX.Objects.GL.Account.type, Equal<AccountType.asset>, And<PX.Objects.GL.Account.isCashAccount, NotEqual<True>>>>>>), DisplayName = "Underbilling Account", DescriptionField = typeof (PX.Objects.GL.Account.description), FieldClass = "Construction")]
  public virtual int? WipAdjustmentUnderbillingAccountID { get; set; }

  /// <summary>The default underbilling subaccount.</summary>
  [SubAccount(typeof (PMSetup.wipAdjustmentUnderbillingAccountID), DisplayName = "Underbilling Subaccount")]
  [PXDefault(typeof (BqlField<GLSetup.defaultSubID, IBqlInt>.FromSetup))]
  public virtual int? WipAdjustmentUnderbillingSubID { get; set; }

  /// <summary>The posting option of the Revenue amounts.</summary>
  /// <value>
  /// The field can have one of the values described in <see cref="T:PX.Objects.PM.PostingOptions.RevenueOptionsListAttribute" />.
  /// </value>
  [PXDBString(2, IsFixed = true)]
  [PostingOptions.RevenueOptionsList]
  [PXDefault("PL")]
  [PXUIField(DisplayName = "Revenue Posting Option", FieldClass = "Construction")]
  public virtual string WipAdjustmentRevenueOption { get; set; }

  /// <summary>The default revenue subaccount.</summary>
  [Account(null, typeof (Search<PX.Objects.GL.Account.accountID, Where2<Match<Current<AccessInfo.userName>>, And<PX.Objects.GL.Account.active, Equal<True>, And<PX.Objects.GL.Account.type, Equal<AccountType.income>, And<PX.Objects.GL.Account.isCashAccount, NotEqual<True>>>>>>), DisplayName = "Revenue Account", DescriptionField = typeof (PX.Objects.GL.Account.description), FieldClass = "Construction")]
  public virtual int? WipAdjustmentRevenueAccountID { get; set; }

  /// <summary>The revenue default subaccount.</summary>
  [SubAccount(typeof (PMSetup.wipAdjustmentRevenueAccountID), DisplayName = "Revenue Subaccount")]
  [PXDefault(typeof (BqlField<GLSetup.defaultSubID, IBqlInt>.FromSetup))]
  public virtual int? WipAdjustmentRevenueSubID { get; set; }

  /// <summary>
  /// The debit account of project transactions for unbilled remainders.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.GL.Account" /> DAC.
  /// </value>
  [Account(null, typeof (Search<PX.Objects.GL.Account.accountID, Where<PX.Objects.GL.Account.accountGroupID, IsNotNull>>), DisplayName = "Debit Account", AvoidControlAccounts = true)]
  [PXDefault]
  public virtual int? UnbilledRemainderAccountID { get; set; }

  /// <summary>
  /// The debit subaccount of project transactions for unbilled remainders.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.GL.Sub" /> DAC.
  /// </value>
  [SubAccount(typeof (PMSetup.unbilledRemainderAccountID), DisplayName = "Debit Subaccount")]
  [PXDefault]
  public virtual int? UnbilledRemainderSubID { get; set; }

  /// <summary>
  /// The credit account of project transactions for unbilled remainders.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.GL.Account" /> DAC.
  /// </value>
  [Account(null, typeof (Search<PX.Objects.GL.Account.accountID>), DisplayName = "Credit Account", AvoidControlAccounts = true)]
  [PXDefault]
  public virtual int? UnbilledRemainderOffsetAccountID { get; set; }

  /// <summary>
  /// The credit subaccount of project transactions for unbilled remainders.
  /// </summary>
  /// <value>
  /// The value refers to the <see cref="T:PX.Objects.GL.Sub" /> DAC.
  /// </value>
  [SubAccount(typeof (PMSetup.unbilledRemainderOffsetAccountID), DisplayName = "Credit Subaccount")]
  [PXDefault]
  public virtual int? UnbilledRemainderOffsetSubID { get; set; }

  /// <summary>The threshold for large project templates.</summary>
  [PXDBInt]
  [PXDefault]
  public virtual int? LargeProjectTemplateSize { get; set; }

  /// <summary>
  /// The source of the expense account to be used in the project drop-ship order.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"O"</c>: Posting Class or Item, which is the default value.
  /// <c>"P"</c>: Project.
  /// <c>"T"</c>: Task.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [DropshipExpenseAccountSourceOption.List]
  [PXDefault("O")]
  [PXUIField(DisplayName = "Use Expense Account From", Required = true)]
  public virtual string DropshipExpenseAccountSource { get; set; }

  /// <summary>
  /// The subaccount mask for items that are used in the project drop-ship orders.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"I"</c>: Inventory item, which is the default value.
  /// <c>"P"</c>: Posting class.
  /// <c>"J"</c>: Project.
  /// <c>"T"</c>: Task.
  /// </value>
  [PXDefault]
  [DropshipExpenseSubAccountMask(DisplayName = "Combine Expense Sub. From")]
  public virtual string DropshipExpenseSubMask { get; set; }

  /// <summary>
  /// The setting that defines whether a receipt will be generated for a project drop shipment.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"R"</c>: Generate Receipt, which is the default value.
  /// <c>"S"</c>: Skip Receipt Generation.
  /// </value>
  [DropshipReceiptProcessingOption.List]
  [PXDBString(1)]
  [PXDefault("R")]
  [PXUIField(DisplayName = "Drop-Ship Receipt Processing")]
  public virtual string DropshipReceiptProcessing { get; set; }

  /// <summary>
  /// The setting that defines when the expense transaction should be recorded for a project drop shipment.
  /// </summary>
  /// <value>
  /// The field can have one of the following values:
  /// <c>"B"</c>: On Bill Release, which is the default value.
  /// <c>"R"</c>: On Receipt Release.
  /// </value>
  [DropshipExpenseRecordingOption.List]
  [PXDBString(1)]
  [PXDefault("B")]
  [PXUIEnabled(typeof (Where<PMSetup.dropshipReceiptProcessing, Equal<DropshipReceiptProcessingOption.generateReceipt>>))]
  [PXUIField(DisplayName = "Record Drop-Ship Expenses")]
  public virtual string DropshipExpenseRecording { get; set; }

  [PXDBTimestamp]
  public virtual byte[] tstamp
  {
    get => this._tstamp;
    set => this._tstamp = value;
  }

  [PXDBCreatedByID]
  public virtual Guid? CreatedByID
  {
    get => this._CreatedByID;
    set => this._CreatedByID = value;
  }

  [PXDBCreatedByScreenID]
  public virtual string CreatedByScreenID
  {
    get => this._CreatedByScreenID;
    set => this._CreatedByScreenID = value;
  }

  [PXUIField(DisplayName = "Created On", Enabled = false, IsReadOnly = true)]
  [PXDBCreatedDateTime]
  public virtual DateTime? CreatedDateTime
  {
    get => this._CreatedDateTime;
    set => this._CreatedDateTime = value;
  }

  [PXDBLastModifiedByID]
  public virtual Guid? LastModifiedByID
  {
    get => this._LastModifiedByID;
    set => this._LastModifiedByID = value;
  }

  [PXDBLastModifiedByScreenID]
  public virtual string LastModifiedByScreenID
  {
    get => this._LastModifiedByScreenID;
    set => this._LastModifiedByScreenID = value;
  }

  [PXUIField(DisplayName = "Last Modified On", Enabled = false, IsReadOnly = true)]
  [PXDBLastModifiedDateTime]
  public virtual DateTime? LastModifiedDateTime
  {
    get => this._LastModifiedDateTime;
    set => this._LastModifiedDateTime = value;
  }

  public abstract class isActive : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.isActive>
  {
  }

  public abstract class nonProjectCode : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  PMSetup.nonProjectCode>
  {
  }

  public abstract class emptyItemCode : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  PMSetup.emptyItemCode>
  {
  }

  public abstract class emptyItemUOM : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  PMSetup.emptyItemUOM>
  {
  }

  public abstract class tranNumbering : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  PMSetup.tranNumbering>
  {
  }

  public abstract class proformaNumbering : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.proformaNumbering>
  {
  }

  public abstract class changeOrderNumbering : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.changeOrderNumbering>
  {
  }

  public abstract class costProjectionNumbering : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.costProjectionNumbering>
  {
  }

  public abstract class wipAdjustmentNumbering : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.wipAdjustmentNumbering>
  {
  }

  public abstract class changeRequestNumbering : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.changeRequestNumbering>
  {
  }

  public abstract class progressWorksheetNumbering : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.progressWorksheetNumbering>
  {
  }

  public abstract class defaultChangeOrderClassID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.defaultChangeOrderClassID>
  {
  }

  public abstract class autoPost : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.autoPost>
  {
  }

  public abstract class autoReleaseAllocation : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    PMSetup.autoReleaseAllocation>
  {
  }

  public abstract class batchNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.batchNumberingID>
  {
  }

  public abstract class expenseAccountSource : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.expenseAccountSource>
  {
  }

  public abstract class expenseSubMask : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  PMSetup.expenseSubMask>
  {
  }

  public abstract class expenseAccrualAccountSource : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.expenseAccrualAccountSource>
  {
  }

  public abstract class expenseAccrualSubMask : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.expenseAccrualSubMask>
  {
  }

  public abstract class assignmentMapID : BqlType<
  #nullable enable
  IBqlInt, int>.Field<
  #nullable disable
  PMSetup.assignmentMapID>
  {
  }

  public abstract class assignmentNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.assignmentNotificationID>
  {
  }

  public abstract class proformaApprovalMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.proformaApprovalMapID>
  {
  }

  public abstract class proformaApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.proformaApprovalNotificationID>
  {
  }

  public abstract class proformaAssignmentMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.proformaAssignmentMapID>
  {
  }

  public abstract class proformaAssignmentNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.proformaAssignmentNotificationID>
  {
  }

  public abstract class changeOrderApprovalMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.changeOrderApprovalMapID>
  {
  }

  public abstract class changeOrderApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.changeOrderApprovalNotificationID>
  {
  }

  public abstract class changeRequestApprovalMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.changeRequestApprovalMapID>
  {
  }

  public abstract class changeRequestApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.changeRequestApprovalNotificationID>
  {
  }

  public abstract class progressWorksheetApprovalMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.progressWorksheetApprovalMapID>
  {
  }

  public abstract class progressWorksheetApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.progressWorksheetApprovalNotificationID>
  {
  }

  public abstract class quoteTemplateID : BqlType<
  #nullable enable
  IBqlInt, int>.Field<
  #nullable disable
  PMSetup.quoteTemplateID>
  {
  }

  public abstract class quoteApprovalMapID : BqlType<
  #nullable enable
  IBqlInt, int>.Field<
  #nullable disable
  PMSetup.quoteApprovalMapID>
  {
  }

  public abstract class quoteApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.quoteApprovalNotificationID>
  {
  }

  public abstract class defaultPriceMarkupPct : 
    BqlType<
    #nullable enable
    IBqlDecimal, Decimal>.Field<
    #nullable disable
    PMSetup.defaultPriceMarkupPct>
  {
  }

  public abstract class costCommitmentTracking : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    PMSetup.costCommitmentTracking>
  {
  }

  public abstract class calculateProjectSpecificTaxes : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    PMSetup.calculateProjectSpecificTaxes>
  {
  }

  public abstract class includePendingChangeOrdersInCostProjections : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    PMSetup.includePendingChangeOrdersInCostProjections>
  {
  }

  public abstract class useBudgetForPlannedCostEstimationInWipAdjustments : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    PMSetup.useBudgetForPlannedCostEstimationInWipAdjustments>
  {
  }

  public abstract class cutoffDate : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  PMSetup.cutoffDate>
  {
  }

  public abstract class overLimitErrorLevel : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.overLimitErrorLevel>
  {
  }

  public abstract class costBudgetUpdateMode : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.costBudgetUpdateMode>
  {
  }

  public abstract class budgetControl : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  PMSetup.budgetControl>
  {
  }

  public abstract class revenueBudgetUpdateMode : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.revenueBudgetUpdateMode>
  {
  }

  public abstract class visibleInGL : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInGL>
  {
  }

  public abstract class visibleInAP : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInAP>
  {
  }

  public abstract class visibleInAR : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInAR>
  {
  }

  public abstract class visibleInSO : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInSO>
  {
  }

  public abstract class visibleInPO : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInPO>
  {
  }

  public abstract class visibleInTA : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInTA>
  {
  }

  public abstract class visibleInEA : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInEA>
  {
  }

  public abstract class visibleInIN : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInIN>
  {
  }

  public abstract class visibleInCA : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInCA>
  {
  }

  public abstract class visibleInCR : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.visibleInCR>
  {
  }

  public abstract class restrictProjectSelect : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.restrictProjectSelect>
  {
  }

  public abstract class quoteNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.quoteNumberingID>
  {
  }

  public abstract class autoCompleteRevenueBudget : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    PMSetup.autoCompleteRevenueBudget>
  {
  }

  public abstract class migrationMode : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.migrationMode>
  {
  }

  public abstract class stockInitRequired : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  PMSetup.stockInitRequired>
  {
  }

  public abstract class costProjectionApprovalMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.costProjectionApprovalMapID>
  {
  }

  public abstract class costProjectionApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.costProjectionApprovalNotificationID>
  {
  }

  public abstract class costProjectionByDateApprovalMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.costProjectionByDateApprovalMapID>
  {
  }

  public abstract class costProjectionByDateApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.costProjectionByDateApprovalNotificationID>
  {
  }

  public abstract class wipAdjustmentApprovalMapID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentApprovalMapID>
  {
  }

  public abstract class wipAdjustmentApprovalNotificationID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentApprovalNotificationID>
  {
  }

  public abstract class wipAdjustmentOverbillingUnderbillingOption : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.wipAdjustmentOverbillingUnderbillingOption>
  {
  }

  public abstract class wipAdjustmentOverbillingAccountID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentOverbillingAccountID>
  {
  }

  public abstract class wipAdjustmentOverbillingSubID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentOverbillingSubID>
  {
  }

  public abstract class wipAdjustmentUnderbillingAccountID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentUnderbillingAccountID>
  {
  }

  public abstract class wipAdjustmentUnderbillingSubID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentUnderbillingSubID>
  {
  }

  public abstract class wipAdjustmentRevenueOption : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.wipAdjustmentRevenueOption>
  {
  }

  public abstract class wipAdjustmentRevenueAccountID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentRevenueAccountID>
  {
  }

  public abstract class wipAdjustmentRevenueSubID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.wipAdjustmentRevenueSubID>
  {
  }

  public abstract class unbilledRemainderAccountID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.unbilledRemainderAccountID>
  {
  }

  public abstract class unbilledRemainderSubID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.unbilledRemainderSubID>
  {
  }

  public abstract class unbilledRemainderOffsetAccountID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.unbilledRemainderOffsetAccountID>
  {
  }

  public abstract class unbilledRemainderOffsetSubID : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.unbilledRemainderOffsetSubID>
  {
  }

  public abstract class largeProjectTemplateSize : 
    BqlType<
    #nullable enable
    IBqlInt, int>.Field<
    #nullable disable
    PMSetup.largeProjectTemplateSize>
  {
  }

  public abstract class dropshipExpenseAccountSource : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.dropshipExpenseAccountSource>
  {
  }

  public abstract class dropshipExpenseSubMask : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.dropshipExpenseSubMask>
  {
  }

  public abstract class dropshipReceiptProcessing : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.dropshipReceiptProcessing>
  {
  }

  public abstract class dropshipExpenseRecording : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.dropshipExpenseRecording>
  {
  }

  public abstract class Tstamp : BqlType<
  #nullable enable
  IBqlByteArray, byte[]>.Field<
  #nullable disable
  PMSetup.Tstamp>
  {
  }

  public abstract class createdByID : BqlType<
  #nullable enable
  IBqlGuid, Guid>.Field<
  #nullable disable
  PMSetup.createdByID>
  {
  }

  public abstract class createdByScreenID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.createdByScreenID>
  {
  }

  public abstract class createdDateTime : 
    BqlType<
    #nullable enable
    IBqlDateTime, DateTime>.Field<
    #nullable disable
    PMSetup.createdDateTime>
  {
  }

  public abstract class lastModifiedByID : BqlType<
  #nullable enable
  IBqlGuid, Guid>.Field<
  #nullable disable
  PMSetup.lastModifiedByID>
  {
  }

  public abstract class lastModifiedByScreenID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    PMSetup.lastModifiedByScreenID>
  {
  }

  public abstract class lastModifiedDateTime : 
    BqlType<
    #nullable enable
    IBqlDateTime, DateTime>.Field<
    #nullable disable
    PMSetup.lastModifiedDateTime>
  {
  }
}
