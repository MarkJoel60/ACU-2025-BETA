// Decompiled with JetBrains decompiler
// Type: PX.Objects.PM.ProformaEntry_Workflow
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Data;
using PX.Data.WorkflowAPI;
using PX.Objects.CN.ProjectAccounting.PM.GraphExtensions;
using System;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.PM;

public class ProformaEntry_Workflow : PXGraphExtension<ProformaEntry>
{
  public virtual void Configure(PXScreenConfiguration config)
  {
    ProformaEntry_Workflow.Configure(config.GetScreenConfigurationContext<ProformaEntry, PMProforma>());
  }

  protected static void Configure(WorkflowContext<ProformaEntry, PMProforma> context)
  {
    BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured processingCategory = context.Categories.CreateNew("Processing", (Func<BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured>) (category => (BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured) category.DisplayName("Processing")));
    BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured correctionsCategory = context.Categories.CreateNew("Corrections", (Func<BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured>) (category => (BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured) category.DisplayName("Corrections")));
    BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured printingAndEmailingCategory = context.Categories.CreateNew("Printing and Emailing", (Func<BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured>) (category => (BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured) category.DisplayName("Printing and Emailing")));
    BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured otherCategory = context.Categories.CreateNew("OtherCategory", (Func<BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured>) (category => (BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IConfigured) category.DisplayName("Other")));
    context.AddScreenConfigurationFor((Func<BoundedTo<ProformaEntry, PMProforma>.ScreenConfiguration.IStartConfigScreen, BoundedTo<ProformaEntry, PMProforma>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<ProformaEntry, PMProforma>.ScreenConfiguration.IConfigured) ((BoundedTo<ProformaEntry, PMProforma>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<PMProforma.status>().AddDefaultFlow((Func<BoundedTo<ProformaEntry, PMProforma>.Workflow.INeedStatesFlow, BoundedTo<ProformaEntry, PMProforma>.Workflow.IConfigured>) (flow => (BoundedTo<ProformaEntry, PMProforma>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<ProformaEntry, PMProforma>.BaseFlowStep.IContainerFillerStates>) (fss =>
    {
      fss.Add<ProformaStatus.onHold>((Func<BoundedTo<ProformaEntry, PMProforma>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProformaEntry, PMProforma>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProformaEntry, PMProforma>.BaseFlowStep.IConfigured) ((BoundedTo<ProformaEntry, PMProforma>.FlowState.INeedAnyFlowStateConfig) flowState.IsInitial()).WithActions((Action<BoundedTo<ProformaEntry, PMProforma>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.removeHold), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.send), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.validateAddresses), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) null);
        actions.Add<ProformaEntryExt>((Expression<Func<ProformaEntryExt, PXAction<PMProforma>>>) (g => g.aia), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
      }))));
      fss.Add<ProformaStatus.open>((Func<BoundedTo<ProformaEntry, PMProforma>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProformaEntry, PMProforma>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProformaEntry, PMProforma>.BaseFlowStep.IConfigured) ((BoundedTo<ProformaEntry, PMProforma>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<ProformaEntry, PMProforma>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.release), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.hold), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.send), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.validateAddresses), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) null);
        actions.Add<ProformaEntryExt>((Expression<Func<ProformaEntryExt, PXAction<PMProforma>>>) (g => g.aia), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
      }))).WithEventHandlers((Action<BoundedTo<ProformaEntry, PMProforma>.WorkflowEventHandler.IContainerFillerHandlers>) (handlers => handlers.Add((Expression<Func<ProformaEntry, PXWorkflowEventHandler<PMProforma>>>) (g => g.OnRelease))))));
      fss.Add<ProformaStatus.closed>((Func<BoundedTo<ProformaEntry, PMProforma>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProformaEntry, PMProforma>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProformaEntry, PMProforma>.BaseFlowStep.IConfigured) flowState.WithActions((Action<BoundedTo<ProformaEntry, PMProforma>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.send), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) null);
        actions.Add<ProformaEntryExt>((Expression<Func<ProformaEntryExt, PXAction<PMProforma>>>) (g => g.aia), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionState.IAllowOptionalConfig, BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
      }))));
    })).WithTransitions((Action<BoundedTo<ProformaEntry, PMProforma>.Transition.IContainerFillerTransitions>) (transitions =>
    {
      transitions.AddGroupFrom<ProformaStatus.onHold>((Action<BoundedTo<ProformaEntry, PMProforma>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<ProformaEntry, PMProforma>.Transition.INeedTarget, BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured>) (t => (BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured) t.To<ProformaStatus.open>().IsTriggeredOn((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.removeHold))))));
      transitions.AddGroupFrom<ProformaStatus.open>((Action<BoundedTo<ProformaEntry, PMProforma>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<ProformaEntry, PMProforma>.Transition.INeedTarget, BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured>) (t => (BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured) t.To<ProformaStatus.onHold>().IsTriggeredOn((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.hold))));
        ts.Add((Func<BoundedTo<ProformaEntry, PMProforma>.Transition.INeedTarget, BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured>) (t => (BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured) t.To<ProformaStatus.closed>().IsTriggeredOn((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.release))));
        ts.Add((Func<BoundedTo<ProformaEntry, PMProforma>.Transition.INeedTarget, BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured>) (t => (BoundedTo<ProformaEntry, PMProforma>.Transition.IConfigured) t.To<ProformaStatus.closed>().IsTriggeredOn((Expression<Func<ProformaEntry, PXWorkflowEventHandlerBase<PMProforma>>>) (g => g.OnRelease))));
      }));
      transitions.AddGroupFrom<ProformaStatus.closed>((Action<BoundedTo<ProformaEntry, PMProforma>.Transition.ISourceContainerFillerTransitions>) (ts => { }));
    })))).WithActions((Action<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.removeHold), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(processingCategory)));
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.hold), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(processingCategory).WithFieldAssignments((Action<BoundedTo<ProformaEntry, PMProforma>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProforma.hold>((Func<BoundedTo<ProformaEntry, PMProforma>.Assignment.INeedRightOperand, BoundedTo<ProformaEntry, PMProforma>.Assignment.IConfigured>) (f => (BoundedTo<ProformaEntry, PMProforma>.Assignment.IConfigured) f.SetFromValue((object) true)))))));
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.release), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(processingCategory)));
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.send), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(printingAndEmailingCategory)));
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.proformaReport), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(printingAndEmailingCategory)));
      actions.Add<ProformaEntryExt>((Expression<Func<ProformaEntryExt, PXAction<PMProforma>>>) (g => g.aia), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder((FolderType) 2)));
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.correct), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(correctionsCategory)));
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.fillRevenueTasks), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(otherCategory)));
      actions.Add((Expression<Func<ProformaEntry, PXAction<PMProforma>>>) (g => g.validateAddresses), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder(otherCategory)));
      actions.Add<ProformaEntryExt>((Expression<Func<ProformaEntryExt, PXAction<PMProforma>>>) (g => g.substantiatedBilling), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder((FolderType) 2)));
      actions.Add<ProformaEntryExt>((Expression<Func<ProformaEntryExt, PXAction<PMProforma>>>) (g => g.substantiatedBillingConsolidated), (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) c.InFolder((FolderType) 2)));
      actions.AddNew("Transactions", (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (config => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) config.IsSidePanelScreen((Func<BoundedTo<ProformaEntry, PMProforma>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<ProformaEntry, PMProforma>.NavigationDefinition.IConfiguredSidePanel>) (sidePanelAction => sidePanelAction.NavigateToScreen<ProformaLinkMaint>().WithIcon("account_details").WithAssignments((Action<BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.IContainerFillerNavigationActionParameters>) (containerFiller =>
      {
        containerFiller.Add<ProformaLinkMaint.ProformaLinkFilter.projectID>((Func<BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.INeedRightOperand, BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.IConfigured>) (c => c.SetFromField<PMProforma.projectID>()));
        containerFiller.Add<ProformaLinkMaint.ProformaLinkFilter.refNbr>((Func<BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.INeedRightOperand, BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.IConfigured>) (c => c.SetFromField<PMProforma.refNbr>()));
      })))).DisplayName("Linked Cost Transactions")));
      actions.AddNew("TMLines", (Func<BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured>) (config => (BoundedTo<ProformaEntry, PMProforma>.ActionDefinition.IConfigured) config.IsSidePanelScreen((Func<BoundedTo<ProformaEntry, PMProforma>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<ProformaEntry, PMProforma>.NavigationDefinition.IConfiguredSidePanel>) (sidePanelAction => sidePanelAction.NavigateToScreen("PM307200").WithIcon("format_list_numbered").WithAssignments((Action<BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.IContainerFillerNavigationActionParameters>) (containerFiller => containerFiller.Add("ProFormaInvoiceNbr", (Func<BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.INeedRightOperand, BoundedTo<ProformaEntry, PMProforma>.NavigationParameter.IConfigured>) (c => c.SetFromField<PMProforma.refNbr>())))))).DisplayName("Time and Material Lines in Progress Billing")));
    })).WithHandlers((Action<BoundedTo<ProformaEntry, PMProforma>.WorkflowEventHandlerDefinition.IContainerFillerHandlers>) (handlers => handlers.Add((Func<BoundedTo<ProformaEntry, PMProforma>.WorkflowEventHandlerDefinition.INeedEventTarget, BoundedTo<ProformaEntry, PMProforma>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase>) (handler => (BoundedTo<ProformaEntry, PMProforma>.WorkflowEventHandlerDefinition.IHandlerConfiguredBase) ((BoundedTo<ProformaEntry, PMProforma>.WorkflowEventHandlerDefinition.INeedEventPrimaryEntityGetter<PMProforma>) ((BoundedTo<ProformaEntry, PMProforma>.WorkflowEventHandlerDefinition.INeedSubscriber<PMProforma>) handler.WithTargetOf<PMProforma>().OfEntityEvent<PMProforma.Events>((Expression<Func<PMProforma.Events, PXEntityEvent<PMProforma>>>) (e => e.Release))).Is((Expression<Func<PMProforma, PXWorkflowEventHandler<PMProforma, PMProforma>>>) (g => g.OnRelease))).UsesTargetAsPrimaryEntity())))).WithCategories((Action<BoundedTo<ProformaEntry, PMProforma>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(correctionsCategory);
      categories.Add(printingAndEmailingCategory);
      categories.Add(otherCategory);
      categories.Update((FolderType) 2, (Func<BoundedTo<ProformaEntry, PMProforma>.ActionCategory.ConfiguratorCategory, BoundedTo<ProformaEntry, PMProforma>.ActionCategory.ConfiguratorCategory>) (category => category.PlaceAfter(otherCategory)));
    }))));
  }
}
