// Decompiled with JetBrains decompiler
// Type: PX.Objects.PM.ProjectEntry_Workflow
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Data;
using PX.Data.WorkflowAPI;
using PX.Objects.AR;
using PX.Objects.CS;
using PX.Objects.CT;
using System;
using System.Collections;
using System.Linq.Expressions;

#nullable disable
namespace PX.Objects.PM;

public class ProjectEntry_Workflow : PXGraphExtension<ProjectEntry>
{
  private const string ProjectStockGI = "PM301010";
  public PXAction<PMProject> cancelProject;
  public PXAction<PMProject> suspend;

  private static bool IsProjectSpecificInventoryEnabled()
  {
    return PXAccess.FeatureInstalled<FeaturesSet.materialManagement>();
  }

  public virtual void Configure(PXScreenConfiguration config)
  {
    ProjectEntry_Workflow.Configure(config.GetScreenConfigurationContext<ProjectEntry, PMProject>());
  }

  protected static void Configure(WorkflowContext<ProjectEntry, PMProject> context)
  {
    BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured processingCategory = context.Categories.CreateNew("Processing", (Func<BoundedTo<ProjectEntry, PMProject>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured>) (category => (BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured) category.DisplayName("Processing")));
    BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured billingAndAllocationsCategory = context.Categories.CreateNew("Billing and Allocations", (Func<BoundedTo<ProjectEntry, PMProject>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured>) (category => (BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured) category.DisplayName("Billing and Allocations")));
    BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured budgetOperationsCategory = context.Categories.CreateNew("Budget Operations", (Func<BoundedTo<ProjectEntry, PMProject>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured>) (category => (BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured) category.DisplayName("Budget Operations")));
    BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured changeManagementCategory = context.Categories.CreateNew("Change Management", (Func<BoundedTo<ProjectEntry, PMProject>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured>) (category => (BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured) category.DisplayName("Change Management")));
    BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured commitmentsCategory = context.Categories.CreateNew("Commitments", (Func<BoundedTo<ProjectEntry, PMProject>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured>) (category => (BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured) category.DisplayName("Commitments")));
    BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured otherCategory = context.Categories.CreateNew("OtherCategory", (Func<BoundedTo<ProjectEntry, PMProject>.ActionCategory.IAllowOptionalConfigCategory, BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured>) (category => (BoundedTo<ProjectEntry, PMProject>.ActionCategory.IConfigured) category.DisplayName("Other")));
    BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured suspend = context.ActionDefinitions.CreateExisting<ProjectEntry_Workflow>((Expression<Func<ProjectEntry_Workflow, PXAction<PMProject>>>) (g => g.suspend), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (a => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) a.InFolder(processingCategory).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) false)))))));
    BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured cancelProject = context.ActionDefinitions.CreateExisting<ProjectEntry_Workflow>((Expression<Func<ProjectEntry_Workflow, PXAction<PMProject>>>) (g => g.cancelProject), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (a => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) a.InFolder(processingCategory).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa =>
    {
      fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) false)));
      fa.Add<Contract.isCancelled>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) true)));
    }))));
    context.AddScreenConfigurationFor((Func<BoundedTo<ProjectEntry, PMProject>.ScreenConfiguration.IStartConfigScreen, BoundedTo<ProjectEntry, PMProject>.ScreenConfiguration.IConfigured>) (screen => (BoundedTo<ProjectEntry, PMProject>.ScreenConfiguration.IConfigured) ((BoundedTo<ProjectEntry, PMProject>.ScreenConfiguration.INeedStateIDScreen) screen).StateIdentifierIs<PMProject.status>().AddDefaultFlow((Func<BoundedTo<ProjectEntry, PMProject>.Workflow.INeedStatesFlow, BoundedTo<ProjectEntry, PMProject>.Workflow.IConfigured>) (flow => (BoundedTo<ProjectEntry, PMProject>.Workflow.IConfigured) flow.WithFlowStates((Action<BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IContainerFillerStates>) (fss =>
    {
      fss.Add<ProjectStatus.planned>((Func<BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured) ((BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig) flowState.IsInitial()).WithActions((Action<BoundedTo<ProjectEntry, PMProject>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.lockBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.unlockBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.lockCommitments), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.unlockCommitments), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateAddresses), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.createTemplate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.runAllocation), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.autoBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
      }))));
      fss.Add<ProjectStatus.active>((Func<BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured) flowState.WithActions((Action<BoundedTo<ProjectEntry, PMProject>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.bill), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.complete), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
        actions.Add(cancelProject, (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add(suspend, (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.lockBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.unlockBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.lockCommitments), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.unlockCommitments), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateAddresses), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateBalance), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.createTemplate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.runAllocation), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.autoBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
      }))));
      fss.Add<ProjectStatus.completed>((Func<BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured) ((BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<ProjectEntry, PMProject>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.close), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.bill), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateBalance), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.createTemplate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.runAllocation), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
      }))).WithFieldStates((Action<BoundedTo<ProjectEntry, PMProject>.FieldState.IContainerFillerFields>) (fs =>
      {
        fs.AddField<PMProject.customerID>((Func<BoundedTo<ProjectEntry, PMProject>.FieldState.INeedAnyConfigField, BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured) f.IsDisabled()));
        fs.AddField<PMProject.startDate>((Func<BoundedTo<ProjectEntry, PMProject>.FieldState.INeedAnyConfigField, BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured) f.IsDisabled()));
        fs.AddField<PMProject.expireDate>((Func<BoundedTo<ProjectEntry, PMProject>.FieldState.INeedAnyConfigField, BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured) f.IsDisabled()));
      }))));
      fss.Add<ProjectStatus.closed>((Func<BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured) flowState.WithActions((Action<BoundedTo<ProjectEntry, PMProject>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.createTemplate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
      }))));
      fss.Add<ProjectStatus.cancelled>((Func<BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured) ((BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<ProjectEntry, PMProject>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.close), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar().WithConnotation((ActionConnotation) 3)));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateBalance), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
      }))).WithFieldStates((Action<BoundedTo<ProjectEntry, PMProject>.FieldState.IContainerFillerFields>) (fs => fs.AddField<PMProject.customerID>((Func<BoundedTo<ProjectEntry, PMProject>.FieldState.INeedAnyConfigField, BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured) f.IsDisabled()))))));
      fss.Add<ProjectStatus.suspended>((Func<BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig, BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured>) (flowState => (BoundedTo<ProjectEntry, PMProject>.BaseFlowStep.IConfigured) ((BoundedTo<ProjectEntry, PMProject>.FlowState.INeedAnyFlowStateConfig) flowState.WithActions((Action<BoundedTo<ProjectEntry, PMProject>.ActionState.IContainerFillerActions>) (actions =>
      {
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured) c.IsDuplicatedInToolbar()));
        actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateBalance), (Func<BoundedTo<ProjectEntry, PMProject>.ActionState.IAllowOptionalConfig, BoundedTo<ProjectEntry, PMProject>.ActionState.IConfigured>) null);
      }))).WithFieldStates((Action<BoundedTo<ProjectEntry, PMProject>.FieldState.IContainerFillerFields>) (fs => fs.AddField<PMProject.customerID>((Func<BoundedTo<ProjectEntry, PMProject>.FieldState.INeedAnyConfigField, BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.FieldState.IConfigured) f.IsDisabled()))))));
    })).WithTransitions((Action<BoundedTo<ProjectEntry, PMProject>.Transition.IContainerFillerTransitions>) (transitions =>
    {
      transitions.AddGroupFrom<ProjectStatus.planned>((Action<BoundedTo<ProjectEntry, PMProject>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.active>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate)).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa =>
      {
        fa.Add<PMProject.hold>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) f.SetFromValue((object) false)));
        fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) true)));
      }))))));
      transitions.AddGroupFrom<ProjectStatus.active>((Action<BoundedTo<ProjectEntry, PMProject>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.completed>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.complete))));
        ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.cancelled>().IsTriggeredOn(cancelProject)));
        ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.suspended>().IsTriggeredOn(suspend)));
      }));
      transitions.AddGroupFrom<ProjectStatus.completed>((Action<BoundedTo<ProjectEntry, PMProject>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.active>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate)).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) true)))))));
        ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.closed>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.close)).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa =>
        {
          fa.Add<PMProject.isCompleted>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) f.SetFromValue((object) false)));
          fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) f.SetFromValue((object) false)));
        }))));
      }));
      transitions.AddGroupFrom<ProjectStatus.cancelled>((Action<BoundedTo<ProjectEntry, PMProject>.Transition.ISourceContainerFillerTransitions>) (ts =>
      {
        ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.active>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate)).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) true)))))));
        ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.closed>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.close)).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa => fa.Add<Contract.isCancelled>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) f.SetFromValue((object) false)))))));
      }));
      transitions.AddGroupFrom<ProjectStatus.suspended>((Action<BoundedTo<ProjectEntry, PMProject>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.active>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate)).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) true)))))))));
      transitions.AddGroupFrom<ProjectStatus.closed>((Action<BoundedTo<ProjectEntry, PMProject>.Transition.ISourceContainerFillerTransitions>) (ts => ts.Add((Func<BoundedTo<ProjectEntry, PMProject>.Transition.INeedTarget, BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured>) (t => (BoundedTo<ProjectEntry, PMProject>.Transition.IConfigured) t.To<ProjectStatus.active>().IsTriggeredOn((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate)).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProject.isActive>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) f.SetFromValue((object) true)))))))));
    })))).WithActions((Action<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IContainerFillerActions>) (actions =>
    {
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.activate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(processingCategory).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa =>
      {
        fa.Add<PMProject.hold>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) f.SetFromValue((object) false)));
        fa.Add<PMProject.isCompleted>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) false)));
        fa.Add<Contract.isCancelled>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (e => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) e.SetFromValue((object) false)));
      }))));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.hold), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(processingCategory).WithFieldAssignments((Action<BoundedTo<ProjectEntry, PMProject>.Assignment.IContainerFillerFields>) (fa => fa.Add<PMProject.hold>((Func<BoundedTo<ProjectEntry, PMProject>.Assignment.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured>) (f => (BoundedTo<ProjectEntry, PMProject>.Assignment.IConfigured) f.SetFromValue((object) true)))))));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.complete), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(processingCategory)));
      actions.Add(suspend);
      actions.Add(cancelProject);
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.close), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.WithCategory(processingCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.bill), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(billingAndAllocationsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.lockCommitments), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(commitmentsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.unlockCommitments), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(commitmentsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.copyProject), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(otherCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.createTemplate), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(otherCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.ChangeID), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(otherCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateAddresses), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(otherCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.runAllocation), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(billingAndAllocationsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.validateBalance), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(budgetOperationsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.autoBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(budgetOperationsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.lockBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(budgetOperationsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.unlockBudget), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(budgetOperationsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.laborCostRates), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(otherCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.forecast), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder(budgetOperationsCategory)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.currencyRates), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder((FolderType) 2)));
      actions.Add((Expression<Func<ProjectEntry, PXAction<PMProject>>>) (g => g.projectBalanceReport), (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (c => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) c.InFolder((FolderType) 2)));
      actions.AddNew("Customers", (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (config => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) config.IsSidePanelScreen((Func<BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.IConfiguredSidePanel>) (sidePanelAction => sidePanelAction.NavigateToScreen<CustomerMaint>().WithIcon("person").WithAssignments((Action<BoundedTo<ProjectEntry, PMProject>.NavigationParameter.IContainerFillerNavigationActionParameters>) (containerFiller => containerFiller.Add<PX.Objects.AR.Customer.acctCD>((Func<BoundedTo<ProjectEntry, PMProject>.NavigationParameter.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.NavigationParameter.IConfigured>) (c => c.SetFromField<PMProject.customerID>())))))).DisplayName("Customers")));
      actions.AddNew("ProjectTransactionDetails", (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (config => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) config.IsSidePanelScreen((Func<BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.IConfiguredSidePanel>) (sidePanelAction => sidePanelAction.NavigateToScreen<TransactionInquiry>().WithIcon("account_details").WithAssignments((Action<BoundedTo<ProjectEntry, PMProject>.NavigationParameter.IContainerFillerNavigationActionParameters>) (containerFiller => containerFiller.Add<TransactionInquiry.TranFilter.projectID>((Func<BoundedTo<ProjectEntry, PMProject>.NavigationParameter.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.NavigationParameter.IConfigured>) (c => c.SetFromField<PMProject.contractID>())))))).DisplayName("Project Transaction Details")));
      if (!ProjectEntry_Workflow.IsProjectSpecificInventoryEnabled())
        return;
      actions.AddNew("ProjectStock", (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (config => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) config.IsSidePanelScreen((Func<BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.IConfiguredSidePanel>) (sidePanelAction => sidePanelAction.NavigateToScreen("PM301010").WithIcon("add_shopping_cart").WithAssignments((Action<BoundedTo<ProjectEntry, PMProject>.NavigationParameter.IContainerFillerNavigationActionParameters>) (containerFiller => containerFiller.Add("PMProject_ContractCD", (Func<BoundedTo<ProjectEntry, PMProject>.NavigationParameter.INeedRightOperand, BoundedTo<ProjectEntry, PMProject>.NavigationParameter.IConfigured>) (e => e.SetFromField<PMProject.contractCD>())))))).DisplayName("Current Project Inventory")));
      actions.AddNew("ProjectStockAll", (Func<BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IAllowOptionalConfigAction, BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured>) (config => (BoundedTo<ProjectEntry, PMProject>.ActionDefinition.IConfigured) config.IsSidePanelScreen((Func<BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.ISidePanelNeedScreen, BoundedTo<ProjectEntry, PMProject>.NavigationDefinition.IConfiguredSidePanel>) (sidePanelAction => sidePanelAction.NavigateToScreen("PM301010").WithIcon("apps").WithAssignments((Action<BoundedTo<ProjectEntry, PMProject>.NavigationParameter.IContainerFillerNavigationActionParameters>) (containerFiller => { })))).DisplayName("All Project Inventory")));
    })).WithCategories((Action<BoundedTo<ProjectEntry, PMProject>.ActionCategory.IContainerFillerCategories>) (categories =>
    {
      categories.Add(processingCategory);
      categories.Add(billingAndAllocationsCategory);
      categories.Add(budgetOperationsCategory);
      categories.Add(changeManagementCategory);
      categories.Add(commitmentsCategory);
      categories.Add(otherCategory);
      categories.Update((FolderType) 2, (Func<BoundedTo<ProjectEntry, PMProject>.ActionCategory.ConfiguratorCategory, BoundedTo<ProjectEntry, PMProject>.ActionCategory.ConfiguratorCategory>) (category => category.PlaceAfter(otherCategory)));
    }))));
  }

  [PXButton(CommitChanges = true)]
  [PXUIField(DisplayName = "Cancel")]
  protected virtual IEnumerable CancelProject(PXAdapter adapter) => adapter.Get();

  [PXButton(CommitChanges = true)]
  [PXUIField(DisplayName = "Suspend")]
  protected virtual IEnumerable Suspend(PXAdapter adapter) => adapter.Get();
}
