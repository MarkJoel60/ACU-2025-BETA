// Decompiled with JetBrains decompiler
// Type: PX.Objects.AP.APSetup
// Assembly: PX.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CF76B6BF-0C8A-413D-8225-C21BEAE6CEEC
// Assembly location: D:\tmp\2025 R2 DLLs\PX.Objects.dll
// XML documentation location: D:\tmp\2025 R2 DLLs\PX.Objects.xml

using PX.Data;
using PX.Data.BQL;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Objects.AR;
using PX.Objects.Common;
using PX.Objects.Common.DataIntegrity;
using PX.Objects.CS;
using PX.Objects.EP.Standalone;
using System;

#nullable enable
namespace PX.Objects.AP;

/// <summary>
/// General preferences for the accounts payable documents.
/// Particular settings, such as numbering sequences, cannot be changed once the module is in use.
/// </summary>
[PXPrimaryGraph(typeof (APSetupMaint))]
[PXCacheName("Accounts Payable Preferences")]
[Serializable]
public class APSetup : PXBqlTable, IBqlTable, IBqlTableSystemDataStorage
{
  protected 
  #nullable disable
  string _BatchNumberingID;
  protected string _DfltVendorClassID;
  protected short? _PerRetainTran;
  protected short? _PerRetainHist;
  protected string _InvoiceNumberingID;
  protected short? _PastDue00;
  protected short? _PastDue01;
  protected short? _PastDue02;
  protected string _CheckNumberingID;
  protected string _CreditAdjNumberingID;
  protected string _DebitAdjNumberingID;
  protected string _PriceWSNumberingID;
  protected string _DefaultTranDesc;
  protected string _ExpenseSubMask;
  protected bool? _AutoPost;
  protected string _TransactionPosting;
  protected byte[] _tstamp;
  protected Guid? _CreatedByID;
  protected string _CreatedByScreenID;
  protected System.DateTime? _CreatedDateTime;
  protected Guid? _LastModifiedByID;
  protected string _LastModifiedByScreenID;
  protected System.DateTime? _LastModifiedDateTime;
  protected bool? _RequireApprovePayments;
  protected bool? _RequireControlTotal;
  protected bool? _HoldEntry;
  protected bool? _EarlyChecks;
  protected bool? _RequireVendorRef;
  protected short? _PaymentLeadTime;
  protected Decimal? _InvoicePrecision;
  protected string _InvoiceRounding;
  protected string _VendorPriceUpdate;
  protected string _ApplyQuantityDiscountBy;
  protected string _RetentionType;
  protected int? _NumberOfMonths;

  /// <summary>
  /// The numbering sequence used for batches generated by the Accounts Payable module.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("BATCH")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Batch Numbering Sequence", Visibility = PXUIVisibility.Visible)]
  public virtual string BatchNumberingID
  {
    get => this._BatchNumberingID;
    set => this._BatchNumberingID = value;
  }

  /// <summary>
  /// The vendor class to be used as the default vendor class.
  /// When a new vendor class is created on the Vendor Classes (AP201000) form,
  /// the settings defined for the class specified here will be inserted into the appropriate boxes.
  /// </summary>
  /// <value>
  /// Refers the <see cref="T:PX.Objects.AP.VendorClass" /> DAC.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXSelector(typeof (Search2<VendorClass.vendorClassID, LeftJoin<EPEmployeeClass, On<EPEmployeeClass.vendorClassID, Equal<VendorClass.vendorClassID>>>, Where<EPEmployeeClass.vendorClassID, PX.Data.IsNull>>), DescriptionField = typeof (VendorClass.descr))]
  [PXUIField(DisplayName = "Default Vendor Class ID", Visibility = PXUIVisibility.Visible)]
  public virtual string DfltVendorClassID
  {
    get => this._DfltVendorClassID;
    set => this._DfltVendorClassID = value;
  }

  /// <summary>
  /// Defines the number of periods, during which the batches generated by the Accounts Payable module will be stored in the database.
  /// Increasing this value later, after some period of use, is not recommended,
  /// because the history deleted from the database cannot be restored and some reports will be incomplete.
  /// </summary>
  [PXDBShort]
  [PXDefault(99)]
  [PXUIField(DisplayName = "Keep Transactions for", Visibility = PXUIVisibility.Visible)]
  public virtual short? PerRetainTran
  {
    get => this._PerRetainTran;
    set => this._PerRetainTran = value;
  }

  /// <summary>
  /// Defines the number of periods, during which the Accounts Payable module history will be stored in the database.
  /// Increasing this value later, after some period of use, is not recommended,
  /// because the history deleted from the database cannot be restored and some reports will be incomplete.
  /// </summary>
  [PXDBShort]
  [PXDefault(0)]
  [PXUIField(DisplayName = "Periods to Retain History", Visibility = PXUIVisibility.Invisible)]
  public virtual short? PerRetainHist
  {
    get => this._PerRetainHist;
    set => this._PerRetainHist = value;
  }

  /// <summary>
  /// The numbering sequence used for Accounts Payable bills.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("APBILL")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Bill Numbering Sequence", Visibility = PXUIVisibility.Visible)]
  public virtual string InvoiceNumberingID
  {
    get => this._InvoiceNumberingID;
    set => this._InvoiceNumberingID = value;
  }

  /// <summary>
  /// The maximum number of days outstanding or past due for the document to be included in the first category.
  /// </summary>
  [PXDBShort]
  [PXDefault(0)]
  [PXUIField(DisplayName = "Aging Period 1", Visibility = PXUIVisibility.Visible)]
  public virtual short? PastDue00
  {
    get => this._PastDue00;
    set => this._PastDue00 = value;
  }

  /// <summary>
  /// The maximum number of days outstanding or past due for the document to be included in the second category.
  /// If the value here is greater than the PastDue00 value, documents from the first category are not included in the second category.
  /// </summary>
  [PXDBShort]
  [PXDefault(0)]
  [PXUIField(DisplayName = "Aging Period 2", Visibility = PXUIVisibility.Visible)]
  public virtual short? PastDue01
  {
    get => this._PastDue01;
    set => this._PastDue01 = value;
  }

  /// <summary>
  /// The maximum number of days outstanding or past due for the document to be included in the third category.
  /// If the value here is greater than the PastDue01 value, documents from the second category are not included in the third category.
  /// </summary>
  [PXDBShort]
  [PXDefault(0)]
  [PXUIField(DisplayName = "Aging Period 3", Visibility = PXUIVisibility.Visible)]
  public virtual short? PastDue02
  {
    get => this._PastDue02;
    set => this._PastDue02 = value;
  }

  /// <summary>
  /// The numbering sequence used for Accounts Payable payments.
  /// </summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("APPAYMENT")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Payment Numbering Sequence", Visibility = PXUIVisibility.Visible)]
  public virtual string CheckNumberingID
  {
    get => this._CheckNumberingID;
    set => this._CheckNumberingID = value;
  }

  /// <summary>The numbering sequence used for credit adjustments.</summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("APBILL")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Credit Adjustment Numbering Sequence", Visibility = PXUIVisibility.Visible)]
  public virtual string CreditAdjNumberingID
  {
    get => this._CreditAdjNumberingID;
    set => this._CreditAdjNumberingID = value;
  }

  /// <summary>The numbering sequence used for debit adjustments.</summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("APBILL")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Debit Adjustment Numbering Sequence", Visibility = PXUIVisibility.Visible)]
  public virtual string DebitAdjNumberingID
  {
    get => this._DebitAdjNumberingID;
    set => this._DebitAdjNumberingID = value;
  }

  [PXDBString(10, IsUnicode = true)]
  [PXDefault("APPRICEWS")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Price Worksheet Numbering Sequence", Visibility = PXUIVisibility.Visible)]
  public virtual string PriceWSNumberingID
  {
    get => this._PriceWSNumberingID;
    set => this._PriceWSNumberingID = value;
  }

  /// <summary>The numbering sequence used for prepayment invoices.</summary>
  /// <value>
  /// This field is a link to a <see cref="T:PX.Objects.CS.Numbering" /> record.
  /// </value>
  [PXDBString(10, IsUnicode = true)]
  [PXDefault("APBILL")]
  [PXSelector(typeof (Numbering.numberingID), DescriptionField = typeof (Numbering.descr))]
  [PXUIField(DisplayName = "Prepayment Invoice Numbering Sequence", Visibility = PXUIVisibility.Visible)]
  public virtual string PrepaymentInvoiceNumberingID { get; set; }

  /// <summary>
  /// Default way to populate description for new transactions.
  /// </summary>
  /// <value>
  /// "C" - Combination of Vendor ID and Name,
  /// "I" - Vendor ID,
  /// "N" - Vendor Name,
  /// "U" - description entered by user.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PXDefault("C")]
  [PXStringList(new string[] {"C", "I", "N", "U"}, new string[] {"Combination ID and Name", "Vendor ID", "Vendor Name", "User Entered Description"})]
  [PXUIField(DisplayName = "Default Transaction Description", Visibility = PXUIVisibility.Invisible)]
  public virtual string DefaultTranDesc
  {
    get => this._DefaultTranDesc;
    set => this._DefaultTranDesc = value;
  }

  /// <summary>
  /// The subaccount mask that defines the rule of choosing segment values for the expense subaccount
  /// to be used for non-stock items on data entry forms in the Accounts Payable module.
  /// To set up the rule, select a segment, press F3, and choose a source of the segment value, which is one of the following options:
  /// </summary>
  /// <value>
  /// The mask may include the following characters:
  /// C: Expense subaccount associated with branch
  /// E: Subaccount associated with employee
  /// I: Subaccount associated with non-stock item
  /// L: Subaccount associated with vendor location
  /// For a segment, the characters designating each option are repeated as many times as there are characters in the segment.
  /// </value>
  [PXDefault]
  [SubAccountMask(DisplayName = "Combine Expense Sub. From")]
  public virtual string ExpenseSubMask
  {
    get => this._ExpenseSubMask;
    set => this._ExpenseSubMask = value;
  }

  /// <summary>
  /// If set to <c>true</c>, indicates that transactions will be automatically posted to the General Ledger once they are released in the Accounts Payable module.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Automatically Post on Release", Visibility = PXUIVisibility.Visible)]
  public virtual bool? AutoPost
  {
    get => this._AutoPost;
    set => this._AutoPost = value;
  }

  /// <summary>
  /// Indicates whether to post transactions to GL as summary or in detailed mode.
  /// Is set by the <see cref="P:PX.Objects.AP.APSetup.SummaryPost" /> field.
  /// </summary>
  /// <value>
  /// <c>"S"</c> - Summary, <c>"D"</c> - Detail. Defaults to Detail.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PXDefault("D")]
  [PXUIField(DisplayName = "Transaction Posting", Visibility = PXUIVisibility.Invisible)]
  [PXStringList(new string[] {"S", "D"}, new string[] {"Summary", "Detail"})]
  public virtual string TransactionPosting
  {
    get => this._TransactionPosting;
    set => this._TransactionPosting = value;
  }

  [Obsolete("This field is not used anymore and will be removed in 2018R2. Use DataInconsistencyHandlingModeinstead.")]
  public virtual bool? ValidateDataConsistencyOnRelease { get; set; }

  [PXDBString(1)]
  [PXDefault("L")]
  [PXUIField(DisplayName = "Extra Data Validation")]
  [LabelList(typeof (InconsistencyHandlingMode))]
  public virtual string DataInconsistencyHandlingMode { get; set; }

  [PXDBTimestamp]
  public virtual byte[] tstamp
  {
    get => this._tstamp;
    set => this._tstamp = value;
  }

  [PXDBCreatedByID]
  public virtual Guid? CreatedByID
  {
    get => this._CreatedByID;
    set => this._CreatedByID = value;
  }

  [PXDBCreatedByScreenID]
  public virtual string CreatedByScreenID
  {
    get => this._CreatedByScreenID;
    set => this._CreatedByScreenID = value;
  }

  [PXDBCreatedDateTime]
  public virtual System.DateTime? CreatedDateTime
  {
    get => this._CreatedDateTime;
    set => this._CreatedDateTime = value;
  }

  [PXDBLastModifiedByID]
  public virtual Guid? LastModifiedByID
  {
    get => this._LastModifiedByID;
    set => this._LastModifiedByID = value;
  }

  [PXDBLastModifiedByScreenID]
  public virtual string LastModifiedByScreenID
  {
    get => this._LastModifiedByScreenID;
    set => this._LastModifiedByScreenID = value;
  }

  [PXDBLastModifiedDateTime]
  public virtual System.DateTime? LastModifiedDateTime
  {
    get => this._LastModifiedDateTime;
    set => this._LastModifiedDateTime = value;
  }

  /// <summary>
  /// Indicates whether to post transactions to GL as summary or in detailed mode.
  /// This field depends on and changes <see cref="P:PX.Objects.AP.APSetup.TransactionPosting" /> field when set.
  /// </summary>
  /// <value>
  /// <c>true</c> indicates that summary should be posted
  /// (corresponds to <c>"S"</c> value of the <see cref="P:PX.Objects.AP.APSetup.TransactionPosting" /> field.)
  /// </value>
  [PXBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Post Summary on Updating GL", Visibility = PXUIVisibility.Visible)]
  public virtual bool? SummaryPost
  {
    get => new bool?(this._TransactionPosting == "S");
    set => this._TransactionPosting = value.GetValueOrDefault() ? "S" : "D";
  }

  /// <summary>
  /// If set to <c>true</c>, indicates that approval of bills is required before bills may be paid.
  /// Bills can be approved using the Approve Bills for Payment (AP502000) form.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Require Approval of Bills Prior to Payment", Visibility = PXUIVisibility.Visible)]
  public virtual bool? RequireApprovePayments
  {
    get => this._RequireApprovePayments;
    set => this._RequireApprovePayments = value;
  }

  /// <summary>
  /// If set to <c>true</c>, adds the Amount box to the Summary area of the Bills and Adjustments (AP301000) form.
  /// To save a document in the Balanced status, the user must enter the document total in this box after reviewing the document.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Validate Document Totals on Entry")]
  public virtual bool? RequireControlTotal
  {
    get => this._RequireControlTotal;
    set => this._RequireControlTotal = value;
  }

  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Validate Tax Totals on Entry")]
  public virtual bool? RequireControlTaxTotal { get; set; }

  /// <summary>
  /// If set to <c>true</c>, new documents will have the On Hold status by default, which prevents them from being released.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Hold Documents on Entry")]
  public virtual bool? HoldEntry
  {
    get => this._HoldEntry;
    set => this._HoldEntry = value;
  }

  /// <summary>
  /// If set to <c>true</c>, allows to enter and print checks for bills, belonging to future periods.
  /// </summary>
  /// <value>
  /// Defaults to <c>true</c>.
  /// </value>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Enable Early Payments")]
  public virtual bool? EarlyChecks
  {
    get => this._EarlyChecks;
    set => this._EarlyChecks = value;
  }

  /// <summary>
  /// When set to <c>true</c>, indicates that users must fill in Vendor Ref. (<see cref="P:PX.Objects.AP.APInvoice.InvoiceNbr" />) on data entry forms in the Accounts Payable, Taxes and Purchase Orders modules.
  /// Also this check box controls the Ext. Ref. Number box (<see cref="P:PX.Objects.GL.GLTranDoc.ExtRefNbr">GLTranDoc.ExtRefNbr</see>) on the Journal Vouchers (GL304000) form of the General Ledger module.
  /// </summary>
  [PXDBBool]
  [PXDefault(true)]
  [PXUIField(DisplayName = "Require Vendor Reference")]
  public virtual bool? RequireVendorRef
  {
    get => this._RequireVendorRef;
    set => this._RequireVendorRef = value;
  }

  /// <summary>
  /// The number of days on average required for a payment to reach a vendor location.
  /// This value is used as a default value for multiple boxes on the Approve Bills for Payment (AP502000) and Prepare Payments (AP503000) forms.
  /// </summary>
  [PXDBShort]
  [PXDefault(7)]
  [PXUIField(DisplayName = "Payment Lead Time")]
  public virtual short? PaymentLeadTime
  {
    get => this._PaymentLeadTime;
    set => this._PaymentLeadTime = value;
  }

  /// <summary>
  /// Determines the smallest value to round bills amount to.
  /// Doesn't have any effect unless Invoice Rounding feature is enabled.
  /// If Rounding Rule (<see cref="P:PX.Objects.AP.APSetup.InvoiceRounding" />) is set to Use Currency Precision (<c>"N"</c>) the value of this field similarly does not affect rounding.
  /// </summary>
  /// <value>
  /// Allowed values are: <c>"0.05"</c>, <c>"0.1"</c>, <c>"0.5"</c>, <c>"1.0"</c>, <c>"10"</c>, <c>"100"</c>. Defaults to <c>"0.1"</c>
  /// </value>
  [PXDBDecimalString(2)]
  [PX.Objects.CS.InvoicePrecision.List]
  [PXDefault(TypeCode.Decimal, "0.1")]
  [PXUIField(DisplayName = "Rounding Precision")]
  public virtual Decimal? InvoicePrecision
  {
    get => this._InvoicePrecision;
    set => this._InvoicePrecision = value;
  }

  /// <summary>
  /// Determines the rule to be used to round bills total amounts.
  /// Doesn't have any effect unless Invoice Rounding feature is enabled.
  /// Smallest unit to round to is determined by the precision of the <see cref="T:PX.Objects.CM.Currency">Currency</see> if Use Currency Precision is selected,
  /// or by the value of the <see cref="P:PX.Objects.AP.APSetup.InvoicePrecision" /> field otherwise.
  /// </summary>
  /// <value>
  /// Allowed values are:
  /// <c>"N"</c> - Use Currency Precision: To round the totals to the decimal precision supported by the currency of the document.
  /// (See <see cref="P:PX.Objects.CM.Currency.DecimalPlaces">Currency.DecimalPlaces</see> field.)
  /// <c>"R"</c> - Nearest: To round each bill total to the nearest multiple of the smallest unit (specified in the Rounding Precision box). (Mathematical rounding)
  /// <c>"C"</c> - Up: To round up each bill total to the next multiple of the smallest unit.
  /// <c>"F"</c> - Down: To round down each bill total to the previous multiple of the smallest unit.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PXDefault("N")]
  [PXUIField(DisplayName = "Rounding Rule for Bills")]
  [PX.Objects.CS.InvoiceRounding.List]
  public virtual string InvoiceRounding
  {
    get => this._InvoiceRounding;
    set => this._InvoiceRounding = value;
  }

  /// <summary>
  /// When set to <c>true</c>, makes the system generate errors when a new document is created with a value in the
  /// <see cref="P:PX.Objects.AP.APInvoice.InvoiceNbr">Vendor Ref</see>. box that has already been used in the system.
  /// </summary>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Raise an Error on Duplicate Vendor Reference Number")]
  public virtual bool? RaiseErrorOnDoubleInvoiceNbr { get; set; }

  /// <summary>
  /// When set to <c>true</c>, makes it possible to load
  /// <see cref="T:PX.Objects.AP.APVendorPrice">Vendor Prices</see> by
  /// alternate ID
  /// </summary>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Load Vendor Prices by Alternate ID")]
  public virtual bool? LoadVendorsPricesUsingAlternateID { get; set; }

  [PXDBString(1, IsFixed = true)]
  [PXDefault("P")]
  [PXUIField(DisplayName = "Vendor Price Update", Visibility = PXUIVisibility.Visible)]
  [APVendorPriceUpdateType.List]
  public virtual string VendorPriceUpdate
  {
    get => this._VendorPriceUpdate;
    set => this._VendorPriceUpdate = value;
  }

  [PXDBString(1, IsFixed = true)]
  [PXDefault("L", PersistingCheck = PXPersistingCheck.Null)]
  [ApplyQuantityDiscountType.List]
  [PXUIField(DisplayName = "Apply Quantity Discounts To", Visibility = PXUIVisibility.Visible)]
  public virtual string ApplyQuantityDiscountBy
  {
    get => this._ApplyQuantityDiscountBy;
    set => this._ApplyQuantityDiscountBy = value;
  }

  /// <summary>The way the history of prices will be retained.</summary>
  /// <value>
  /// Allowed values are:
  /// <code>"L"</code> - Last Price Only: the last defined price is kept;
  /// <code>"F"</code> - Fixed Number of Months: the history of price changes is kept for the number of months specified in the <see cref="P:PX.Objects.AP.APSetup.NumberOfMonths" /> field. The period is calculated back from the current system date.
  /// </value>
  [PXDBString(1, IsFixed = true)]
  [PXDefault("L")]
  [RetentionTypeList.List]
  [PXUIField(DisplayName = "Retention Type", Visibility = PXUIVisibility.SelectorVisible)]
  public virtual string RetentionType
  {
    get => this._RetentionType;
    set => this._RetentionType = value;
  }

  /// <summary>
  /// The number of months the history of price changes should be kept.
  /// This field is relevant if the Fixed Number of Months (<code>"F"</code>) option is selected in the <see cref="P:PX.Objects.AP.APSetup.RetentionType" />.
  /// </summary>
  [PXDBInt]
  [PXDefault(12)]
  [PXUIField(DisplayName = "Number of Months", Visibility = PXUIVisibility.Visible)]
  public virtual int? NumberOfMonths
  {
    get => this._NumberOfMonths;
    set => this._NumberOfMonths = value;
  }

  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Set Zero Payment Amount to Application Amount")]
  public bool? SuggestPaymentAmount { get; set; }

  /// <summary>
  /// Specifies (if set to <c>true</c>) that migration mode is activated for the AP module.
  /// In other words, this gives an ability to create the document with starting balance without any applications.
  /// </summary>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Activate Migration Mode")]
  public virtual bool? MigrationMode { get; set; }

  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Retain Taxes", Visibility = PXUIVisibility.Visible, FieldClass = "Retainage")]
  public virtual bool? RetainTaxes { get; set; }

  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Automatically Release Retainage Documents", Visibility = PXUIVisibility.Visible, FieldClass = "Retainage")]
  public virtual bool? RetainageBillsAutoRelease { get; set; }

  [Obsolete("This item has been deprecated and will be removed in Acumatica ERP 2025R2. For the details see AC-306704.")]
  [PXDBBool]
  [PXDefault(false)]
  public virtual bool? RequireSingleProjectPerDocument { get; set; }

  /// <summary>
  /// Activates possibility to use Credit Terms, Due date and Discount date in debit adjustments
  /// </summary>
  [PXDBBool]
  [PXDefault(false)]
  [PXUIField(DisplayName = "Use Credit Terms in Debit Adjustments", Visibility = PXUIVisibility.Visible)]
  public virtual bool? TermsInDebitAdjustments { get; set; }

  [PXDBLocalizableString(150, IsUnicode = true)]
  [PXUIField(DisplayName = "Tax Adjustment Description")]
  public virtual string PPDDebitAdjustmentDescr { get; set; }

  [PXNote]
  public virtual Guid? NoteID { get; set; }

  [PXDBString(1, IsFixed = true)]
  [PXDefault("L")]
  [PXUIField(DisplayName = "Use Intercompany Expense Account From", FieldClass = "InterBranch")]
  [APSetup.intercompanyExpenseAccountDefault.List]
  public virtual string IntercompanyExpenseAccountDefault { get; set; }

  [PXDBString(2, IsFixed = true)]
  [PXUIField(DisplayName = "Report Direct Sales On")]
  [APSetup.printDirectSalesOn.List]
  [PXDefault("MA")]
  public virtual string PrintDirectSalesOn { get; set; }

  public static class FK
  {
    public class DefaultVendorClass : 
      PrimaryKeyOf<VendorClass>.By<VendorClass.vendorClassID>.ForeignKeyOf<APSetup>.By<APSetup.dfltVendorClassID>
    {
    }

    public class BatchNumberingSequence : 
      PrimaryKeyOf<Numbering>.By<Numbering.numberingID>.ForeignKeyOf<APSetup>.By<APSetup.batchNumberingID>
    {
    }

    public class InvoiceNumberingSequence : 
      PrimaryKeyOf<Numbering>.By<Numbering.numberingID>.ForeignKeyOf<APSetup>.By<APSetup.invoiceNumberingID>
    {
    }

    public class DebitAdjustmentNumberingSequence : 
      PrimaryKeyOf<Numbering>.By<Numbering.numberingID>.ForeignKeyOf<APSetup>.By<APSetup.debitAdjNumberingID>
    {
    }

    public class CreditAdjustmentNumberingSequence : 
      PrimaryKeyOf<Numbering>.By<Numbering.numberingID>.ForeignKeyOf<APSetup>.By<APSetup.creditAdjNumberingID>
    {
    }

    public class PaymentNumberingSequence : 
      PrimaryKeyOf<Numbering>.By<Numbering.numberingID>.ForeignKeyOf<APSetup>.By<APSetup.checkNumberingID>
    {
    }

    public class PriceWorksheetNumberingSequence : 
      PrimaryKeyOf<Numbering>.By<Numbering.numberingID>.ForeignKeyOf<APSetup>.By<APSetup.priceWSNumberingID>
    {
    }

    public class PrepaymentInvoiceNumberingSequence : 
      PrimaryKeyOf<Numbering>.By<Numbering.numberingID>.ForeignKeyOf<ARSetup>.By<APSetup.prepaymentInvoiceNumberingID>
    {
    }
  }

  public abstract class batchNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.batchNumberingID>
  {
  }

  public abstract class dfltVendorClassID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.dfltVendorClassID>
  {
  }

  public abstract class perRetainTran : BqlType<
  #nullable enable
  IBqlShort, short>.Field<
  #nullable disable
  APSetup.perRetainTran>
  {
  }

  public abstract class perRetainHist : BqlType<
  #nullable enable
  IBqlShort, short>.Field<
  #nullable disable
  APSetup.perRetainHist>
  {
  }

  public abstract class invoiceNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.invoiceNumberingID>
  {
  }

  public abstract class pastDue00 : BqlType<
  #nullable enable
  IBqlShort, short>.Field<
  #nullable disable
  APSetup.pastDue00>
  {
  }

  public abstract class pastDue01 : BqlType<
  #nullable enable
  IBqlShort, short>.Field<
  #nullable disable
  APSetup.pastDue01>
  {
  }

  public abstract class pastDue02 : BqlType<
  #nullable enable
  IBqlShort, short>.Field<
  #nullable disable
  APSetup.pastDue02>
  {
  }

  public abstract class checkNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.checkNumberingID>
  {
  }

  public abstract class creditAdjNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.creditAdjNumberingID>
  {
  }

  public abstract class debitAdjNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.debitAdjNumberingID>
  {
  }

  public abstract class priceWSNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.priceWSNumberingID>
  {
  }

  public abstract class prepaymentInvoiceNumberingID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.prepaymentInvoiceNumberingID>
  {
  }

  public abstract class defaultTranDesc : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  APSetup.defaultTranDesc>
  {
  }

  public abstract class expenseSubMask : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  APSetup.expenseSubMask>
  {
  }

  public abstract class autoPost : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  APSetup.autoPost>
  {
  }

  public abstract class transactionPosting : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.transactionPosting>
  {
  }

  [Obsolete("This field is not used anymore and will be removed in 2018R2. Use DataInconsistencyHandlingModeinstead.")]
  public abstract class validateDataConsistencyOnRelease : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.validateDataConsistencyOnRelease>
  {
  }

  public abstract class dataInconsistencyHandlingMode : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.dataInconsistencyHandlingMode>
  {
  }

  public abstract class Tstamp : BqlType<
  #nullable enable
  IBqlByteArray, byte[]>.Field<
  #nullable disable
  APSetup.Tstamp>
  {
  }

  public abstract class createdByID : BqlType<
  #nullable enable
  IBqlGuid, Guid>.Field<
  #nullable disable
  APSetup.createdByID>
  {
  }

  public abstract class createdByScreenID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.createdByScreenID>
  {
  }

  public abstract class createdDateTime : 
    BqlType<
    #nullable enable
    IBqlDateTime, System.DateTime>.Field<
    #nullable disable
    APSetup.createdDateTime>
  {
  }

  public abstract class lastModifiedByID : BqlType<
  #nullable enable
  IBqlGuid, Guid>.Field<
  #nullable disable
  APSetup.lastModifiedByID>
  {
  }

  public abstract class lastModifiedByScreenID : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.lastModifiedByScreenID>
  {
  }

  public abstract class lastModifiedDateTime : 
    BqlType<
    #nullable enable
    IBqlDateTime, System.DateTime>.Field<
    #nullable disable
    APSetup.lastModifiedDateTime>
  {
  }

  public abstract class summaryPost : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  APSetup.summaryPost>
  {
  }

  public abstract class requireApprovePayments : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.requireApprovePayments>
  {
  }

  public abstract class requireControlTotal : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.requireControlTotal>
  {
  }

  public abstract class requireControlTaxTotal : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.requireControlTaxTotal>
  {
  }

  public abstract class holdEntry : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  APSetup.holdEntry>
  {
  }

  public abstract class earlyChecks : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  APSetup.earlyChecks>
  {
  }

  public abstract class requireVendorRef : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  APSetup.requireVendorRef>
  {
  }

  public abstract class paymentLeadTime : BqlType<
  #nullable enable
  IBqlShort, short>.Field<
  #nullable disable
  APSetup.paymentLeadTime>
  {
  }

  public abstract class invoicePrecision : 
    BqlType<
    #nullable enable
    IBqlDecimal, Decimal>.Field<
    #nullable disable
    APSetup.invoicePrecision>
  {
  }

  public abstract class invoiceRounding : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  APSetup.invoiceRounding>
  {
  }

  public abstract class raiseErrorOnDoubleInvoiceNbr : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.raiseErrorOnDoubleInvoiceNbr>
  {
  }

  public abstract class loadVendorsPricesUsingAlternateID : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.loadVendorsPricesUsingAlternateID>
  {
  }

  public abstract class vendorPriceUpdate : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.vendorPriceUpdate>
  {
  }

  public abstract class applyQuantityDiscountBy : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.applyQuantityDiscountBy>
  {
  }

  public abstract class retentionType : BqlType<
  #nullable enable
  IBqlString, string>.Field<
  #nullable disable
  APSetup.retentionType>
  {
  }

  public abstract class numberOfMonths : BqlType<
  #nullable enable
  IBqlInt, int>.Field<
  #nullable disable
  APSetup.numberOfMonths>
  {
  }

  public abstract class suggestPaymentAmount : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.suggestPaymentAmount>
  {
  }

  public abstract class migrationMode : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  APSetup.migrationMode>
  {
  }

  public abstract class retainTaxes : BqlType<
  #nullable enable
  IBqlBool, bool>.Field<
  #nullable disable
  APSetup.retainTaxes>
  {
  }

  public abstract class retainageBillsAutoRelease : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.retainageBillsAutoRelease>
  {
  }

  public abstract class requireSingleProjectPerDocument : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.requireSingleProjectPerDocument>
  {
  }

  public abstract class termsInDebitAdjustments : 
    BqlType<
    #nullable enable
    IBqlBool, bool>.Field<
    #nullable disable
    APSetup.termsInDebitAdjustments>
  {
  }

  public abstract class pPDDebitAdjustmentDescr : 
    BqlType<
    #nullable enable
    IBqlString, string>.Field<
    #nullable disable
    APSetup.pPDDebitAdjustmentDescr>
  {
  }

  public abstract class noteID : BqlType<
  #nullable enable
  IBqlGuid, Guid>.Field<
  #nullable disable
  APSetup.noteID>
  {
  }

  public abstract class intercompanyExpenseAccountDefault : 
    BqlType<
    #nullable enable
    IBqlShort, short>.Field<
    #nullable disable
    APSetup.intercompanyExpenseAccountDefault>
  {
    public class ListAttribute : PXStringListAttribute
    {
      public ListAttribute()
        : base(new string[2]{ "L", "I" }, new string[2]
        {
          APSetup.intercompanyExpenseAccountDefault.ListAttribute.MaskVendorLocationLabel,
          "Inventory Item"
        })
      {
      }

      public static string MaskVendorLocationLabel
      {
        get
        {
          return !PXAccess.FeatureInstalled<PX.Objects.CS.FeaturesSet.accountLocations>() ? "Vendor" : "Vendor Location";
        }
      }
    }
  }

  public abstract class printDirectSalesOn : 
    BqlType<
    #nullable enable
    IBqlShort, short>.Field<
    #nullable disable
    APSetup.printDirectSalesOn>
  {
    public const string MISC_Always = "MA";
    public const string NEC_Always = "NA";
    public const string MISC_if_Filed = "MF";
    public const string NEC_if_Filed = "NF";

    public class ListAttribute : PXStringListAttribute
    {
      public ListAttribute()
        : base(new string[4]{ "MA", "NA", "MF", "NF" }, new string[4]
        {
          "Form 1099-MISC Always",
          "Form 1099-NEC Always",
          "Form 1099-MISC if Filed for Payee",
          "Form 1099-NEC if Filed for Payee"
        })
      {
      }
    }
  }
}
